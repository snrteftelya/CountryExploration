2025-04-24 04:00:10 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 91524 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-24 04:00:10 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-24 04:00:11 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-24 04:00:11 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 23 ms. Found 3 JPA repository interfaces.
2025-04-24 04:00:11 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-24 04:00:11 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-24 04:00:11 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-24 04:00:11 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-24 04:00:11 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-24 04:00:11 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 752 ms
2025-04-24 04:00:11 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-24 04:00:11 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-24 04:00:11 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-24 04:00:11 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-24 04:00:11 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-24 04:00:11 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@5d3b6585
2025-04-24 04:00:11 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-24 04:00:12 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-24 04:00:12 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-24 04:00:12 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-24 04:00:12 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-24 04:00:13 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-24 04:00:13 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-24 04:00:13 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.278 seconds (process running for 3.642)
2025-04-24 04:00:16 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-24 04:00:16 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-24 04:00:16 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-24 04:00:16 | INFO  | o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 257 ms
2025-04-24 04:00:41 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=24.04.2025,application.log
2025-04-24 04:00:41 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 04:00:41 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 04:00:41 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-04-24 04:01:09 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=24.04.2025,application.log
2025-04-24 04:01:09 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 04:01:09 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 04:01:09 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-04-24 04:01:41 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=23.04.2025,application.log
2025-04-24 04:01:41 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 04:01:41 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 04:01:41 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-04-24 04:01:44 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=23.04.2025,application.log
2025-04-24 04:01:44 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 04:01:44 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 04:01:44 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-04-24 04:01:45 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=23.04.2025,application.log
2025-04-24 04:01:45 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 04:01:45 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 04:01:45 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-04-24 04:01:46 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=23.04.2025,application.log
2025-04-24 04:01:46 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 04:01:46 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 04:01:46 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-04-24 04:01:47 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=23.04.2025,application.log
2025-04-24 04:01:47 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 04:01:47 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 04:01:47 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 7
2025-04-24 04:01:47 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=23.04.2025,application.log
2025-04-24 04:01:47 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 04:01:47 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 04:01:47 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 8
2025-04-24 04:01:48 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=23.04.2025,application.log
2025-04-24 04:01:48 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 04:01:48 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 04:01:48 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 9
2025-04-24 04:36:29 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=33m47s875ms).
2025-04-24 05:59:50 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h23m20s502ms).
2025-04-24 07:04:47 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h4m57s529ms).
2025-04-24 08:22:46 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h17m58s339ms).
2025-04-24 09:38:44 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h15m58s629ms).
2025-04-24 10:40:30 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h1m45s916ms).
2025-04-24 11:01:59 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=21m29s200ms).
2025-04-24 11:12:51 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=10m51s80ms).
2025-04-24 11:18:48 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-04-24 11:18:49 | INFO  | org.example.service.CountryService - 🔄 Fetched 1 countries from DB and cached
2025-04-24 11:18:49 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-04-24 11:18:49 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-04-24 11:18:49 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 10
2025-04-24 11:19:10 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long)), args=1
2025-04-24 11:19:10 | WARN  | o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 42883
2025-04-24 11:19:10 | ERROR | o.h.e.jdbc.spi.SqlExceptionHelper - ERROR: function lower(bytea) does not exist
  Подсказка: No function matches the given name and argument types. You might need to add explicit type casts.
  Позиция: 126
2025-04-24 11:19:10 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long)), exception: JDBC exception executing SQL [select c1_0.id,c1_0.area,c1_0.country_id,c1_0.name,c1_0.population from city c1_0 where (? is null or lower(c1_0.name) like lower(('%'||?||'%')) escape '') and (? is null or c1_0.country_id=?)] [ERROR: function lower(bytea) does not exist
  Подсказка: No function matches the given name and argument types. You might need to add explicit type casts.
  Позиция: 126] [n/a]; SQL [n/a]
2025-04-24 11:19:10 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long))
2025-04-24 11:19:10 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 11
2025-04-24 11:19:23 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long)), args=Berlin,1
2025-04-24 11:19:23 | INFO  | org.example.service.CityService - Putting to cache: name=Berlin&countryId=1 -> 1
2025-04-24 11:19:23 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long))
2025-04-24 11:19:23 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long))
2025-04-24 11:19:23 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 12
2025-04-24 11:19:28 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long)), args=1
2025-04-24 11:19:28 | WARN  | o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 42883
2025-04-24 11:19:28 | ERROR | o.h.e.jdbc.spi.SqlExceptionHelper - ERROR: function lower(bytea) does not exist
  Подсказка: No function matches the given name and argument types. You might need to add explicit type casts.
  Позиция: 126
2025-04-24 11:19:28 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long)), exception: JDBC exception executing SQL [select c1_0.id,c1_0.area,c1_0.country_id,c1_0.name,c1_0.population from city c1_0 where (? is null or lower(c1_0.name) like lower(('%'||?||'%')) escape '') and (? is null or c1_0.country_id=?)] [ERROR: function lower(bytea) does not exist
  Подсказка: No function matches the given name and argument types. You might need to add explicit type casts.
  Позиция: 126] [n/a]; SQL [n/a]
2025-04-24 11:19:28 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long))
2025-04-24 11:19:28 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 13
2025-04-24 11:26:01 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=2025-04-24,application.log
2025-04-24 11:26:01 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:26:01 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:26:01 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 14
2025-04-24 11:26:17 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=2025-04-23,application.log
2025-04-24 11:26:17 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:26:17 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:26:17 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 15
2025-04-24 11:27:05 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=2025-04-23,application.log
2025-04-24 11:27:05 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:05 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:05 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 16
2025-04-24 11:27:11 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=2025-04-23,application.log
2025-04-24 11:27:11 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:11 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:11 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 17
2025-04-24 11:27:11 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=2025-04-23,application.log
2025-04-24 11:27:11 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:11 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:11 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 18
2025-04-24 11:27:12 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=2025-04-23,application.log
2025-04-24 11:27:12 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:12 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:12 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 19
2025-04-24 11:27:12 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=2025-04-23,application.log
2025-04-24 11:27:12 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:12 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:12 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 20
2025-04-24 11:27:12 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=2025-04-23,application.log
2025-04-24 11:27:12 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:12 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:12 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 21
2025-04-24 11:27:12 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=2025-04-23,application.log
2025-04-24 11:27:12 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:12 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:12 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 22
2025-04-24 11:27:13 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=2025-04-23,application.log
2025-04-24 11:27:13 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:13 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:13 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 23
2025-04-24 11:27:13 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=2025-04-23,application.log
2025-04-24 11:27:13 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:13 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:13 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 24
2025-04-24 11:27:13 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=2025-04-23,application.log
2025-04-24 11:27:13 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:13 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:13 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 25
2025-04-24 11:27:13 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=2025-04-23,application.log
2025-04-24 11:27:13 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:13 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:13 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 26
2025-04-24 11:27:13 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=2025-04-23,application.log
2025-04-24 11:27:13 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:13 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:13 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 27
2025-04-24 11:27:14 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=2025-04-23,application.log
2025-04-24 11:27:14 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:14 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:14 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 28
2025-04-24 11:27:14 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=2025-04-23,application.log
2025-04-24 11:27:14 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:14 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:14 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 29
2025-04-24 11:27:14 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=2025-04-23,application.log
2025-04-24 11:27:14 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:14 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:14 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 30
2025-04-24 11:27:14 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=2025-04-23,application.log
2025-04-24 11:27:14 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:14 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:14 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 31
2025-04-24 11:27:14 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=2025-04-23,application.log
2025-04-24 11:27:14 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:14 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:14 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 32
2025-04-24 11:27:15 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=2025-04-23,application.log
2025-04-24 11:27:15 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:15 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:15 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 33
2025-04-24 11:27:15 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=2025-04-23,application.log
2025-04-24 11:27:15 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:15 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:15 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 34
2025-04-24 11:27:20 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=2025-04-21,application.log
2025-04-24 11:27:20 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:20 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:20 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 35
2025-04-24 11:27:27 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=2025-04-21,application.log
2025-04-24 11:27:27 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:27 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:27 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 36
2025-04-24 11:27:27 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=2025-04-21,application.log
2025-04-24 11:27:27 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:27 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:27 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 37
2025-04-24 11:27:27 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=2025-04-21,application.log
2025-04-24 11:27:27 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:27 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:27 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 38
2025-04-24 11:27:27 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=2025-04-21,application.log
2025-04-24 11:27:27 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:27 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:27 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 39
2025-04-24 11:27:28 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=2025-04-21,application.log
2025-04-24 11:27:28 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:28 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:28 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 40
2025-04-24 11:27:28 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=2025-04-21,application.log
2025-04-24 11:27:28 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:28 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:28 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 41
2025-04-24 11:27:28 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=2025-04-21,application.log
2025-04-24 11:27:28 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:28 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:28 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 42
2025-04-24 11:27:28 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=2025-04-21,application.log
2025-04-24 11:27:28 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:28 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:28 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 43
2025-04-24 11:27:28 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=2025-04-21,application.log
2025-04-24 11:27:28 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:28 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:28 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 44
2025-04-24 11:27:28 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=2025-04-21,application.log
2025-04-24 11:27:28 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:28 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:28 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 45
2025-04-24 11:27:29 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=2025-04-21,application.log
2025-04-24 11:27:29 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:29 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:29 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 46
2025-04-24 11:27:29 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=2025-04-21,application.log
2025-04-24 11:27:29 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:29 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:29 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 47
2025-04-24 11:27:29 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=2025-04-21,application.log
2025-04-24 11:27:29 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:29 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:29 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 48
2025-04-24 11:27:29 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=2025-04-21,application.log
2025-04-24 11:27:29 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:29 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:29 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 49
2025-04-24 11:27:29 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String)), args=2025-04-21,application.log
2025-04-24 11:27:29 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:29 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogController.getLogsByDate(String,String))
2025-04-24 11:27:29 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 50
2025-04-24 11:28:50 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Retrograde clock change detected (housekeeper delta=29s506ms), soft-evicting connections from pool.
2025-04-24 11:33:23 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-24 11:33:23 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-24 11:33:23 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-24 11:33:23 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-24 11:33:26 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 92145 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-24 11:33:26 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-24 11:33:26 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-24 11:33:26 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19 ms. Found 3 JPA repository interfaces.
2025-04-24 11:33:26 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-24 11:33:26 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-24 11:33:26 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-24 11:33:26 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-24 11:33:26 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-24 11:33:26 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 737 ms
2025-04-24 11:33:27 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-24 11:33:27 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-24 11:33:27 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-24 11:33:27 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-24 11:33:27 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-24 11:33:27 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@7b3c2ae0
2025-04-24 11:33:27 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-24 11:33:27 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-24 11:33:27 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-24 11:33:27 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-24 11:33:28 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-24 11:33:29 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-24 11:33:29 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-24 11:33:29 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.293 seconds (process running for 3.683)
2025-04-24 11:33:47 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-24 11:33:47 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-24 11:33:47 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-24 11:33:47 | WARN  | o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Failure in @ExceptionHandler org.example.exception.ExceptionManager#globalExceptionHandler(Exception, WebRequest)
org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:256)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:245)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:432)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:74)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:175)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:80)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1357)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1160)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-04-24 11:33:51 | WARN  | o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Failure in @ExceptionHandler org.example.exception.ExceptionManager#globalExceptionHandler(Exception, WebRequest)
org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:256)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:245)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:432)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:74)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:175)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:80)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1357)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1160)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-04-24 11:33:54 | WARN  | o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Failure in @ExceptionHandler org.example.exception.ExceptionManager#globalExceptionHandler(Exception, WebRequest)
org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:256)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:245)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:432)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:74)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:175)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:80)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1357)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1160)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-04-24 11:35:21 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-24 11:35:21 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-24 11:35:21 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-24 11:35:21 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-24 11:35:24 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 92196 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-24 11:35:24 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-24 11:35:24 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-24 11:35:24 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 20 ms. Found 3 JPA repository interfaces.
2025-04-24 11:35:24 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-24 11:35:24 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-24 11:35:24 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-24 11:35:24 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-24 11:35:24 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-24 11:35:24 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 724 ms
2025-04-24 11:35:24 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-24 11:35:25 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-24 11:35:25 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-24 11:35:25 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-24 11:35:25 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-24 11:35:25 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@545604a9
2025-04-24 11:35:25 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-24 11:35:25 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-24 11:35:25 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-24 11:35:25 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-24 11:35:25 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-24 11:35:27 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-24 11:35:27 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-24 11:35:27 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.192 seconds (process running for 3.586)
2025-04-24 11:35:27 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-24 11:35:27 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-24 11:35:27 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-24 11:35:27 | WARN  | o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Failure in @ExceptionHandler org.example.exception.ExceptionManager#globalExceptionHandler(Exception, WebRequest)
org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:256)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:245)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:432)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:74)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:175)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:80)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1357)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1160)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-04-24 11:35:32 | WARN  | o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Failure in @ExceptionHandler org.example.exception.ExceptionManager#globalExceptionHandler(Exception, WebRequest)
org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:256)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:245)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:432)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:74)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:175)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:80)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1357)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1160)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-04-22 11:38:28 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-22 11:38:28 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-24 11:38:28 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-24 11:38:28 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-24 11:41:25 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 92343 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-24 11:41:25 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-24 11:41:26 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-24 11:41:26 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 18 ms. Found 3 JPA repository interfaces.
2025-04-24 11:41:26 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-24 11:41:26 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-24 11:41:26 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-24 11:41:26 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-24 11:41:26 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-24 11:41:26 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 680 ms
2025-04-24 11:41:26 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-24 11:41:26 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-24 11:41:26 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-24 11:41:26 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-24 11:41:26 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-24 11:41:26 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@716ae973
2025-04-24 11:41:26 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-24 11:41:27 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-24 11:41:27 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-24 11:41:27 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-24 11:41:27 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-24 11:41:28 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-24 11:41:28 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-24 11:41:28 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.116 seconds (process running for 3.464)
2025-04-24 11:41:32 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-24 11:41:32 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-24 11:41:32 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-04-24 11:41:33 | INFO  | o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 251 ms
2025-04-24 11:41:53 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(String org.example.controller.LogsController.getCurrentLogs()), args=
2025-04-24 11:41:53 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(String org.example.controller.LogsController.getCurrentLogs())
2025-04-24 11:41:53 | INFO  | o.example.aspect.CountrySearchAspect - After execution(String org.example.controller.LogsController.getCurrentLogs())
2025-04-24 11:41:53 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-04-24 11:58:22 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m55s800ms).
2025-04-24 12:14:48 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m55s679ms).
2025-04-24 12:22:16 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=7m28s105ms).
2025-04-24 12:23:55 | WARN  | o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Failure in @ExceptionHandler org.example.exception.ExceptionManager#globalExceptionHandler(Exception, WebRequest)
org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:256)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:245)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:432)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:74)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:175)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:80)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1357)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1160)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-04-24 12:23:55 | ERROR | o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.IllegalStateException: No target Validator set] with root cause
java.lang.IllegalStateException: No target Validator set
	at org.springframework.util.Assert.state(Assert.java:76)
	at org.springframework.validation.beanvalidation.SpringValidatorAdapter.forExecutables(SpringValidatorAdapter.java:403)
	at org.springframework.validation.beanvalidation.MethodValidationAdapter.invokeValidatorForArguments(MethodValidationAdapter.java:258)
	at org.springframework.validation.beanvalidation.MethodValidationAdapter.validateArguments(MethodValidationAdapter.java:241)
	at org.springframework.web.method.annotation.HandlerMethodValidator.validateArguments(HandlerMethodValidator.java:115)
	at org.springframework.web.method.annotation.HandlerMethodValidator.applyArgumentValidation(HandlerMethodValidator.java:83)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:185)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-04-24 12:23:58 | WARN  | o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Failure in @ExceptionHandler org.example.exception.ExceptionManager#globalExceptionHandler(Exception, WebRequest)
org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:256)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:245)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:432)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:74)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:175)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:80)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1357)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1160)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-04-24 12:23:58 | ERROR | o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.IllegalStateException: No target Validator set] with root cause
java.lang.IllegalStateException: No target Validator set
	at org.springframework.util.Assert.state(Assert.java:76)
	at org.springframework.validation.beanvalidation.SpringValidatorAdapter.forExecutables(SpringValidatorAdapter.java:403)
	at org.springframework.validation.beanvalidation.MethodValidationAdapter.invokeValidatorForArguments(MethodValidationAdapter.java:258)
	at org.springframework.validation.beanvalidation.MethodValidationAdapter.validateArguments(MethodValidationAdapter.java:241)
	at org.springframework.web.method.annotation.HandlerMethodValidator.validateArguments(HandlerMethodValidator.java:115)
	at org.springframework.web.method.annotation.HandlerMethodValidator.applyArgumentValidation(HandlerMethodValidator.java:83)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:185)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-04-24 12:23:59 | WARN  | o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Failure in @ExceptionHandler org.example.exception.ExceptionManager#globalExceptionHandler(Exception, WebRequest)
org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:256)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:245)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:432)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:74)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:175)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:80)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1357)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1160)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-04-24 12:23:59 | ERROR | o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.IllegalStateException: No target Validator set] with root cause
java.lang.IllegalStateException: No target Validator set
	at org.springframework.util.Assert.state(Assert.java:76)
	at org.springframework.validation.beanvalidation.SpringValidatorAdapter.forExecutables(SpringValidatorAdapter.java:403)
	at org.springframework.validation.beanvalidation.MethodValidationAdapter.invokeValidatorForArguments(MethodValidationAdapter.java:258)
	at org.springframework.validation.beanvalidation.MethodValidationAdapter.validateArguments(MethodValidationAdapter.java:241)
	at org.springframework.web.method.annotation.HandlerMethodValidator.validateArguments(HandlerMethodValidator.java:115)
	at org.springframework.web.method.annotation.HandlerMethodValidator.applyArgumentValidation(HandlerMethodValidator.java:83)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:185)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-04-24 12:24:27 | WARN  | o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Failure in @ExceptionHandler org.example.exception.ExceptionManager#globalExceptionHandler(Exception, WebRequest)
org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:256)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:245)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:432)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:74)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:175)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:80)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1357)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1160)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-04-24 12:24:27 | ERROR | o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.IllegalStateException: No target Validator set] with root cause
java.lang.IllegalStateException: No target Validator set
	at org.springframework.util.Assert.state(Assert.java:76)
	at org.springframework.validation.beanvalidation.SpringValidatorAdapter.forExecutables(SpringValidatorAdapter.java:403)
	at org.springframework.validation.beanvalidation.MethodValidationAdapter.invokeValidatorForArguments(MethodValidationAdapter.java:258)
	at org.springframework.validation.beanvalidation.MethodValidationAdapter.validateArguments(MethodValidationAdapter.java:241)
	at org.springframework.web.method.annotation.HandlerMethodValidator.validateArguments(HandlerMethodValidator.java:115)
	at org.springframework.web.method.annotation.HandlerMethodValidator.applyArgumentValidation(HandlerMethodValidator.java:83)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:185)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-04-24 12:25:10 | WARN  | o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Failure in @ExceptionHandler org.example.exception.ExceptionManager#globalExceptionHandler(Exception, WebRequest)
org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:256)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:245)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:432)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:74)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:175)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:80)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1357)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1160)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-04-24 12:25:10 | ERROR | o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.IllegalStateException: No target Validator set] with root cause
java.lang.IllegalStateException: No target Validator set
	at org.springframework.util.Assert.state(Assert.java:76)
	at org.springframework.validation.beanvalidation.SpringValidatorAdapter.forExecutables(SpringValidatorAdapter.java:403)
	at org.springframework.validation.beanvalidation.MethodValidationAdapter.invokeValidatorForArguments(MethodValidationAdapter.java:258)
	at org.springframework.validation.beanvalidation.MethodValidationAdapter.validateArguments(MethodValidationAdapter.java:241)
	at org.springframework.web.method.annotation.HandlerMethodValidator.validateArguments(HandlerMethodValidator.java:115)
	at org.springframework.web.method.annotation.HandlerMethodValidator.applyArgumentValidation(HandlerMethodValidator.java:83)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:185)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-04-24 12:25:10 | WARN  | o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Failure in @ExceptionHandler org.example.exception.ExceptionManager#globalExceptionHandler(Exception, WebRequest)
org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:256)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:245)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:432)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:74)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:175)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:80)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1357)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1160)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-04-24 12:25:10 | ERROR | o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.IllegalStateException: No target Validator set] with root cause
java.lang.IllegalStateException: No target Validator set
	at org.springframework.util.Assert.state(Assert.java:76)
	at org.springframework.validation.beanvalidation.SpringValidatorAdapter.forExecutables(SpringValidatorAdapter.java:403)
	at org.springframework.validation.beanvalidation.MethodValidationAdapter.invokeValidatorForArguments(MethodValidationAdapter.java:258)
	at org.springframework.validation.beanvalidation.MethodValidationAdapter.validateArguments(MethodValidationAdapter.java:241)
	at org.springframework.web.method.annotation.HandlerMethodValidator.validateArguments(HandlerMethodValidator.java:115)
	at org.springframework.web.method.annotation.HandlerMethodValidator.applyArgumentValidation(HandlerMethodValidator.java:83)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:185)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-04-24 12:27:02 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-24 12:27:02 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-24 12:27:02 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-24 12:27:02 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-24 12:27:04 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 92542 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-24 12:27:04 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-24 12:27:04 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-24 12:27:04 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19 ms. Found 3 JPA repository interfaces.
2025-04-24 12:27:04 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-24 12:27:04 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-24 12:27:04 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-24 12:27:04 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-24 12:27:04 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-24 12:27:04 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 685 ms
2025-04-24 12:27:04 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-24 12:27:04 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-24 12:27:04 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-24 12:27:05 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-24 12:27:05 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-24 12:27:05 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@655909e2
2025-04-24 12:27:05 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-24 12:27:05 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-24 12:27:05 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-24 12:27:05 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-24 12:27:05 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-24 12:27:07 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-24 12:27:07 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-24 12:27:07 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.078 seconds (process running for 3.455)
2025-04-24 12:27:11 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-24 12:27:11 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-24 12:27:11 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-24 12:27:11 | WARN  | o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Failure in @ExceptionHandler org.example.exception.ExceptionManager#globalExceptionHandler(Exception, WebRequest)
org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:256)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:245)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:432)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:74)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:175)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:80)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1357)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1160)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-04-24 12:27:11 | ERROR | o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.IllegalStateException: No target Validator set] with root cause
java.lang.IllegalStateException: No target Validator set
	at org.springframework.util.Assert.state(Assert.java:76)
	at org.springframework.validation.beanvalidation.SpringValidatorAdapter.forExecutables(SpringValidatorAdapter.java:403)
	at org.springframework.validation.beanvalidation.MethodValidationAdapter.invokeValidatorForArguments(MethodValidationAdapter.java:258)
	at org.springframework.validation.beanvalidation.MethodValidationAdapter.validateArguments(MethodValidationAdapter.java:241)
	at org.springframework.web.method.annotation.HandlerMethodValidator.validateArguments(HandlerMethodValidator.java:115)
	at org.springframework.web.method.annotation.HandlerMethodValidator.applyArgumentValidation(HandlerMethodValidator.java:83)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:185)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-04-24 12:41:50 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-24 12:41:50 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-24 12:41:50 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-24 12:41:50 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-24 12:41:52 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 92722 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-24 12:41:52 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-24 12:41:53 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-24 12:41:53 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 25 ms. Found 3 JPA repository interfaces.
2025-04-24 12:41:53 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-24 12:41:53 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-24 12:41:53 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-24 12:41:53 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-24 12:41:53 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-24 12:41:53 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 680 ms
2025-04-24 12:41:53 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-24 12:41:53 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-24 12:41:53 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-24 12:41:53 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-24 12:41:53 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-24 12:41:53 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@5d3b6585
2025-04-24 12:41:54 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-24 12:41:54 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-24 12:41:54 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-24 12:41:54 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-24 12:41:54 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-24 12:41:55 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-24 12:41:55 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-24 12:41:55 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.073 seconds (process running for 3.431)
2025-04-24 12:42:04 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-24 12:42:04 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-24 12:42:04 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 0 ms
2025-04-24 12:42:04 | WARN  | o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Failure in @ExceptionHandler org.example.exception.ExceptionManager#globalExceptionHandler(Exception, WebRequest)
org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:256)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:245)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:432)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:74)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:175)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:80)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1357)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1160)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-04-24 12:42:09 | WARN  | o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Failure in @ExceptionHandler org.example.exception.ExceptionManager#globalExceptionHandler(Exception, WebRequest)
org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:256)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:245)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:432)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:74)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:175)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:80)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1357)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1160)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-04-24 12:42:14 | WARN  | o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Failure in @ExceptionHandler org.example.exception.ExceptionManager#globalExceptionHandler(Exception, WebRequest)
org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:256)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:245)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:432)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:74)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:175)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:80)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1357)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1160)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-04-24 12:42:22 | WARN  | o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Failure in @ExceptionHandler org.example.exception.ExceptionManager#globalExceptionHandler(Exception, WebRequest)
org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:256)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:245)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:432)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:74)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:175)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:80)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1357)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1160)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-04-24 12:48:03 | WARN  | o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Failure in @ExceptionHandler org.example.exception.ExceptionManager#globalExceptionHandler(Exception, WebRequest)
org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:256)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:245)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:432)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:74)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:175)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:80)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1357)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1160)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-04-24 12:48:11 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-24 12:48:11 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-24 12:48:11 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-24 12:48:11 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-24 12:48:13 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 92810 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-24 12:48:13 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-24 12:48:13 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-24 12:48:13 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 21 ms. Found 3 JPA repository interfaces.
2025-04-24 12:48:13 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-24 12:48:13 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-24 12:48:13 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-24 12:48:13 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-24 12:48:13 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-24 12:48:13 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 710 ms
2025-04-24 12:48:14 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-24 12:48:14 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-24 12:48:14 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-24 12:48:14 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-24 12:48:14 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-24 12:48:14 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@655909e2
2025-04-24 12:48:14 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-24 12:48:14 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-24 12:48:14 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-24 12:48:14 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-24 12:48:15 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-24 12:48:16 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-24 12:48:16 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-24 12:48:16 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.199 seconds (process running for 3.521)
2025-04-24 12:48:17 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-24 12:48:17 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-24 12:48:17 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-24 12:48:17 | WARN  | o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Failure in @ExceptionHandler org.example.exception.ExceptionManager#globalExceptionHandler(Exception, WebRequest)
org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:256)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:245)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:432)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:74)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:175)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:80)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1357)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1160)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-04-24 12:48:17 | WARN  | o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Failure in @ExceptionHandler org.example.exception.ExceptionManager#globalExceptionHandler(Exception, WebRequest)
org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:256)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:245)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:432)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:74)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:175)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:80)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1357)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1160)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-04-24 12:48:18 | WARN  | o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Failure in @ExceptionHandler org.example.exception.ExceptionManager#globalExceptionHandler(Exception, WebRequest)
org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:256)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:245)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:432)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:74)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:175)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:80)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1357)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1160)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-04-24 12:48:44 | INFO  | o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 242 ms
2025-04-24 12:48:49 | WARN  | o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Failure in @ExceptionHandler org.example.exception.ExceptionManager#globalExceptionHandler(Exception, WebRequest)
org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:256)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:245)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:432)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:74)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:175)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:80)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1357)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1160)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-04-24 12:48:49 | ERROR | o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.IllegalStateException: No target Validator set] with root cause
java.lang.IllegalStateException: No target Validator set
	at org.springframework.util.Assert.state(Assert.java:76)
	at org.springframework.validation.beanvalidation.SpringValidatorAdapter.forExecutables(SpringValidatorAdapter.java:403)
	at org.springframework.validation.beanvalidation.MethodValidationAdapter.invokeValidatorForArguments(MethodValidationAdapter.java:258)
	at org.springframework.validation.beanvalidation.MethodValidationAdapter.validateArguments(MethodValidationAdapter.java:241)
	at org.springframework.web.method.annotation.HandlerMethodValidator.validateArguments(HandlerMethodValidator.java:115)
	at org.springframework.web.method.annotation.HandlerMethodValidator.applyArgumentValidation(HandlerMethodValidator.java:83)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:185)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-04-24 12:52:22 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-24 12:52:22 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-24 12:52:22 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-24 12:52:22 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-24 12:52:24 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 92895 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-24 12:52:24 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-24 12:52:25 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-24 12:52:25 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 20 ms. Found 3 JPA repository interfaces.
2025-04-24 12:52:25 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-24 12:52:25 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-24 12:52:25 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-24 12:52:25 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-24 12:52:25 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-24 12:52:25 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 692 ms
2025-04-24 12:52:25 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-24 12:52:25 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-24 12:52:25 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-24 12:52:25 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-24 12:52:25 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-24 12:52:25 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@41059616
2025-04-24 12:52:25 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-24 12:52:26 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-24 12:52:26 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-24 12:52:26 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-24 12:52:26 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-24 12:52:27 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-24 12:52:27 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-24 12:52:27 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.163 seconds (process running for 3.488)
2025-04-24 12:52:29 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-24 12:52:29 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-24 12:52:29 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 0 ms
2025-04-24 12:52:29 | WARN  | o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Failure in @ExceptionHandler org.example.exception.ExceptionManager#globalExceptionHandler(Exception, WebRequest)
org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:256)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:245)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:432)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:74)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:175)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:80)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1357)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1160)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-04-24 12:52:29 | ERROR | o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.IllegalStateException: No target Validator set] with root cause
java.lang.IllegalStateException: No target Validator set
	at org.springframework.util.Assert.state(Assert.java:76)
	at org.springframework.validation.beanvalidation.SpringValidatorAdapter.forExecutables(SpringValidatorAdapter.java:403)
	at org.springframework.validation.beanvalidation.MethodValidationAdapter.invokeValidatorForArguments(MethodValidationAdapter.java:258)
	at org.springframework.validation.beanvalidation.MethodValidationAdapter.validateArguments(MethodValidationAdapter.java:241)
	at org.springframework.web.method.annotation.HandlerMethodValidator.validateArguments(HandlerMethodValidator.java:115)
	at org.springframework.web.method.annotation.HandlerMethodValidator.applyArgumentValidation(HandlerMethodValidator.java:83)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:185)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-04-24 12:52:32 | WARN  | o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Failure in @ExceptionHandler org.example.exception.ExceptionManager#globalExceptionHandler(Exception, WebRequest)
org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:256)
	at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:245)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:432)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:74)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:175)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:80)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1357)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1160)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-04-24 12:52:32 | ERROR | o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.IllegalStateException: No target Validator set] with root cause
java.lang.IllegalStateException: No target Validator set
	at org.springframework.util.Assert.state(Assert.java:76)
	at org.springframework.validation.beanvalidation.SpringValidatorAdapter.forExecutables(SpringValidatorAdapter.java:403)
	at org.springframework.validation.beanvalidation.MethodValidationAdapter.invokeValidatorForArguments(MethodValidationAdapter.java:258)
	at org.springframework.validation.beanvalidation.MethodValidationAdapter.validateArguments(MethodValidationAdapter.java:241)
	at org.springframework.web.method.annotation.HandlerMethodValidator.validateArguments(HandlerMethodValidator.java:115)
	at org.springframework.web.method.annotation.HandlerMethodValidator.applyArgumentValidation(HandlerMethodValidator.java:83)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:185)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat    .util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-04-24 12:55:04 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-20 12:55:04 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-24 12:55:04 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-24 12:55:04 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-24 12:55:08 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-24 12:55:08 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 92950 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-24 12:55:08 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-24 12:55:08 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-24 12:55:08 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 21 ms. Found 3 JPA repository interfaces.
2025-04-24 12:55:08 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-24 12:55:08 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-24 12:55:08 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-24 12:55:08 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-24 12:55:08 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-24 12:55:08 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 741 ms
2025-04-24 12:55:08 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-24 12:55:08 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-24 12:55:08 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-24 12:55:09 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-24 12:55:09 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-24 12:55:09 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@7079f8f0
2025-04-24 12:55:09 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-24 12:55:09 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-24 12:55:09 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-24 12:55:09 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-24 12:55:09 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-24 12:55:11 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-24 12:55:11 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-24 12:55:11 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.265 seconds (process running for 3.607)
2025-04-24 12:55:13 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-24 12:55:13 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-24 12:55:13 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-24 12:55:13 | INFO  | o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 230 ms
2025-04-24 12:55:20 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogsController.downloadLogs(String)), args=2025-04-24
2025-04-24 12:55:20 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogsController.downloadLogs(String))
2025-04-24 12:55:20 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogsController.downloadLogs(String))
2025-04-24 12:55:20 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-04-24 12:55:35 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogsController.downloadLogs(String)), args=2025-04-22
2025-04-24 12:55:35 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogsController.downloadLogs(String))
2025-04-24 12:55:35 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogsController.downloadLogs(String))
2025-04-24 12:55:35 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-04-24 13:03:26 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-24 13:03:26 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-24 13:03:26 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-24 13:03:26 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-24 13:03:28 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-24 13:03:28 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 93113 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-24 13:03:28 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-24 13:03:28 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-24 13:03:28 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 22 ms. Found 3 JPA repository interfaces.
2025-04-24 13:03:29 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-24 13:03:29 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-24 13:03:29 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-24 13:03:29 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-24 13:03:29 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-24 13:03:29 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 790 ms
2025-04-24 13:03:29 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-24 13:03:29 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-24 13:03:29 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-24 13:03:29 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-24 13:03:29 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-24 13:03:29 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@403f7aa2
2025-04-24 13:03:29 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-24 13:03:29 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-24 13:03:30 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-24 13:03:30 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-24 13:03:30 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-24 13:03:31 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-24 13:03:31 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-24 13:03:31 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.448 seconds (process running for 3.801)
2025-04-24 13:03:32 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-24 13:03:32 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-24 13:03:32 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-24 13:03:32 | INFO  | o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 242 ms
2025-04-24 13:05:16 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-24 13:05:16 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-24 13:05:16 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-24 13:05:16 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-24 13:05:18 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-24 13:05:18 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 93149 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-24 13:05:18 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-24 13:05:18 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-24 13:05:18 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 23 ms. Found 3 JPA repository interfaces.
2025-04-24 13:05:18 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-24 13:05:18 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-24 13:05:18 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-24 13:05:18 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-24 13:05:18 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-24 13:05:18 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 743 ms
2025-04-24 13:05:19 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-24 13:05:19 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-24 13:05:19 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-24 13:05:19 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-24 13:05:19 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-24 13:05:19 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@6abe62bb
2025-04-24 13:05:19 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-24 13:05:19 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-24 13:05:19 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-24 13:05:19 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-24 13:05:20 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-24 13:05:21 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-24 13:05:21 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-24 13:05:21 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.388 seconds (process running for 3.712)
2025-04-24 13:05:21 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-24 13:05:21 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-24 13:05:21 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-24 13:05:22 | INFO  | o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 239 ms
2025-04-24 13:05:31 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogsController.downloadOrViewLogs(String,String)), args=2025-04-24,**
2025-04-24 13:08:21 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogsController.downloadOrViewLogs(String,String))
2025-04-24 13:08:21 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogsController.downloadOrViewLogs(String,String))
2025-04-24 13:08:21 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-04-24 13:08:36 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogsController.downloadOrViewLogs(String,String)), args=2025-04-22,**
2025-04-24 13:12:36 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogsController.downloadOrViewLogs(String,String))
2025-04-24 13:12:36 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogsController.downloadOrViewLogs(String,String))
2025-04-24 13:12:36 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-04-24 13:14:58 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-24 13:14:58 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-24 13:14:58 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-24 13:14:58 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-24 13:15:01 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-24 13:15:01 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 93420 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-24 13:15:01 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-24 13:15:01 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-24 13:15:01 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 26 ms. Found 3 JPA repository interfaces.
2025-04-24 13:15:02 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-24 13:15:02 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-24 13:15:02 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-24 13:15:02 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-24 13:15:02 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-24 13:15:02 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 850 ms
2025-04-24 13:15:02 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-24 13:15:02 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-24 13:15:02 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-24 13:15:02 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-24 13:15:02 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-24 13:15:02 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@545604a9
2025-04-24 13:15:02 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-24 13:15:03 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-24 13:15:03 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-24 13:15:03 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-24 13:15:03 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-24 13:15:04 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-24 13:15:04 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-24 13:15:04 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.51 seconds (process running for 3.834)
2025-04-24 13:15:07 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-24 13:15:07 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-24 13:15:07 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-24 13:15:07 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogsController.downloadOrViewLogs(String,String)), args=2025-04-20,**
2025-04-24 13:15:13 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogsController.downloadOrViewLogs(String,String))
2025-04-24 13:15:13 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogsController.downloadOrViewLogs(String,String))
2025-04-24 13:15:13 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-04-24 13:15:18 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogsController.downloadOrViewLogs(String,String)), args=2025-04-22,**
2025-04-24 13:15:53 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogsController.downloadOrViewLogs(String,String))
2025-04-24 13:15:53 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogsController.downloadOrViewLogs(String,String))
2025-04-24 13:15:53 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-04-24 13:16:07 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long)), args=1
2025-04-24 13:16:07 | WARN  | o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 42883
2025-04-24 13:16:07 | ERROR | o.h.e.jdbc.spi.SqlExceptionHelper - ERROR: function lower(bytea) does not exist
  Подсказка: No function matches the given name and argument types. You might need to add explicit type casts.
  Позиция: 126
2025-04-24 13:16:07 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long)), exception: JDBC exception executing SQL [select c1_0.id,c1_0.area,c1_0.country_id,c1_0.name,c1_0.population from city c1_0 where (? is null or lower(c1_0.name) like lower(('%'||?||'%')) escape '') and (? is null or c1_0.country_id=?)] [ERROR: function lower(bytea) does not exist
  Подсказка: No function matches the given name and argument types. You might need to add explicit type casts.
  Позиция: 126] [n/a]; SQL [n/a]
2025-04-24 13:16:07 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long))
2025-04-24 13:16:07 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-04-24 13:19:32 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-24 13:19:32 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-24 13:19:32 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-24 13:19:32 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-24 13:19:34 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-24 13:19:34 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 93499 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-24 13:19:34 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-24 13:19:34 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-24 13:19:34 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19 ms. Found 3 JPA repository interfaces.
2025-04-24 13:19:35 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-24 13:19:35 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-24 13:19:35 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-24 13:19:35 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-24 13:19:35 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-24 13:19:35 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 713 ms
2025-04-24 13:19:35 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-24 13:19:35 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-24 13:19:35 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-24 13:19:35 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-24 13:19:35 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-24 13:19:35 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@4aeaff64
2025-04-24 13:19:35 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-24 13:19:35 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-24 13:19:36 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-24 13:19:36 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-24 13:19:36 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-24 13:19:37 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-24 13:19:37 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-24 13:19:37 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.231 seconds (process running for 3.56)
2025-04-24 13:19:40 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-24 13:19:40 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-24 13:19:40 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 0 ms
2025-04-24 13:19:40 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long)), args=1
2025-04-24 13:19:40 | WARN  | o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 42883
2025-04-24 13:19:40 | ERROR | o.h.e.jdbc.spi.SqlExceptionHelper - ERROR: function lower(bytea) does not exist
  Подсказка: No function matches the given name and argument types. You might need to add explicit type casts.
  Позиция: 126
2025-04-24 13:19:40 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long)), exception: JDBC exception executing SQL [select c1_0.id,c1_0.area,c1_0.country_id,c1_0.name,c1_0.population from city c1_0 where (? is null or lower(c1_0.name) like lower(('%'||?||'%')) escape '') and (? is null or c1_0.country_id=?)] [ERROR: function lower(bytea) does not exist
  Подсказка: No function matches the given name and argument types. You might need to add explicit type casts.
  Позиция: 126] [n/a]; SQL [n/a]
2025-04-24 13:19:40 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long))
2025-04-24 13:19:40 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-04-24 13:19:43 | INFO  | o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 237 ms
2025-04-24 13:19:48 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long)), args=1
2025-04-24 13:19:48 | WARN  | o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 42883
2025-04-24 13:19:48 | ERROR | o.h.e.jdbc.spi.SqlExceptionHelper - ERROR: function lower(bytea) does not exist
  Подсказка: No function matches the given name and argument types. You might need to add explicit type casts.
  Позиция: 126
2025-04-24 13:19:48 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long)), exception: JDBC exception executing SQL [select c1_0.id,c1_0.area,c1_0.country_id,c1_0.name,c1_0.population from city c1_0 where (? is null or lower(c1_0.name) like lower(('%'||?||'%')) escape '') and (? is null or c1_0.country_id=?)] [ERROR: function lower(bytea) does not exist
  Подсказка: No function matches the given name and argument types. You might need to add explicit type casts.
  Позиция: 126] [n/a]; SQL [n/a]
2025-04-24 13:19:48 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long))
2025-04-24 13:19:48 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-04-24 13:25:34 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long)), args=Минск
2025-04-24 13:25:34 | INFO  | org.example.service.CityService - Putting to cache: name=Минск&countryId=null -> 0
2025-04-24 13:25:34 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long))
2025-04-24 13:25:34 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long))
2025-04-24 13:25:34 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-04-24 13:25:35 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long)), args=Минск
2025-04-24 13:25:35 | INFO  | org.example.service.CityService - Getting from cache: name=Минск&countryId=null
2025-04-24 13:25:35 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long))
2025-04-24 13:25:35 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long))
2025-04-24 13:25:35 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-04-24 13:25:45 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long)), args=Berlin
2025-04-24 13:25:45 | INFO  | org.example.service.CityService - Putting to cache: name=Berlin&countryId=null -> 1
2025-04-24 13:25:45 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long))
2025-04-24 13:25:45 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long))
2025-04-24 13:25:45 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-04-24 13:25:58 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long)), args=1
2025-04-24 13:25:58 | WARN  | o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 42883
2025-04-24 13:25:58 | ERROR | o.h.e.jdbc.spi.SqlExceptionHelper - ERROR: function lower(bytea) does not exist
  Подсказка: No function matches the given name and argument types. You might need to add explicit type casts.
  Позиция: 126
2025-04-24 13:25:58 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long)), exception: JDBC exception executing SQL [select c1_0.id,c1_0.area,c1_0.country_id,c1_0.name,c1_0.population from city c1_0 where (? is null or lower(c1_0.name) like lower(('%'||?||'%')) escape '') and (? is null or c1_0.country_id=?)] [ERROR: function lower(bytea) does not exist
  Подсказка: No function matches the given name and argument types. You might need to add explicit type casts.
  Позиция: 126] [n/a]; SQL [n/a]
2025-04-24 13:25:58 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long))
2025-04-24 13:25:58 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-04-24 13:26:12 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long)), args=
2025-04-24 13:26:12 | WARN  | o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 42883
2025-04-24 13:26:12 | ERROR | o.h.e.jdbc.spi.SqlExceptionHelper - ERROR: function lower(bytea) does not exist
  Подсказка: No function matches the given name and argument types. You might need to add explicit type casts.
  Позиция: 126
2025-04-24 13:26:12 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long)), exception: JDBC exception executing SQL [select c1_0.id,c1_0.area,c1_0.country_id,c1_0.name,c1_0.population from city c1_0 where (? is null or lower(c1_0.name) like lower(('%'||?||'%')) escape '') and (? is null or c1_0.country_id=?)] [ERROR: function lower(bytea) does not exist
  Подсказка: No function matches the given name and argument types. You might need to add explicit type casts.
  Позиция: 126] [n/a]; SQL [n/a]
2025-04-24 13:26:12 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long))
2025-04-24 13:26:12 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 7
2025-04-24 13:27:56 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long)), args=
2025-04-24 13:27:56 | WARN  | o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 42883
2025-04-24 13:27:56 | ERROR | o.h.e.jdbc.spi.SqlExceptionHelper - ERROR: function lower(bytea) does not exist
  Подсказка: No function matches the given name and argument types. You might need to add explicit type casts.
  Позиция: 126
2025-04-24 13:27:56 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long)), exception: JDBC exception executing SQL [select c1_0.id,c1_0.area,c1_0.country_id,c1_0.name,c1_0.population from city c1_0 where (? is null or lower(c1_0.name) like lower(('%'||?||'%')) escape '') and (? is null or c1_0.country_id=?)] [ERROR: function lower(bytea) does not exist
  Подсказка: No function matches the given name and argument types. You might need to add explicit type casts.
  Позиция: 126] [n/a]; SQL [n/a]
2025-04-24 13:27:56 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long))
2025-04-24 13:27:56 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 8
2025-04-24 13:43:02 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1m56s976ms).
2025-04-24 13:43:05 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long)), args=Berlin
2025-04-24 13:43:05 | INFO  | org.example.service.CityService - Putting to cache: name=Berlin&countryId=null -> 1
2025-04-24 13:43:05 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long))
2025-04-24 13:43:05 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long))
2025-04-24 13:43:05 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 9
2025-04-24 14:02:03 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=16m236ms).
2025-04-24 14:19:28 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m55s74ms).
2025-04-24 14:35:33 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m35s559ms).
2025-04-24 14:51:29 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m55s482ms).
2025-04-24 15:07:55 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m56s469ms).
2025-04-24 15:23:50 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s958ms).
2025-04-24 15:40:15 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s969ms).
2025-04-24 16:02:59 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=22m44s21ms).
2025-04-24 16:19:24 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s982ms).
2025-04-24 16:35:19 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s943ms).
2025-04-24 16:48:46 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=12m56s689ms).
2025-04-24 17:04:41 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s965ms).
2025-04-24 17:21:06 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m55s611ms).
2025-04-24 17:37:02 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m55s688ms).
2025-04-24 17:49:23 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=12m20s733ms).
2025-04-24 18:18:47 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=28m53s786ms).
2025-04-24 18:34:48 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m31s401ms).
2025-04-24 18:50:17 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m29s234ms).
2025-04-24 19:42:25 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=52m7s883ms).
2025-04-24 19:51:18 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=8m52s682ms).
2025-04-24 20:37:53 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=46m35s67ms).
2025-04-24 21:26:47 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=48m54s239ms).
2025-04-24 22:14:21 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=31m33s274ms).
2025-04-24 23:13:14 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=58m53s142ms).
2025-04-24 23:33:31 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=20m17s267ms).
2025-04-25 00:14:26 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s991ms).
2025-04-25 00:30:21 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s941ms).
2025-04-25 00:46:16 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s978ms).
2025-04-25 01:02:42 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m56s75ms).
2025-04-25 01:18:38 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m55s697ms).
2025-04-25 01:34:34 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m55s688ms).
2025-04-25 01:50:59 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m55s61ms).
2025-04-25 02:15:01 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=24m2s63ms).
2025-04-25 02:31:26 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s950ms).
2025-04-25 02:47:21 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m55s700ms).
2025-04-25 03:00:54 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=13m2s322ms).
2025-04-25 03:16:49 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s937ms).
2025-04-25 03:22:53 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=6m3s870ms).
2025-04-25 04:46:49 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h23m56s694ms).
2025-04-25 05:56:20 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h9m30s953ms).
2025-04-25 07:24:00 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h27m39s743ms).
2025-04-25 08:47:19 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h23m19s473ms).
2025-04-25 10:06:55 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h19m36s31ms).
2025-04-25 11:27:15 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h20m19s883ms).
2025-04-25 12:54:42 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h27m26s218ms).
2025-04-25 13:55:44 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h1m2s334ms).
2025-04-25 14:02:46 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=7m1s752ms).
2025-04-25 14:03:45 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Retrograde clock change detected (housekeeper delta=29s348ms), soft-evicting connections from pool.
2025-04-25 15:12:48 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h2m3s116ms).
2025-04-25 16:45:43 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h32m54s524ms).
2025-04-25 18:02:03 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h16m19s832ms).
2025-04-25 18:39:29 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=37m25s950ms).
2025-04-25 18:56:13 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=16m44s543ms).
2025-04-25 19:12:38 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s991ms).
2025-04-25 19:44:52 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=32m14s122ms).
2025-04-25 21:03:54 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h19m1s948ms).
2025-04-25 22:05:00 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h1m5s840ms).
2025-04-25 22:18:27 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=13m26s687ms).
2025-04-25 23:20:12 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h1m45s287ms).
2025-04-25 23:41:37 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=21m24s639ms).
2025-04-25 23:57:08 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m31s256ms).
2025-04-26 00:13:04 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m55s820ms).
2025-04-26 00:35:14 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=22m9s928ms).
2025-04-26 00:52:32 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=17m18s876ms).
2025-04-26 01:08:57 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s919ms).
2025-04-26 01:20:36 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=11m38s144ms).
2025-04-26 01:37:00 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s938ms).
2025-04-26 01:52:56 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m55s691ms).
2025-04-26 02:08:51 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s926ms).
2025-04-26 02:21:49 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=12m28s252ms).
2025-04-26 02:37:44 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s908ms).
2025-04-26 02:51:53 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=13m39s209ms).
2025-04-26 03:07:48 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s911ms).
2025-04-26 03:22:59 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=14m40s552ms).
2025-04-26 03:38:55 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m55s737ms).
2025-04-26 03:54:50 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s858ms).
2025-04-26 04:11:14 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s332ms).
2025-04-26 04:27:09 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s899ms).
2025-04-26 04:43:34 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s858ms).
2025-04-26 04:59:29 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s949ms).
2025-04-26 05:15:29 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m30s195ms).
2025-04-26 05:31:24 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s965ms).
2025-04-26 05:47:20 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m55s748ms).
2025-04-26 06:03:44 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s943ms).
2025-04-26 06:18:07 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=14m22s359ms).
2025-04-26 06:34:32 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s961ms).
2025-04-26 06:50:27 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s909ms).
2025-04-26 07:06:52 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s895ms).
2025-04-26 07:15:16 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=8m24s369ms).
2025-04-26 07:31:12 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m55s769ms).
2025-04-26 07:47:07 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s910ms).
2025-04-26 08:02:53 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m46s192ms).
2025-04-26 08:19:18 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s943ms).
2025-04-26 08:35:13 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s948ms).
2025-04-26 08:51:38 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s886ms).
2025-04-26 09:07:33 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s915ms).
2025-04-26 09:16:03 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=8m29s937ms).
2025-04-26 09:31:57 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s949ms).
2025-04-26 09:47:51 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m53s593ms).
2025-04-26 10:03:46 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s897ms).
2025-04-26 10:17:23 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=13m6s621ms).
2025-04-26 10:33:17 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s874ms).
2025-04-26 10:49:42 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s811ms).
2025-04-26 11:05:38 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m55s765ms).
2025-04-26 11:18:05 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=12m27s424ms).
2025-04-26 11:34:30 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s940ms).
2025-04-26 11:50:25 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s940ms).
2025-04-26 12:06:20 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s925ms).
2025-04-26 12:19:19 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=12m29s57ms).
2025-04-26 12:35:14 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s677ms).
2025-04-26 12:51:39 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s927ms).
2025-04-26 13:07:35 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m55s721ms).
2025-04-26 13:20:03 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=12m28s338ms).
2025-04-26 13:36:29 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m55s667ms).
2025-04-26 13:52:24 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s932ms).
2025-04-26 14:08:19 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s940ms).
2025-04-26 14:21:07 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=12m17s987ms).
2025-04-26 14:46:40 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=25m3s403ms).
2025-04-26 15:02:35 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s859ms).
2025-04-26 15:19:00 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s876ms).
2025-04-26 15:37:35 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=18m34s849ms).
2025-04-26 15:54:00 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s936ms).
2025-04-26 16:09:54 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s910ms).
2025-04-26 16:23:28 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=13m3s469ms).
2025-04-26 16:39:24 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m55s743ms).
2025-04-26 16:55:19 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m55s714ms).
2025-04-26 17:11:44 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s956ms).
2025-04-26 17:24:13 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=12m29s85ms).
2025-04-26 17:39:49 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m35s556ms).
2025-04-26 17:56:14 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s929ms).
2025-04-26 18:12:00 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m45s703ms).
2025-04-26 18:25:25 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=12m54s967ms).
2025-04-26 18:41:20 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m55s671ms).
2025-04-26 18:56:55 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m34s957ms).
2025-04-26 19:01:43 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=4m17s975ms).
2025-04-26 19:48:37 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-26 19:48:37 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-26 19:48:37 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-26 19:48:37 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-30 02:47:54 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-30 02:47:54 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 6630 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-30 02:47:54 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-30 02:47:54 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-30 02:47:54 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 22 ms. Found 3 JPA repository interfaces.
2025-04-30 02:47:54 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-30 02:47:54 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-30 02:47:54 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-30 02:47:54 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-30 02:47:54 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-30 02:47:54 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 768 ms
2025-04-30 02:47:55 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-30 02:47:55 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-30 02:47:55 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-30 02:47:55 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-30 02:47:55 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-30 02:47:56 | ERROR | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Exception during pool initialization.
org.postgresql.util.PSQLException: Подсоединение по адресу localhost:5432 отклонено. Проверьте что хост и порт указаны правильно и что postmaster принимает TCP/IP-подсоединения.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:342)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:54)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:263)
	at org.postgresql.Driver.makeConnection(Driver.java:443)
	at org.postgresql.Driver.connect(Driver.java:297)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess.obtainConnection(JdbcEnvironmentInitiator.java:428)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcIsolationDelegate.delegateWork(JdbcIsolationDelegate.java:61)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentUsingJdbcMetadata(JdbcEnvironmentInitiator.java:276)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:107)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:129)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:238)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:215)
	at org.hibernate.boot.model.relational.Database.<init>(Database.java:45)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.getDatabase(InFlightMetadataCollectorImpl.java:223)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:191)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:170)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1432)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1503)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
Caused by: java.net.ConnectException: Connection refused
	at java.base/sun.nio.ch.Net.pollConnect(Native Method)
	at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:682)
	at java.base/sun.nio.ch.NioSocketImpl.timedFinishConnect(NioSocketImpl.java:542)
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:592)
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:327)
	at java.base/java.net.Socket.connect(Socket.java:760)
	at org.postgresql.core.PGStream.createSocket(PGStream.java:243)
	at org.postgresql.core.PGStream.<init>(PGStream.java:98)
	at org.postgresql.core.v3.ConnectionFactoryImpl.tryConnect(ConnectionFactoryImpl.java:132)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:258)
	... 50 common frames omitted
2025-04-30 02:47:56 | WARN  | o.h.e.j.e.i.JdbcEnvironmentInitiator - HHH000342: Could not obtain connection to query metadata
java.lang.NullPointerException: Cannot invoke "org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(java.sql.SQLException, String)" because the return value of "org.hibernate.resource.transaction.backend.jdbc.internal.JdbcIsolationDelegate.sqlExceptionHelper()" is null
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcIsolationDelegate.delegateWork(JdbcIsolationDelegate.java:116)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentUsingJdbcMetadata(JdbcEnvironmentInitiator.java:276)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:107)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:129)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:238)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:215)
	at org.hibernate.boot.model.relational.Database.<init>(Database.java:45)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.getDatabase(InFlightMetadataCollectorImpl.java:223)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:191)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:170)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1432)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1503)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
2025-04-30 02:47:56 | ERROR | o.s.o.j.LocalContainerEntityManagerFactoryBean - Failed to initialize JPA EntityManagerFactory: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment] due to: Unable to determine Dialect without JDBC metadata (please set 'jakarta.persistence.jdbc.url' for common cases or 'hibernate.dialect' when a custom Dialect implementation must be provided)
2025-04-30 02:47:56 | WARN  | o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment] due to: Unable to determine Dialect without JDBC metadata (please set 'jakarta.persistence.jdbc.url' for common cases or 'hibernate.dialect' when a custom Dialect implementation must be provided)
2025-04-30 02:47:56 | INFO  | o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-04-30 02:47:56 | INFO  | o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-04-30 02:47:56 | ERROR | o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment] due to: Unable to determine Dialect without JDBC metadata (please set 'jakarta.persistence.jdbc.url' for common cases or 'hibernate.dialect' when a custom Dialect implementation must be provided)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
Caused by: org.hibernate.service.spi.ServiceException: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment] due to: Unable to determine Dialect without JDBC metadata (please set 'jakarta.persistence.jdbc.url' for common cases or 'hibernate.dialect' when a custom Dialect implementation must be provided)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:276)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:238)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:215)
	at org.hibernate.boot.model.relational.Database.<init>(Database.java:45)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.getDatabase(InFlightMetadataCollectorImpl.java:223)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:191)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:170)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1432)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1503)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 16 common frames omitted
Caused by: org.hibernate.HibernateException: Unable to determine Dialect without JDBC metadata (please set 'jakarta.persistence.jdbc.url' for common cases or 'hibernate.dialect' when a custom Dialect implementation must be provided)
	at org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl.determineDialect(DialectFactoryImpl.java:191)
	at org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl.buildDialect(DialectFactoryImpl.java:87)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentWithDefaults(JdbcEnvironmentInitiator.java:143)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentUsingJdbcMetadata(JdbcEnvironmentInitiator.java:348)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:107)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:129)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	... 31 common frames omitted
2025-04-30 02:48:10 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-30 02:48:10 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 6841 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-30 02:48:10 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-30 02:48:10 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-30 02:48:10 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 23 ms. Found 3 JPA repository interfaces.
2025-04-30 02:48:10 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-30 02:48:10 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-30 02:48:10 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-30 02:48:10 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-30 02:48:10 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-30 02:48:10 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 831 ms
2025-04-30 02:48:11 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-30 02:48:11 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-30 02:48:11 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-30 02:48:11 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-30 02:48:11 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-30 02:48:11 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@7cdc4070
2025-04-30 02:48:11 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-30 02:48:11 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-30 02:48:11 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 02:48:11 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-30 02:48:12 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-30 02:48:13 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-30 02:48:13 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-30 02:48:13 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.61 seconds (process running for 4.055)
2025-04-30 02:48:35 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-30 02:48:35 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-30 02:48:35 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 3 ms
2025-04-30 02:48:35 | INFO  | o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 293 ms
2025-04-30 02:48:52 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogsController.downloadOrViewLogs(String,String)), args=2025-04-30,**
2025-04-30 02:49:58 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogsController.downloadOrViewLogs(String,String))
2025-04-30 02:49:58 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogsController.downloadOrViewLogs(String,String))
2025-04-30 02:49:58 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-04-30 02:50:28 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long)), args=
2025-04-30 02:50:28 | WARN  | o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 42883
2025-04-30 02:50:28 | ERROR | o.h.e.jdbc.spi.SqlExceptionHelper - ERROR: function lower(bytea) does not exist
  Подсказка: No function matches the given name and argument types. You might need to add explicit type casts.
  Позиция: 126
2025-04-30 02:50:28 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long)), exception: JDBC exception executing SQL [select c1_0.id,c1_0.area,c1_0.country_id,c1_0.name,c1_0.population from city c1_0 where (? is null or lower(c1_0.name) like lower(('%'||?||'%')) escape '') and (? is null or c1_0.country_id=?)] [ERROR: function lower(bytea) does not exist
  Подсказка: No function matches the given name and argument types. You might need to add explicit type casts.
  Позиция: 126] [n/a]; SQL [n/a]
2025-04-30 02:50:28 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long))
2025-04-30 02:50:28 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-04-30 02:50:29 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long)), args=
2025-04-30 02:50:29 | WARN  | o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 42883
2025-04-30 02:50:29 | ERROR | o.h.e.jdbc.spi.SqlExceptionHelper - ERROR: function lower(bytea) does not exist
  Подсказка: No function matches the given name and argument types. You might need to add explicit type casts.
  Позиция: 126
2025-04-30 02:50:29 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long)), exception: JDBC exception executing SQL [select c1_0.id,c1_0.area,c1_0.country_id,c1_0.name,c1_0.population from city c1_0 where (? is null or lower(c1_0.name) like lower(('%'||?||'%')) escape '') and (? is null or c1_0.country_id=?)] [ERROR: function lower(bytea) does not exist
  Подсказка: No function matches the given name and argument types. You might need to add explicit type casts.
  Позиция: 126] [n/a]; SQL [n/a]
2025-04-30 02:50:29 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long))
2025-04-30 02:50:29 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-04-30 02:50:31 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long)), args=
2025-04-30 02:50:31 | WARN  | o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 42883
2025-04-30 02:50:31 | ERROR | o.h.e.jdbc.spi.SqlExceptionHelper - ERROR: function lower(bytea) does not exist
  Подсказка: No function matches the given name and argument types. You might need to add explicit type casts.
  Позиция: 126
2025-04-30 02:50:31 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long)), exception: JDBC exception executing SQL [select c1_0.id,c1_0.area,c1_0.country_id,c1_0.name,c1_0.population from city c1_0 where (? is null or lower(c1_0.name) like lower(('%'||?||'%')) escape '') and (? is null or c1_0.country_id=?)] [ERROR: function lower(bytea) does not exist
  Подсказка: No function matches the given name and argument types. You might need to add explicit type casts.
  Позиция: 126] [n/a]; SQL [n/a]
2025-04-30 02:50:31 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCities(String,Long))
2025-04-30 02:50:31 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-04-30 03:05:32 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-30 03:05:32 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 03:05:32 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-30 03:05:32 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-30 03:05:35 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-30 03:05:35 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 7638 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-30 03:05:35 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-30 03:05:35 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-30 03:05:35 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 24 ms. Found 3 JPA repository interfaces.
2025-04-30 03:05:35 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-30 03:05:35 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-30 03:05:35 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-30 03:05:35 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-30 03:05:35 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-30 03:05:35 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 834 ms
2025-04-30 03:05:36 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-30 03:05:36 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-30 03:05:36 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-30 03:05:36 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-30 03:05:36 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-30 03:05:36 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@2f5f5bc9
2025-04-30 03:05:36 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-30 03:05:36 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-30 03:05:36 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 03:05:36 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-30 03:05:37 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-30 03:05:38 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-30 03:05:38 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-30 03:05:38 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.363 seconds (process running for 3.765)
2025-04-30 03:05:41 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-30 03:05:41 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-30 03:05:41 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-30 03:05:41 | INFO  | o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 230 ms
2025-04-30 03:05:59 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-04-30 03:05:59 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 03:05:59 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 03:05:59 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 03:05:59 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-04-30 03:06:14 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String)), args=Berlin
2025-04-30 03:06:14 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 03:06:14 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 03:06:14 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-04-30 03:06:33 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String)), args=Hamburg
2025-04-30 03:06:33 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 03:06:33 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 03:06:33 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-04-30 03:06:39 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String)), args=Hambur
2025-04-30 03:06:39 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 03:06:39 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 03:06:39 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-04-30 03:06:44 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String)), args=Hambur
2025-04-30 03:06:44 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 03:06:44 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 03:06:44 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-04-30 03:06:47 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String)), args=Hamburd
2025-04-30 03:06:47 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 03:06:47 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 03:06:47 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-04-30 03:06:55 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String)), args=H
2025-04-30 03:06:55 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 03:06:55 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 03:06:55 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 7
2025-04-30 03:07:10 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogsController.downloadOrViewLogs(String,String)), args=2025-04-30,*/*
2025-04-30 03:07:10 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogsController.downloadOrViewLogs(String,String))
2025-04-30 03:07:10 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogsController.downloadOrViewLogs(String,String))
2025-04-30 03:07:10 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 8
2025-04-30 03:14:36 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String)), args=
2025-04-30 03:14:36 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 03:14:36 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 03:14:36 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 9
2025-04-30 03:15:55 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-04-30 03:15:55 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 03:15:55 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 03:15:55 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 03:15:55 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 10
2025-04-30 03:16:10 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-04-30 03:16:10 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 03:16:10 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 03:16:10 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 03:16:10 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 11
2025-04-30 03:19:03 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-04-30 03:19:03 | INFO  | org.example.service.CountryService - 🔄 Fetched 1 countries from DB and cached
2025-04-30 03:19:03 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-04-30 03:19:03 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-04-30 03:19:03 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 12
2025-04-30 03:19:19 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-04-30 03:19:19 | INFO  | org.example.service.CountryService - ✅ Retrieved 1 countries from cache
2025-04-30 03:19:19 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-04-30 03:19:19 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-04-30 03:19:19 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 13
2025-04-30 03:28:55 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-30 03:28:55 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 03:28:55 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-30 03:28:55 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-30 03:28:57 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-30 03:28:57 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 8244 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-30 03:28:57 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-30 03:28:58 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-30 03:28:58 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 21 ms. Found 3 JPA repository interfaces.
2025-04-30 03:28:58 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-30 03:28:58 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-30 03:28:58 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-30 03:28:58 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-30 03:28:58 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-30 03:28:58 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 742 ms
2025-04-30 03:28:58 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-30 03:28:58 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-30 03:28:58 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-30 03:28:58 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-30 03:28:58 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-30 03:28:58 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@4aeaff64
2025-04-30 03:28:58 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-30 03:28:59 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-30 03:28:59 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 03:28:59 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-30 03:28:59 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-30 03:29:00 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-30 03:29:00 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-30 03:29:00 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.134 seconds (process running for 3.492)
2025-04-30 03:29:29 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-30 03:29:29 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-30 03:29:29 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-30 03:29:29 | INFO  | o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 248 ms
2025-04-30 03:29:44 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=1
2025-04-30 03:29:44 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 03:29:44 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 03:29:44 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-04-30 03:29:53 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=6
2025-04-30 03:29:53 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), exception: country with id 6 doesn't exist, that's why you can't view cities from its
2025-04-30 03:29:53 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 03:29:53 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-04-30 03:30:01 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=5
2025-04-30 03:30:01 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), exception: country with id 5 doesn't exist, that's why you can't view cities from its
2025-04-30 03:30:01 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 03:30:01 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-04-30 03:30:24 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=5
2025-04-30 03:30:24 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), exception: country with id 5 doesn't exist, that's why you can't view cities from its
2025-04-30 03:30:24 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 03:30:24 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-04-30 03:30:27 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=6
2025-04-30 03:30:27 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), exception: country with id 6 doesn't exist, that's why you can't view cities from its
2025-04-30 03:30:27 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 03:30:27 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-04-30 03:30:30 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=1
2025-04-30 03:30:30 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 03:30:30 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 03:30:30 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-04-30 03:31:21 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-04-30 03:31:21 | INFO  | org.example.service.CountryService - 🔄 Fetched 1 countries from DB and cached
2025-04-30 03:31:21 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-04-30 03:31:21 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-04-30 03:31:21 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 7
2025-04-30 03:37:05 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City)), args=1,City(id=null, name=Minsk, population=2000000.0, areaSquareKm=50000.0, country=null)
2025-04-30 03:37:05 | WARN  | o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 23502
2025-04-30 03:37:05 | ERROR | o.h.e.jdbc.spi.SqlExceptionHelper - ERROR: null value in column "country_id" of relation "city" violates not-null constraint
  Подробности: Failing row contains (8, 50000, Minsk, 2000000, null).
2025-04-30 03:37:05 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City)), exception: could not execute statement [ERROR: null value in column "country_id" of relation "city" violates not-null constraint
  Подробности: Failing row contains (8, 50000, Minsk, 2000000, null).] [insert into city (area,country_id,name,population) values (?,?,?,?)]; SQL [insert into city (area,country_id,name,population) values (?,?,?,?)]; constraint [country_id" of relation "city]
2025-04-30 03:37:05 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City))
2025-04-30 03:37:05 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 8
2025-04-30 03:38:48 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-04-30 03:38:48 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 03:38:48 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 03:38:48 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 03:38:48 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 9
2025-04-30 03:38:58 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=1
2025-04-30 03:38:58 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 03:38:58 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 03:38:58 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 10
2025-04-30 03:39:52 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=1
2025-04-30 03:39:52 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 03:39:52 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 03:39:52 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 11
2025-04-30 03:41:38 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-30 03:41:38 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 03:41:38 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-30 03:41:38 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-30 03:41:40 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-30 03:41:40 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 8574 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-30 03:41:40 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-30 03:41:41 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-30 03:41:41 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 23 ms. Found 3 JPA repository interfaces.
2025-04-30 03:41:41 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-30 03:41:41 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-30 03:41:41 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-30 03:41:41 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-30 03:41:41 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-30 03:41:41 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 758 ms
2025-04-30 03:41:41 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-30 03:41:41 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-30 03:41:41 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-30 03:41:41 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-30 03:41:41 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-30 03:41:41 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@93ce24d
2025-04-30 03:41:41 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-30 03:41:42 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-30 03:41:42 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 03:41:42 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-30 03:41:42 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-30 03:41:43 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-30 03:41:43 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-30 03:41:43 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.109 seconds (process running for 3.453)
2025-04-30 03:42:00 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-30 03:42:00 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-30 03:42:00 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-30 03:42:00 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City)), args=1,City(id=null, name=Minsk, population=2000000.0, areaSquareKm=50000.0, country=null)
2025-04-30 03:42:01 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City)), exception: java.lang.StackOverflowError
2025-04-30 03:42:01 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City))
2025-04-30 03:42:01 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-04-30 03:46:12 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-30 03:46:12 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 03:46:12 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-30 03:46:12 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-30 03:46:14 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-30 03:46:14 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 8714 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-30 03:46:14 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-30 03:46:15 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-30 03:46:15 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 22 ms. Found 3 JPA repository interfaces.
2025-04-30 03:46:15 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-30 03:46:15 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-30 03:46:15 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-30 03:46:15 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-30 03:46:15 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-30 03:46:15 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 756 ms
2025-04-30 03:46:15 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-30 03:46:15 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-30 03:46:15 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-30 03:46:15 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-30 03:46:15 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-30 03:46:15 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@545604a9
2025-04-30 03:46:15 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-30 03:46:16 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-30 03:46:16 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 03:46:16 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-30 03:46:16 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-30 03:46:17 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-30 03:46:17 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-30 03:46:17 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.187 seconds (process running for 3.537)
2025-04-30 03:46:19 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-30 03:46:19 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-30 03:46:19 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-30 03:46:19 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City)), args=1,City(id=null, name=Minsk, population=2000000.0, areaSquareKm=50000.0, country=null)
2025-04-30 03:46:19 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City)), exception: java.lang.StackOverflowError
2025-04-30 03:46:19 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City))
2025-04-30 03:46:19 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-04-30 03:46:22 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City)), args=1,City(id=null, name=Minsk, population=2000000.0, areaSquareKm=50000.0, country=null)
2025-04-30 03:46:22 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City)), exception: java.lang.StackOverflowError
2025-04-30 03:46:22 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City))
2025-04-30 03:46:22 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-04-30 03:46:23 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City)), args=1,City(id=null, name=Minsk, population=2000000.0, areaSquareKm=50000.0, country=null)
2025-04-30 03:46:23 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City)), exception: java.lang.StackOverflowError
2025-04-30 03:46:23 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City))
2025-04-30 03:46:23 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-04-30 03:46:24 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City)), args=1,City(id=null, name=Minsk, population=2000000.0, areaSquareKm=50000.0, country=null)
2025-04-30 03:46:24 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City)), exception: java.lang.StackOverflowError
2025-04-30 03:46:24 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City))
2025-04-30 03:46:24 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-04-30 03:46:25 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City)), args=1,City(id=null, name=Minsk, population=2000000.0, areaSquareKm=50000.0, country=null)
2025-04-30 03:46:25 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City)), exception: java.lang.StackOverflowError
2025-04-30 03:46:25 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City))
2025-04-30 03:46:25 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-04-30 03:46:25 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City)), args=1,City(id=null, name=Minsk, population=2000000.0, areaSquareKm=50000.0, country=null)
2025-04-30 03:46:25 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City)), exception: java.lang.StackOverflowError
2025-04-30 03:46:25 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City))
2025-04-30 03:46:25 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-04-30 03:52:20 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-30 03:52:20 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 03:52:20 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-30 03:52:20 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-30 03:52:39 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-30 03:52:39 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 8929 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-30 03:52:39 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-30 03:52:39 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-30 03:52:39 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 21 ms. Found 3 JPA repository interfaces.
2025-04-30 03:52:39 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-30 03:52:39 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-30 03:52:39 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-30 03:52:39 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-30 03:52:40 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-30 03:52:40 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 755 ms
2025-04-30 03:52:40 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-30 03:52:40 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-30 03:52:40 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-30 03:52:40 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-30 03:52:40 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-30 03:52:40 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@1f60824e
2025-04-30 03:52:40 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-30 03:52:40 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-30 03:52:40 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 03:52:40 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-30 03:52:41 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-30 03:52:42 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-30 03:52:42 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-30 03:52:42 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.192 seconds (process running for 3.531)
2025-04-30 03:52:45 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-30 03:52:45 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-30 03:52:45 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-30 03:52:45 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addCity(Long,City)), args=1,City(id=null, name=Minsk, population=2000000.0, areaSquareKm=50000.0, country=null)
2025-04-30 03:52:45 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CityController.addCity(Long,City)), exception: java.lang.StackOverflowError
2025-04-30 03:52:45 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addCity(Long,City))
2025-04-30 03:52:45 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-04-30 03:52:50 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addCity(Long,City)), args=1,City(id=null, name=Minsk, population=2000000.0, areaSquareKm=50000.0, country=null)
2025-04-30 03:52:50 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CityController.addCity(Long,City)), exception: java.lang.StackOverflowError
2025-04-30 03:52:50 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addCity(Long,City))
2025-04-30 03:52:50 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-04-30 03:52:57 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addCity(Long,City)), args=1,City(id=null, name=Minsk, population=2000000.0, areaSquareKm=50000.0, country=null)
2025-04-30 03:52:57 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CityController.addCity(Long,City)), exception: java.lang.StackOverflowError
2025-04-30 03:52:57 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addCity(Long,City))
2025-04-30 03:52:57 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-04-30 03:57:50 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-30 03:57:50 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 03:57:50 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-30 03:57:50 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-30 03:57:53 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-30 03:57:53 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 9084 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-30 03:57:53 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-30 03:57:53 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-30 03:57:53 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 23 ms. Found 3 JPA repository interfaces.
2025-04-30 03:57:53 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-30 03:57:53 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-30 03:57:53 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-30 03:57:53 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-30 03:57:53 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-30 03:57:53 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 768 ms
2025-04-30 03:57:53 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-30 03:57:53 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-30 03:57:53 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-30 03:57:54 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-30 03:57:54 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-30 03:57:54 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@2f5f5bc9
2025-04-30 03:57:54 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-30 03:57:54 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-30 03:57:54 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 03:57:54 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-30 03:57:54 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-30 03:57:56 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-30 03:57:56 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-30 03:57:56 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.142 seconds (process running for 3.489)
2025-04-30 03:57:58 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-30 03:57:58 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-30 03:57:58 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-30 03:57:58 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addCity(Long,City)), args=1,City(id=null, name=Minsk, population=2000000.0, areaSquareKm=50000.0, country=null)
2025-04-30 03:57:58 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CityController.addCity(Long,City)), exception: java.lang.StackOverflowError
2025-04-30 03:57:58 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addCity(Long,City))
2025-04-30 03:57:58 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-04-30 03:58:00 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addCity(Long,City)), args=1,City(id=null, name=Minsk, population=2000000.0, areaSquareKm=50000.0, country=null)
2025-04-30 03:58:00 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CityController.addCity(Long,City)), exception: java.lang.StackOverflowError
2025-04-30 03:58:00 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addCity(Long,City))
2025-04-30 03:58:00 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-04-30 03:59:51 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addCity(Long,City)), args=1,City(id=null, name=Minsk, population=2000000.0, areaSquareKm=50000.0, country=null)
2025-04-30 03:59:51 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CityController.addCity(Long,City)), exception: java.lang.StackOverflowError
2025-04-30 03:59:51 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addCity(Long,City))
2025-04-30 03:59:51 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-04-30 04:09:29 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-30 04:09:29 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 04:09:29 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-30 04:09:29 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-30 04:09:31 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-30 04:09:31 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 9514 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-30 04:09:31 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-30 04:09:31 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-30 04:09:31 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 22 ms. Found 3 JPA repository interfaces.
2025-04-30 04:09:32 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-30 04:09:32 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-30 04:09:32 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-30 04:09:32 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-30 04:09:32 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-30 04:09:32 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 753 ms
2025-04-30 04:09:32 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-30 04:09:32 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-30 04:09:32 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-30 04:09:32 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-30 04:09:32 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-30 04:09:32 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@1dbff71c
2025-04-30 04:09:32 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-30 04:09:32 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-30 04:09:33 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 04:09:33 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-30 04:09:33 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-30 04:09:34 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-30 04:09:34 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-30 04:09:34 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.173 seconds (process running for 3.528)
2025-04-30 04:09:34 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-30 04:09:34 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-30 04:09:34 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-30 04:09:34 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addCity(Long,City)), args=1,City(id=null, name=Minsk, population=2000000.0, areaSquareKm=50000.0, country=null)
2025-04-30 04:09:34 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CityController.addCity(Long,City)), exception: java.lang.StackOverflowError
2025-04-30 04:09:34 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addCity(Long,City))
2025-04-30 04:09:34 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-04-30 04:09:37 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addCity(Long,City)), args=1,City(id=null, name=Minsk, population=2000000.0, areaSquareKm=50000.0, country=null)
2025-04-30 04:09:37 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CityController.addCity(Long,City)), exception: java.lang.StackOverflowError
2025-04-30 04:09:37 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addCity(Long,City))
2025-04-30 04:09:37 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-04-30 04:09:38 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addCity(Long,City)), args=1,City(id=null, name=Minsk, population=2000000.0, areaSquareKm=50000.0, country=null)
2025-04-30 04:09:38 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CityController.addCity(Long,City)), exception: java.lang.StackOverflowError
2025-04-30 04:09:38 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addCity(Long,City))
2025-04-30 04:09:38 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-04-30 04:09:39 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addCity(Long,City)), args=1,City(id=null, name=Minsk, population=2000000.0, areaSquareKm=50000.0, country=null)
2025-04-30 04:09:39 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CityController.addCity(Long,City)), exception: java.lang.StackOverflowError
2025-04-30 04:09:39 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addCity(Long,City))
2025-04-30 04:09:39 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-04-30 04:09:39 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addCity(Long,City)), args=1,City(id=null, name=Minsk, population=2000000.0, areaSquareKm=50000.0, country=null)
2025-04-30 04:09:39 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CityController.addCity(Long,City)), exception: java.lang.StackOverflowError
2025-04-30 04:09:39 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addCity(Long,City))
2025-04-30 04:09:39 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-04-30 04:09:40 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addCity(Long,City)), args=1,City(id=null, name=Minsk, population=2000000.0, areaSquareKm=50000.0, country=null)
2025-04-30 04:09:40 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CityController.addCity(Long,City)), exception: java.lang.StackOverflowError
2025-04-30 04:09:40 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addCity(Long,City))
2025-04-30 04:09:40 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-04-30 04:09:40 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addCity(Long,City)), args=1,City(id=null, name=Minsk, population=2000000.0, areaSquareKm=50000.0, country=null)
2025-04-30 04:09:40 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CityController.addCity(Long,City)), exception: java.lang.StackOverflowError
2025-04-30 04:09:40 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addCity(Long,City))
2025-04-30 04:09:40 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 7
2025-04-30 04:09:41 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addCity(Long,City)), args=1,City(id=null, name=Minsk, population=2000000.0, areaSquareKm=50000.0, country=null)
2025-04-30 04:09:41 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CityController.addCity(Long,City)), exception: java.lang.StackOverflowError
2025-04-30 04:09:41 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addCity(Long,City))
2025-04-30 04:09:41 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 8
2025-04-30 04:09:41 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addCity(Long,City)), args=1,City(id=null, name=Minsk, population=2000000.0, areaSquareKm=50000.0, country=null)
2025-04-30 04:09:41 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CityController.addCity(Long,City)), exception: java.lang.StackOverflowError
2025-04-30 04:09:41 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addCity(Long,City))
2025-04-30 04:09:41 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 9
2025-04-30 04:09:41 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addCity(Long,City)), args=1,City(id=null, name=Minsk, population=2000000.0, areaSquareKm=50000.0, country=null)
2025-04-30 04:09:41 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CityController.addCity(Long,City)), exception: java.lang.StackOverflowError
2025-04-30 04:09:41 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addCity(Long,City))
2025-04-30 04:09:41 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 10
2025-04-30 04:09:42 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addCity(Long,City)), args=1,City(id=null, name=Minsk, population=2000000.0, areaSquareKm=50000.0, country=null)
2025-04-30 04:09:42 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CityController.addCity(Long,City)), exception: java.lang.StackOverflowError
2025-04-30 04:09:42 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addCity(Long,City))
2025-04-30 04:09:42 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 11
2025-04-30 04:11:43 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-30 04:11:43 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 04:11:43 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-30 04:11:43 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-30 04:11:45 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-30 04:11:45 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 9574 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-30 04:11:45 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-30 04:11:46 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-30 04:11:46 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 25 ms. Found 3 JPA repository interfaces.
2025-04-30 04:11:46 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-30 04:11:46 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-30 04:11:46 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-30 04:11:46 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-30 04:11:46 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-30 04:11:46 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 881 ms
2025-04-30 04:11:46 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-30 04:11:46 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-30 04:11:46 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-30 04:11:46 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-30 04:11:46 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-30 04:11:47 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@7cdc4070
2025-04-30 04:11:47 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-30 04:11:47 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-30 04:11:47 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 04:11:47 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-30 04:11:47 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-30 04:11:48 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-30 04:11:48 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-30 04:11:48 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.387 seconds (process running for 3.737)
2025-04-30 04:11:50 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-30 04:11:50 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-30 04:11:50 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-30 04:11:50 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City)), args=1,City(id=null, name=Minsk, population=2000000.0, areaSquareKm=50000.0, country=null)
2025-04-30 04:11:50 | WARN  | o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 23502
2025-04-30 04:11:50 | ERROR | o.h.e.jdbc.spi.SqlExceptionHelper - ERROR: null value in column "country_id" of relation "city" violates not-null constraint
  Подробности: Failing row contains (33, 50000, Minsk, 2000000, null).
2025-04-30 04:11:50 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City)), exception: could not execute statement [ERROR: null value in column "country_id" of relation "city" violates not-null constraint
  Подробности: Failing row contains (33, 50000, Minsk, 2000000, null).] [insert into city (area,country_id,name,population) values (?,?,?,?)]; SQL [insert into city (area,country_id,name,population) values (?,?,?,?)]; constraint [country_id" of relation "city]
2025-04-30 04:11:50 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City))
2025-04-30 04:11:50 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-04-30 04:15:20 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-30 04:15:20 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 04:15:20 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-30 04:15:20 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-30 04:15:22 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-30 04:15:22 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 9673 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-30 04:15:22 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-30 04:15:23 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-30 04:15:23 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 22 ms. Found 3 JPA repository interfaces.
2025-04-30 04:15:23 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-30 04:15:23 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-30 04:15:23 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-30 04:15:23 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-30 04:15:23 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-30 04:15:23 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 765 ms
2025-04-30 04:15:23 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-30 04:15:23 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-30 04:15:23 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-30 04:15:23 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-30 04:15:23 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-30 04:15:23 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@121cf6f4
2025-04-30 04:15:23 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-30 04:15:24 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-30 04:15:24 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 04:15:24 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-30 04:15:24 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-30 04:15:25 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-30 04:15:25 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-30 04:15:25 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.168 seconds (process running for 3.505)
2025-04-30 04:15:26 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-30 04:15:26 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-30 04:15:26 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-30 04:15:26 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City)), args=1,City(id=null, name=Minsk, population=2000000.0, areaSquareKm=50000.0, country=null)
2025-04-30 04:15:26 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 34) to country 'Germany' (ID: 1)
2025-04-30 04:15:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 1). 
2025-04-30 04:15:26 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City))
2025-04-30 04:15:26 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-04-30 04:15:29 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City)), args=1,City(id=null, name=Minsk, population=2000000.0, areaSquareKm=50000.0, country=null)
2025-04-30 04:15:29 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 35) to country 'Germany' (ID: 1)
2025-04-30 04:15:29 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 1). 
2025-04-30 04:15:29 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City))
2025-04-30 04:15:29 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-04-30 04:15:30 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City)), args=1,City(id=null, name=Minsk, population=2000000.0, areaSquareKm=50000.0, country=null)
2025-04-30 04:15:30 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 36) to country 'Germany' (ID: 1)
2025-04-30 04:15:30 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 1). 
2025-04-30 04:15:30 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City))
2025-04-30 04:15:30 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-04-30 04:15:52 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-30 04:15:52 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 04:15:52 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-30 04:15:52 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-30 04:15:53 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-30 04:15:53 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 9686 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-30 04:15:53 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-30 04:15:53 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-30 04:15:53 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 20 ms. Found 3 JPA repository interfaces.
2025-04-30 04:15:54 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-30 04:15:54 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-30 04:15:54 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-30 04:15:54 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-30 04:15:54 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-30 04:15:54 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 724 ms
2025-04-30 04:15:54 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-30 04:15:54 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-30 04:15:54 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-30 04:15:54 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-30 04:15:54 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-30 04:15:54 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@403f7aa2
2025-04-30 04:15:54 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-30 04:15:55 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-30 04:15:55 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 04:15:55 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-30 04:15:55 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-30 04:15:56 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-30 04:15:56 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-30 04:15:56 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.17 seconds (process running for 3.597)
2025-04-30 04:16:00 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-30 04:16:00 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-30 04:16:00 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 0 ms
2025-04-30 04:16:00 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-04-30 04:16:00 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 04:16:00 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 04:16:00 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 04:16:00 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-04-30 04:16:09 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-04-30 04:16:09 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 04:16:09 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 04:16:09 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 04:16:09 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-04-30 04:16:23 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City)), args=1,City(id=null, name=Minsk, population=2000000.0, areaSquareKm=50000.0, country=null)
2025-04-30 04:16:23 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 37) to country 'Germany' (ID: 1)
2025-04-30 04:16:23 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 1). 
2025-04-30 04:16:23 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City))
2025-04-30 04:16:23 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-04-30 04:17:02 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City)), args=1,City(id=null, name=Minsk, population=2000000.0, areaSquareKm=50000.0, country=null)
2025-04-30 04:17:02 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 38) to country 'Germany' (ID: 1)
2025-04-30 04:17:02 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 1). 
2025-04-30 04:17:02 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City))
2025-04-30 04:17:02 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-04-30 04:17:50 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-04-30 04:17:50 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 04:17:50 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 04:17:50 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 04:17:50 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-04-30 04:19:00 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-30 04:19:00 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 04:19:00 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-30 04:19:00 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-30 04:19:02 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-30 04:19:02 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 9774 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-30 04:19:02 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-30 04:19:02 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-30 04:19:02 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19 ms. Found 3 JPA repository interfaces.
2025-04-30 04:19:03 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-30 04:19:03 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-30 04:19:03 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-30 04:19:03 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-30 04:19:03 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-30 04:19:03 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 748 ms
2025-04-30 04:19:03 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-30 04:19:03 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-30 04:19:03 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-30 04:19:03 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-30 04:19:03 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-30 04:19:03 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@7cdc4070
2025-04-30 04:19:03 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-30 04:19:04 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-30 04:19:04 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 04:19:04 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-30 04:19:04 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-30 04:19:05 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-30 04:19:05 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-30 04:19:05 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.147 seconds (process running for 3.499)
2025-04-30 04:19:07 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-30 04:19:07 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-30 04:19:07 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-30 04:19:07 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City)), args=1,City(id=null, name=Minsk, population=2000000.0, areaSquareKm=50000.0, country=null)
2025-04-30 04:19:07 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 39) to country 'Germany' (ID: 1)
2025-04-30 04:19:07 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 1). 
2025-04-30 04:19:07 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City))
2025-04-30 04:19:07 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City))
2025-04-30 04:19:07 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-04-30 04:19:17 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City)), args=1,City(id=null, name=Minsk, population=2000000.0, areaSquareKm=50000.0, country=null)
2025-04-30 04:19:17 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 40) to country 'Germany' (ID: 1)
2025-04-30 04:19:17 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 1). 
2025-04-30 04:19:17 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City))
2025-04-30 04:19:17 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City))
2025-04-30 04:19:17 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-04-30 04:19:38 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-04-30 04:19:38 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 04:19:38 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 04:19:38 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 04:19:38 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-04-30 04:22:08 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.updateCity(Long,String,Double,Double)), args=40,Mogilev,225.0,112.0
2025-04-30 04:22:08 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 40). New name: 'Mogilev', population: 225.0, area: 112.0 km²
2025-04-30 04:22:08 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 1). 
2025-04-30 04:22:08 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.updateCity(Long,String,Double,Double))
2025-04-30 04:22:08 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.updateCity(Long,String,Double,Double))
2025-04-30 04:22:08 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-04-30 04:22:14 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-04-30 04:22:14 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 04:22:14 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 04:22:14 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 04:22:14 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-04-30 04:23:07 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=1
2025-04-30 04:23:07 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 04:23:07 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 04:23:07 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-04-30 04:23:22 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=1
2025-04-30 04:23:22 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 04:23:22 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 04:23:22 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 7
2025-04-30 04:23:50 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-04-30 04:23:50 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 04:23:50 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 04:23:50 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 04:23:50 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 8
2025-04-30 04:30:22 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-30 04:30:22 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 04:30:22 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-30 04:30:22 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-30 04:30:24 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-30 04:30:24 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 10058 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-30 04:30:24 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-30 04:30:25 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-30 04:30:25 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 22 ms. Found 3 JPA repository interfaces.
2025-04-30 04:30:25 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-30 04:30:25 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-30 04:30:25 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-30 04:30:25 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-30 04:30:25 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-30 04:30:25 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 742 ms
2025-04-30 04:30:25 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-30 04:30:25 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-30 04:30:25 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-30 04:30:25 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-30 04:30:25 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-30 04:30:25 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@27dfd12b
2025-04-30 04:30:25 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-30 04:30:26 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-30 04:30:26 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 04:30:26 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-30 04:30:26 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-30 04:30:27 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-30 04:30:27 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-30 04:30:27 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.106 seconds (process running for 3.503)
2025-04-30 04:30:29 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-30 04:30:29 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-30 04:30:29 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-30 04:30:29 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.updateCity(Long,String,Double,Double)), args=40,Mogilev,225.0,113.0
2025-04-30 04:30:29 | INFO  | org.example.service.CityService - ✏️ Updated city 'Mogilev' (ID: 40). New name: 'Mogilev', population: 225.0, area: 113.0 km²
2025-04-30 04:30:29 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 1). 
2025-04-30 04:30:29 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.updateCity(Long,String,Double,Double))
2025-04-30 04:30:29 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.updateCity(Long,String,Double,Double))
2025-04-30 04:30:29 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-04-30 04:30:36 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-04-30 04:30:36 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 04:30:36 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 04:30:36 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 04:30:36 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-04-30 04:31:43 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.deleteCityByIdFromCountryByCountryId(Long,Long)), args=1,40
2025-04-30 04:31:43 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Mogilev' (ID: 40) from country 'Germany' (ID: 1)
2025-04-30 04:31:43 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 1). Action: DELETE city 'Mogilev' (ID: 40)
2025-04-30 04:31:43 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.deleteCityByIdFromCountryByCountryId(Long,Long))
2025-04-30 04:31:43 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.deleteCityByIdFromCountryByCountryId(Long,Long))
2025-04-30 04:31:43 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-04-30 04:31:54 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-04-30 04:31:54 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 04:31:54 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 04:31:54 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 04:31:54 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-04-30 04:32:16 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-30 04:32:16 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 04:32:16 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-30 04:32:16 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-30 04:32:18 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-30 04:32:18 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 10102 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-30 04:32:18 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-30 04:32:18 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-30 04:32:18 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 20 ms. Found 3 JPA repository interfaces.
2025-04-30 04:32:18 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-30 04:32:18 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-30 04:32:18 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-30 04:32:18 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-30 04:32:19 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-30 04:32:19 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 727 ms
2025-04-30 04:32:19 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-30 04:32:19 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-30 04:32:19 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-30 04:32:19 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-30 04:32:19 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-30 04:32:19 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@1171ba7e
2025-04-30 04:32:19 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-30 04:32:19 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-30 04:32:19 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 04:32:19 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-30 04:32:20 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-30 04:32:21 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-30 04:32:21 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-30 04:32:21 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.095 seconds (process running for 3.512)
2025-04-30 04:32:21 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-30 04:32:21 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-30 04:32:21 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-30 04:32:21 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-04-30 04:32:21 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 04:32:21 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 04:32:21 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 04:32:21 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-04-30 04:38:18 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-30 04:38:18 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 04:38:18 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-30 04:38:18 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-30 04:38:20 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-30 04:38:20 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 10253 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-30 04:38:20 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-30 04:38:20 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-30 04:38:20 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19 ms. Found 3 JPA repository interfaces.
2025-04-30 04:38:20 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-30 04:38:20 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-30 04:38:20 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-30 04:38:20 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-30 04:38:20 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-30 04:38:20 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 716 ms
2025-04-30 04:38:20 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-30 04:38:20 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-30 04:38:20 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-30 04:38:21 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-30 04:38:21 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-30 04:38:21 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@2f5f5bc9
2025-04-30 04:38:21 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-30 04:38:21 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-30 04:38:21 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 04:38:21 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-30 04:38:21 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-30 04:38:23 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-30 04:38:23 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-30 04:38:23 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.096 seconds (process running for 3.443)
2025-04-30 04:38:23 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-30 04:38:23 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-30 04:38:23 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-30 04:38:23 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.deleteCityByIdFromCountryByCountryId(Long,Long)), args=1,40
2025-04-30 04:38:23 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CityController.deleteCityByIdFromCountryByCountryId(Long,Long)), exception: City not found
2025-04-30 04:38:23 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.deleteCityByIdFromCountryByCountryId(Long,Long))
2025-04-30 04:38:23 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-04-30 04:38:40 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.deleteCityByIdFromCountryByCountryId(Long,Long)), args=1,39
2025-04-30 04:38:40 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 39)
2025-04-30 04:38:40 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 39) deleted and cache invalidated
2025-04-30 04:38:40 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.deleteCityByIdFromCountryByCountryId(Long,Long))
2025-04-30 04:38:40 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.deleteCityByIdFromCountryByCountryId(Long,Long))
2025-04-30 04:38:40 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-04-30 04:38:51 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-04-30 04:38:51 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 04:38:51 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 04:38:51 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 04:38:51 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-04-30 04:39:16 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City)), args=1,City(id=null, name=Minsk, population=2000000.0, areaSquareKm=50000.0, country=null)
2025-04-30 04:39:16 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 41) to country 'Germany' (ID: 1)
2025-04-30 04:39:16 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 1). Action: ADD
2025-04-30 04:39:16 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City))
2025-04-30 04:39:16 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City))
2025-04-30 04:39:16 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-04-30 04:39:27 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-04-30 04:39:27 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 04:39:27 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 04:39:27 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 04:39:27 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-04-30 04:39:48 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.updateCity(Long,String,Double,Double)), args=41,Mogilev,225.0,113.0
2025-04-30 04:39:48 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 41). New name: 'Mogilev', population: 225.0, area: 113.0 km²
2025-04-30 04:39:48 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 1). Action: UPDATE
2025-04-30 04:39:48 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.updateCity(Long,String,Double,Double))
2025-04-30 04:39:48 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.updateCity(Long,String,Double,Double))
2025-04-30 04:39:48 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-04-30 04:39:56 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-04-30 04:39:56 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 04:39:56 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 04:39:56 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 04:39:56 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 7
2025-04-30 04:40:33 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=1
2025-04-30 04:40:33 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 04:40:33 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 04:40:33 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 8
2025-04-30 04:42:11 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List)), args=1,[City(id=null, name=Minsk, population=2000000.0, areaSquareKm=50000.0, country=null)]
2025-04-30 04:42:11 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 42) to country 'Germany' (ID: 1)
2025-04-30 04:42:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 1). Action: ADD
2025-04-30 04:42:11 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-04-30 04:42:11 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-04-30 04:42:11 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 9
2025-04-30 04:42:21 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-04-30 04:42:21 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 04:42:21 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 04:42:21 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 04:42:21 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 10
2025-04-30 04:42:45 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.deleteCitiesByCountryId(Long)), args=1
2025-04-30 04:42:45 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'Germany'
2025-04-30 04:42:45 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'Germany'. Cache invalidated
2025-04-30 04:42:45 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.deleteCitiesByCountryId(Long))
2025-04-30 04:42:45 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.deleteCitiesByCountryId(Long))
2025-04-30 04:42:45 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 11
2025-04-30 04:42:55 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-04-30 04:42:55 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 04:42:55 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 04:42:55 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 04:42:55 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 12
2025-04-30 04:43:08 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.deleteCitiesByCountryId(Long)), args=1
2025-04-30 04:43:08 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'Germany'
2025-04-30 04:43:08 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'Germany'. Cache invalidated
2025-04-30 04:43:08 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.deleteCitiesByCountryId(Long))
2025-04-30 04:43:08 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.deleteCitiesByCountryId(Long))
2025-04-30 04:43:08 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 13
2025-04-30 04:43:14 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.deleteCitiesByCountryId(Long)), args=1
2025-04-30 04:43:14 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'Germany'
2025-04-30 04:43:14 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'Germany'. Cache invalidated
2025-04-30 04:43:14 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.deleteCitiesByCountryId(Long))
2025-04-30 04:43:14 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.deleteCitiesByCountryId(Long))
2025-04-30 04:43:14 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 14
2025-04-30 04:43:17 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-04-30 04:43:17 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 04:43:17 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 04:43:17 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 04:43:17 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 15
2025-04-30 04:44:07 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-30 04:44:07 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 04:44:07 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-30 04:44:07 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-30 04:44:08 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-30 04:44:08 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 10395 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-30 04:44:08 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-30 04:44:09 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-30 04:44:09 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 21 ms. Found 3 JPA repository interfaces.
2025-04-30 04:44:09 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-30 04:44:09 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-30 04:44:09 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-30 04:44:09 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-30 04:44:09 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-30 04:44:09 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 801 ms
2025-04-30 04:44:09 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-30 04:44:09 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-30 04:44:09 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-30 04:44:09 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-30 04:44:09 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-30 04:44:09 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@7079f8f0
2025-04-30 04:44:09 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-30 04:44:10 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-30 04:44:10 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 04:44:10 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-30 04:44:10 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-30 04:44:11 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-30 04:44:11 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-30 04:44:11 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.176 seconds (process running for 3.52)
2025-04-30 04:44:19 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-30 04:44:19 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-30 04:44:19 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-30 04:44:19 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-04-30 04:44:19 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 04:44:19 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 04:44:19 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 04:44:19 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-04-30 05:21:21 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=31m41s207ms).
2025-04-30 06:36:48 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h15m27s101ms).
2025-04-30 08:07:11 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h30m23s62ms).
2025-04-30 08:24:15 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=17m4s151ms).
2025-04-30 08:24:44 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Retrograde clock change detected (housekeeper delta=28s592ms), soft-evicting connections from pool.
2025-04-30 08:26:31 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-30 08:26:31 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 08:26:31 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-30 08:26:31 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-30 09:49:29 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-30 09:49:29 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 11921 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-30 09:49:29 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-30 09:49:30 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-30 09:49:30 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 20 ms. Found 3 JPA repository interfaces.
2025-04-30 09:49:30 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-30 09:49:30 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-30 09:49:30 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-30 09:49:30 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-30 09:49:30 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-30 09:49:30 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 785 ms
2025-04-30 09:49:30 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-30 09:49:30 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-30 09:49:30 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-30 09:49:31 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-30 09:49:31 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-30 09:49:31 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@30704f85
2025-04-30 09:49:31 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-30 09:49:31 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-30 09:49:31 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 09:49:31 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-30 09:49:31 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-30 09:49:33 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-30 09:49:33 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-30 09:49:33 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.205 seconds (process running for 3.615)
2025-04-30 09:50:40 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-30 09:50:40 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-30 09:50:40 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-30 09:50:40 | INFO  | o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 243 ms
2025-04-30 09:51:10 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=1
2025-04-30 09:51:10 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 09:51:10 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 09:51:10 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-04-30 09:55:56 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 09:55:56 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 09:55:56 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 09:55:56 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 09:55:56 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 09:55:56 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 09:55:56 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 09:55:56 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 09:55:56 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 09:55:56 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 09:55:56 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 09:55:56 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 09:55:56 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 09:55:56 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 09:55:56 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'null'
2025-04-30 09:55:56 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 09:55:56 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 09:55:56 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 09:55:56 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 09:55:56 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 09:55:56 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 09:55:56 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 09:55:56 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 09:55:56 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 09:55:56 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 09:55:56 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: null) to country 'null' (ID: 1)
2025-04-30 09:55:56 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 09:55:56 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 10:11:08 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-30 10:11:08 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 10:11:08 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-30 10:11:08 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-30 10:11:10 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-30 10:11:10 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 12534 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-30 10:11:10 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-30 10:11:10 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-30 10:11:10 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19 ms. Found 3 JPA repository interfaces.
2025-04-30 10:11:11 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-30 10:11:11 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-30 10:11:11 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-30 10:11:11 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-30 10:11:11 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-30 10:11:11 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 720 ms
2025-04-30 10:11:11 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-30 10:11:11 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-30 10:11:11 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-30 10:11:11 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-30 10:11:11 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-30 10:11:11 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@1218e12
2025-04-30 10:11:11 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-30 10:11:11 | ERROR | o.s.o.j.LocalContainerEntityManagerFactoryBean - Failed to initialize JPA EntityManagerFactory: Association 'org.example.model.Country.cities' is 'mappedBy' another entity and may not specify the '@JoinColumn'
2025-04-30 10:11:11 | WARN  | o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: Association 'org.example.model.Country.cities' is 'mappedBy' another entity and may not specify the '@JoinColumn'
2025-04-30 10:11:11 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-30 10:11:11 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-30 10:11:11 | INFO  | o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-04-30 10:11:11 | INFO  | o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-04-30 10:11:11 | ERROR | o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: Association 'org.example.model.Country.cities' is 'mappedBy' another entity and may not specify the '@JoinColumn'
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
Caused by: org.hibernate.AnnotationException: Association 'org.example.model.Country.cities' is 'mappedBy' another entity and may not specify the '@JoinColumn'
	at org.hibernate.boot.model.internal.CollectionBinder.detectMappedByProblem(CollectionBinder.java:1274)
	at org.hibernate.boot.model.internal.CollectionBinder.bind(CollectionBinder.java:1189)
	at org.hibernate.boot.model.internal.CollectionBinder.bindCollection(CollectionBinder.java:364)
	at org.hibernate.boot.model.internal.PropertyBinder.bindProperty(PropertyBinder.java:874)
	at org.hibernate.boot.model.internal.PropertyBinder.buildProperty(PropertyBinder.java:788)
	at org.hibernate.boot.model.internal.PropertyBinder.processElementAnnotations(PropertyBinder.java:709)
	at org.hibernate.boot.model.internal.EntityBinder.processIdPropertiesIfNotAlready(EntityBinder.java:1026)
	at org.hibernate.boot.model.internal.EntityBinder.handleIdentifier(EntityBinder.java:354)
	at org.hibernate.boot.model.internal.EntityBinder.bindEntityClass(EntityBinder.java:234)
	at org.hibernate.boot.model.internal.AnnotationBinder.bindClass(AnnotationBinder.java:423)
	at org.hibernate.boot.model.source.internal.annotations.AnnotationMetadataSourceProcessorImpl.processEntityHierarchies(AnnotationMetadataSourceProcessorImpl.java:256)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess$1.processEntityHierarchies(MetadataBuildingProcess.java:279)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:322)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1432)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1503)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 16 common frames omitted
2025-04-30 10:13:03 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-30 10:13:03 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 12588 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-30 10:13:03 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-30 10:13:03 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-30 10:13:03 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 21 ms. Found 3 JPA repository interfaces.
2025-04-30 10:13:03 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-30 10:13:03 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-30 10:13:03 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-30 10:13:03 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-30 10:13:04 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-30 10:13:04 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 728 ms
2025-04-30 10:13:04 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-30 10:13:04 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-30 10:13:04 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-30 10:13:04 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-30 10:13:04 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-30 10:13:04 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@403f7aa2
2025-04-30 10:13:04 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-30 10:13:04 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-30 10:13:04 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 10:13:04 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-30 10:13:05 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-30 10:13:06 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-30 10:13:06 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-30 10:13:06 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.073 seconds (process running for 3.419)
2025-04-30 10:13:22 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-30 10:13:22 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-30 10:13:22 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-30 10:13:22 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogsController.downloadOrViewLogs(String,String)), args=2025-04-30,*/*
2025-04-30 10:13:22 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogsController.downloadOrViewLogs(String,String))
2025-04-30 10:13:22 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogsController.downloadOrViewLogs(String,String))
2025-04-30 10:13:22 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-04-30 10:13:32 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogsController.downloadOrViewLogs(String,String)), args=2025-04-29,*/*
2025-04-30 10:13:32 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.LogsController.downloadOrViewLogs(String,String)), exception: No log entries found for date: 2025-04-29
2025-04-30 10:13:32 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogsController.downloadOrViewLogs(String,String))
2025-04-30 10:13:32 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-04-30 10:15:23 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogsController.downloadOrViewLogs(String,String)), args=2025-04-28,*/*
2025-04-30 10:15:23 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.LogsController.downloadOrViewLogs(String,String)), exception: No log entries found for date: 2025-04-28
2025-04-30 10:15:23 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogsController.downloadOrViewLogs(String,String))
2025-04-30 10:15:23 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-04-30 10:16:07 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=1
2025-04-30 10:16:08 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 10:16:08 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 10:16:08 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-04-30 10:16:22 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-04-30 10:16:23 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 10:16:23 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 10:16:23 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 10:16:23 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-04-30 10:21:03 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-30 10:21:03 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 10:21:03 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-30 10:21:03 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-30 10:21:05 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-30 10:21:05 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 12780 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-30 10:21:05 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-30 10:21:05 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-30 10:21:05 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 22 ms. Found 3 JPA repository interfaces.
2025-04-30 10:21:05 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-30 10:21:05 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-30 10:21:05 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-30 10:21:05 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-30 10:21:05 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-30 10:21:05 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 769 ms
2025-04-30 10:21:06 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-30 10:21:06 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-30 10:21:06 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-30 10:21:06 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-30 10:21:06 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-30 10:21:06 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@403f7aa2
2025-04-30 10:21:06 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-30 10:21:06 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-30 10:21:06 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 10:21:06 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-30 10:21:07 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-30 10:21:08 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-30 10:21:08 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-30 10:21:08 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.19 seconds (process running for 3.562)
2025-04-30 10:21:10 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-30 10:21:10 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-30 10:21:10 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-30 10:21:10 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=1
2025-04-30 10:21:10 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 10:21:10 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 10:21:10 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-04-30 10:21:13 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=1
2025-04-30 10:21:13 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 10:21:13 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 10:21:13 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-04-30 10:21:17 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-04-30 10:21:17 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 10:21:17 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 10:21:17 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 10:21:17 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-04-30 10:39:40 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=6m34s244ms).
2025-04-30 10:51:19 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=11m38s592ms).
2025-04-30 11:01:07 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-30 11:01:07 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 11:01:07 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-30 11:01:07 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-30 11:01:09 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-30 11:01:09 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 13516 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-30 11:01:09 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-30 11:01:10 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-30 11:01:10 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19 ms. Found 3 JPA repository interfaces.
2025-04-30 11:01:10 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-30 11:01:10 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-30 11:01:10 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-30 11:01:10 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-30 11:01:10 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-30 11:01:10 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 723 ms
2025-04-30 11:01:10 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-30 11:01:10 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-30 11:01:10 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-30 11:01:10 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-30 11:01:10 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-30 11:01:10 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@563843f1
2025-04-30 11:01:10 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-30 11:01:11 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-30 11:01:11 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 11:01:11 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-30 11:01:11 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-30 11:01:12 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-30 11:01:12 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-30 11:01:12 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.188 seconds (process running for 3.545)
2025-04-30 11:01:12 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-30 11:01:12 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-30 11:01:12 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-30 11:01:13 | INFO  | o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 192 ms
2025-04-30 11:01:35 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=1
2025-04-30 11:01:35 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 11:01:35 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 11:01:35 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-04-30 11:02:48 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-04-30 11:02:48 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 11:02:48 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 11:02:48 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 11:02:48 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-04-30 11:04:41 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.addNewCountries(List)), args=[Country(id=null, name=Belarus, capital=Minsk, population=1.431E8, areaSquareKm=1.71E7, gdp=1.779E12, cities=[], nations=null), Country(id=null, name=Durka, capital=Novoelnya, population=1.0, areaSquareKm=1.71E7, gdp=1.779E12, cities=[], nations=null)]
2025-04-30 11:04:41 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 2)
2025-04-30 11:04:41 | INFO  | org.example.service.CountryService - ✨ Created country: Durka (ID: 3)
2025-04-30 11:04:41 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 11:04:41 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.addNewCountries(List))
2025-04-30 11:04:41 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.addNewCountries(List))
2025-04-30 11:04:41 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-04-30 11:05:21 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-04-30 11:05:21 | INFO  | org.example.service.CountryService - 🔄 Fetched 3 countries from DB and cached
2025-04-30 11:05:21 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-04-30 11:05:21 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-04-30 11:05:21 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-04-30 11:06:06 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.addNewCountries(List)), args=[]
2025-04-30 11:06:06 | INFO  | org.example.service.CountryService - ✨ Added 0 countries
2025-04-30 11:06:06 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.addNewCountries(List))
2025-04-30 11:06:06 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.addNewCountries(List))
2025-04-30 11:06:06 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-04-30 11:07:39 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-30 11:07:39 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 11:07:39 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-30 11:07:39 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-30 11:07:41 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-30 11:07:41 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 13724 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-30 11:07:41 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-30 11:07:42 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-30 11:07:42 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19 ms. Found 3 JPA repository interfaces.
2025-04-30 11:07:42 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-30 11:07:42 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-30 11:07:42 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-30 11:07:42 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-30 11:07:42 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-30 11:07:42 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 689 ms
2025-04-30 11:07:42 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-30 11:07:42 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-30 11:07:42 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-30 11:07:42 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-30 11:07:42 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-30 11:07:42 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@4348fa35
2025-04-30 11:07:42 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-30 11:07:43 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-30 11:07:43 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 11:07:43 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-30 11:07:43 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-30 11:07:44 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-30 11:07:44 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-30 11:07:44 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 2.972 seconds (process running for 3.301)
2025-04-30 11:08:02 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-30 11:08:02 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-30 11:08:02 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-30 11:08:55 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-30 11:08:55 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 11:08:55 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-30 11:08:55 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-30 11:08:57 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-30 11:08:57 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 13775 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-30 11:08:57 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-30 11:08:57 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-30 11:08:57 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 21 ms. Found 3 JPA repository interfaces.
2025-04-30 11:08:58 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-30 11:08:58 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-30 11:08:58 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-30 11:08:58 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-30 11:08:58 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-30 11:08:58 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 732 ms
2025-04-30 11:08:58 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-30 11:08:58 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-30 11:08:58 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-30 11:08:58 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-30 11:08:58 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-30 11:08:58 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@545604a9
2025-04-30 11:08:58 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-30 11:08:59 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-30 11:08:59 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 11:08:59 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-30 11:08:59 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-30 11:09:00 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-30 11:09:00 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-30 11:09:00 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.102 seconds (process running for 3.442)
2025-04-30 11:09:01 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-30 11:09:01 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-30 11:09:01 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-30 11:09:01 | WARN  | o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Failure in @ExceptionHandler org.example.exception.ExceptionManager#objectNotFoundException(ObjectNotFoundException, WebRequest)
java.lang.IllegalStateException: Could not resolve parameter [0] in public org.springframework.http.ResponseEntity<org.example.exception.ErrorMessage> org.example.exception.ExceptionManager.objectNotFoundException(org.example.exception.ObjectNotFoundException,org.springframework.web.context.request.WebRequest): No suitable resolver
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:222)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:178)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:432)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:74)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:175)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:80)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1357)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1160)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-04-30 11:09:01 | WARN  | o.s.w.s.m.s.DefaultHandlerExceptionResolver - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Unrecognized token 'asd': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')]
2025-04-30 11:11:38 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-04-30 11:11:38 | INFO  | org.example.service.CountryService - 🔄 Fetched 3 countries from DB and cached
2025-04-30 11:11:38 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-04-30 11:11:38 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-04-30 11:11:38 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-04-30 11:12:08 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 11:12:08 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 11:12:08 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 11:12:08 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 11:12:08 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 11:12:08 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 11:12:08 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 11:12:08 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 11:12:08 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 11:12:08 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 11:12:08 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 11:12:08 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 11:12:08 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 11:12:08 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 11:12:08 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'null'
2025-04-30 11:12:08 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 11:12:08 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 11:12:08 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 11:12:08 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 11:12:08 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 11:12:08 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 11:12:08 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 11:12:08 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 11:12:08 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 11:12:08 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 11:12:08 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: null) to country 'null' (ID: 1)
2025-04-30 11:12:08 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 11:12:08 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 11:31:50 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=1
2025-04-30 11:31:50 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 11:31:50 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 11:31:50 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-04-30 11:38:00 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-30 11:38:00 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 11:38:00 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-30 11:38:00 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-30 12:28:20 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-30 12:28:20 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 15093 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-30 12:28:20 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-30 12:28:20 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-30 12:28:20 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 22 ms. Found 3 JPA repository interfaces.
2025-04-30 12:28:20 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-30 12:28:20 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-30 12:28:20 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-30 12:28:20 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-30 12:28:20 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-30 12:28:20 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 752 ms
2025-04-30 12:28:20 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-30 12:28:20 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-30 12:28:20 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-30 12:28:21 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-30 12:28:21 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-30 12:28:21 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@38cb1606
2025-04-30 12:28:21 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-30 12:28:21 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-30 12:28:21 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 12:28:21 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-30 12:28:22 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-30 12:28:23 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-30 12:28:23 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-30 12:28:23 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.273 seconds (process running for 3.622)
2025-04-30 12:28:24 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-30 12:28:24 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-30 12:28:24 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-30 12:28:24 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=1
2025-04-30 12:28:24 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 12:28:24 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 12:28:24 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-04-30 12:28:26 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=1
2025-04-30 12:28:26 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 12:28:26 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 12:28:26 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-04-30 12:28:27 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=1
2025-04-30 12:28:27 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 12:28:27 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 12:28:27 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-04-30 12:28:28 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=1
2025-04-30 12:28:28 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 12:28:28 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 12:28:28 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-04-30 12:28:28 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=1
2025-04-30 12:28:28 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 12:28:28 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 12:28:28 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-04-30 12:28:42 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-04-30 12:28:42 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 12:28:42 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 12:28:42 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 12:28:42 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-04-30 12:28:55 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=6
2025-04-30 12:28:55 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), exception: Country not found
2025-04-30 12:28:55 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 12:28:55 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 7
2025-04-30 12:29:45 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=1
2025-04-30 12:29:45 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 12:29:45 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 12:29:45 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 8
2025-04-30 12:30:29 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-30 12:30:29 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 12:30:29 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-30 12:30:29 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-30 12:30:31 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-30 12:30:31 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 15162 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-30 12:30:31 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-30 12:30:32 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-30 12:30:32 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 22 ms. Found 3 JPA repository interfaces.
2025-04-30 12:30:32 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-30 12:30:32 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-30 12:30:32 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-30 12:30:32 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-30 12:30:32 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-30 12:30:32 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 797 ms
2025-04-30 12:30:32 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-30 12:30:32 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-30 12:30:32 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-30 12:30:33 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-30 12:30:33 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-30 12:30:33 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@1c0e4262
2025-04-30 12:30:33 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-30 12:30:33 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-30 12:30:33 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 12:30:33 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-30 12:30:33 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-30 12:30:35 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-30 12:30:35 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-30 12:30:35 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.209 seconds (process running for 3.554)
2025-04-30 12:30:35 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-30 12:30:35 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-30 12:30:35 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 0 ms
2025-04-30 12:30:35 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=1
2025-04-30 12:30:35 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 12:30:35 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 12:30:35 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-04-30 13:01:25 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-30 13:01:25 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 13:01:25 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-30 13:01:25 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-30 13:01:58 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-30 13:01:58 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 15952 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-30 13:01:58 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-30 13:01:58 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-30 13:01:58 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 20 ms. Found 3 JPA repository interfaces.
2025-04-30 13:01:59 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-30 13:01:59 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-30 13:01:59 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-30 13:01:59 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-30 13:01:59 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-30 13:01:59 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 724 ms
2025-04-30 13:01:59 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-30 13:01:59 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-30 13:01:59 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-30 13:01:59 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-30 13:01:59 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-30 13:01:59 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@30704f85
2025-04-30 13:01:59 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-30 13:02:00 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-30 13:02:00 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 13:02:00 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-30 13:02:00 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-30 13:02:01 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-30 13:02:01 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-30 13:02:01 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.186 seconds (process running for 3.547)
2025-04-30 13:02:03 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-30 13:02:03 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-30 13:02:03 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-30 13:02:03 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=1
2025-04-30 13:02:03 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 13:02:03 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 13:02:03 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-04-30 13:02:08 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-04-30 13:02:08 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 13:02:08 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CityController.getCities()), exception: Cannot invoke "org.example.model.Country.getId()" because "country" is null
2025-04-30 13:02:08 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 13:02:08 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-04-30 13:02:31 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-30 13:02:31 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 13:02:31 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-30 13:02:31 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-30 13:02:33 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-30 13:02:33 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 15987 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-30 13:02:33 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-30 13:02:34 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-30 13:02:34 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 18 ms. Found 3 JPA repository interfaces.
2025-04-30 13:02:34 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-30 13:02:34 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-30 13:02:34 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-30 13:02:34 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-30 13:02:34 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-30 13:02:34 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 701 ms
2025-04-30 13:02:34 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-30 13:02:34 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-30 13:02:34 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-30 13:02:34 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-30 13:02:34 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-30 13:02:34 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@545604a9
2025-04-30 13:02:34 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-30 13:02:35 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-30 13:02:35 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 13:02:35 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-30 13:02:35 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-30 13:02:36 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-30 13:02:36 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-30 13:02:36 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.011 seconds (process running for 3.34)
2025-04-30 13:02:40 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-30 13:02:40 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-30 13:02:40 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-30 13:02:40 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-04-30 13:02:40 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 13:02:40 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 13:02:40 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 13:02:40 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-04-30 13:03:22 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-30 13:03:22 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 13:03:22 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-30 13:03:22 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-30 13:03:24 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-30 13:03:24 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 16021 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-30 13:03:24 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-30 13:03:24 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-30 13:03:24 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19 ms. Found 3 JPA repository interfaces.
2025-04-30 13:03:24 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-30 13:03:24 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-30 13:03:24 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-30 13:03:24 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-30 13:03:24 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-30 13:03:24 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 715 ms
2025-04-30 13:03:25 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-30 13:03:25 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-30 13:03:25 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-30 13:03:25 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-30 13:03:25 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-30 13:03:25 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@29c25bbc
2025-04-30 13:03:25 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-30 13:03:25 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-30 13:03:25 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 13:03:25 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-30 13:03:26 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-30 13:03:27 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-30 13:03:27 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-30 13:03:27 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.107 seconds (process running for 3.472)
2025-04-30 13:03:30 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-30 13:03:30 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-30 13:03:30 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-30 13:03:31 | INFO  | o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 192 ms
2025-04-30 13:04:28 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-30 13:04:28 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 13:04:28 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-30 13:04:28 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-30 13:04:30 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-30 13:04:30 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 16064 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-30 13:04:30 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-30 13:04:31 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-30 13:04:31 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19 ms. Found 3 JPA repository interfaces.
2025-04-30 13:04:31 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-30 13:04:31 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-30 13:04:31 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-30 13:04:31 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-30 13:04:31 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-30 13:04:31 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 752 ms
2025-04-30 13:04:31 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-30 13:04:31 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-30 13:04:31 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-30 13:04:31 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-30 13:04:31 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-30 13:04:31 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@403f7aa2
2025-04-30 13:04:31 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-30 13:04:32 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-30 13:04:32 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 13:04:32 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-30 13:04:32 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-30 13:04:33 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-30 13:04:33 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-30 13:04:33 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.27 seconds (process running for 3.654)
2025-04-30 13:04:33 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-30 13:04:33 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-30 13:04:33 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-30 13:04:34 | INFO  | o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 200 ms
2025-04-30 13:05:48 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.addNewCountries(List)), args=[Country(id=null, name=Russia, capital=Moscow, population=1.431E8, areaSquareKm=1.71E7, gdp=1.779E12, cities=[], nations=null), Country(id=null, name=Rossiya, capital=Moskva, population=1.431E8, areaSquareKm=1.71E7, gdp=1.779E12, cities=[], nations=null)]
2025-04-30 13:05:48 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 4)
2025-04-30 13:05:48 | INFO  | org.example.service.CountryService - ✨ Created country: Rossiya (ID: 5)
2025-04-30 13:05:48 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 13:05:48 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.addNewCountries(List))
2025-04-30 13:05:48 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.addNewCountries(List))
2025-04-30 13:05:48 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-04-30 13:06:16 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-04-30 13:06:16 | INFO  | org.example.service.CountryService - 🔄 Fetched 5 countries from DB and cached
2025-04-30 13:06:17 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-04-30 13:06:17 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-04-30 13:06:17 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-04-30 13:06:54 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String)), args=Moscow
2025-04-30 13:06:54 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 13:06:54 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 13:06:54 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-04-30 13:07:00 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String)), args=M
2025-04-30 13:07:00 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 13:07:00 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 13:07:00 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-04-30 13:07:40 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String)), args=Many
2025-04-30 13:07:40 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 13:07:40 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 13:07:40 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-04-30 13:07:47 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String)), args=M
2025-04-30 13:07:47 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 13:07:47 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 13:07:47 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-04-30 13:08:51 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String)), args=Ma
2025-04-30 13:08:51 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 13:08:51 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 13:08:51 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 7
2025-04-30 13:08:58 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String)), args=m
2025-04-30 13:08:58 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 13:08:58 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 13:08:58 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 8
2025-04-30 13:09:05 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String)), args=y
2025-04-30 13:09:05 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 13:09:05 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 13:09:05 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 9
2025-04-30 13:09:09 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String)), args=n
2025-04-30 13:09:09 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 13:09:09 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 13:09:09 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 10
2025-04-30 13:09:15 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String)), args=e
2025-04-30 13:09:15 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 13:09:15 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 13:09:15 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 11
2025-04-30 13:09:25 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String)), args=Berlinn
2025-04-30 13:09:25 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 13:09:25 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 13:09:25 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 12
2025-04-30 13:09:28 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String)), args=Berlin
2025-04-30 13:09:28 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 13:09:28 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 13:09:28 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 13
2025-04-30 13:09:31 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String)), args=Berlim
2025-04-30 13:09:31 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 13:09:31 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 13:09:31 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 14
2025-04-30 13:09:34 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String)), args=Berlinm
2025-04-30 13:09:34 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 13:09:34 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 13:09:34 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 15
2025-04-30 13:09:40 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String)), args=MBerlin
2025-04-30 13:09:40 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 13:09:40 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 13:09:40 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 16
2025-04-30 13:09:45 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String)), args=M
2025-04-30 13:09:45 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 13:09:45 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 13:09:45 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 17
2025-04-30 13:14:00 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-30 13:14:00 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 13:14:00 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-30 13:14:00 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-30 13:14:03 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-30 13:14:03 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 16392 (/Users/snrteftelya/Desktop/CountryExploration/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountryExploration/CountrySearch)
2025-04-30 13:14:03 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-30 13:14:03 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-30 13:14:03 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19 ms. Found 3 JPA repository interfaces.
2025-04-30 13:14:03 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-30 13:14:03 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-30 13:14:03 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-30 13:14:03 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-30 13:14:03 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-30 13:14:03 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 718 ms
2025-04-30 13:14:04 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-30 13:14:04 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-30 13:14:04 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-30 13:14:04 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-30 13:14:04 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-30 13:14:04 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@716ae973
2025-04-30 13:14:04 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-30 13:14:04 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-30 13:14:04 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 13:14:04 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-30 13:14:04 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-30 13:14:06 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-30 13:14:06 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-30 13:14:06 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.123 seconds (process running for 3.477)
2025-04-30 13:14:12 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-30 13:14:12 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-30 13:14:12 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-30 13:14:13 | INFO  | o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 190 ms
2025-04-30 13:14:29 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=1
2025-04-30 13:14:29 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.id,
        c1_0.area,
        c1_0.country_id,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        city c1_0 
    [34mleft[0m [34mjoin[0m
        country c2_0 
            [34mon[0m c2_0.id=c1_0.country_id 
    [34mwhere[0m
        c2_0.id=?
2025-04-30 13:14:29 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.id,
        c1_0.area,
        c1_0.capital,
        c1_0.gdp,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        country c1_0 
    [34mwhere[0m
        c1_0.id=?
2025-04-30 13:14:29 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.country_id,
        c1_0.id,
        c1_0.area,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        city c1_0 
    [34mwhere[0m
        c1_0.country_id=?
2025-04-30 13:14:29 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.country_id,
        c1_0.id,
        c1_0.area,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        city c1_0 
    [34mwhere[0m
        c1_0.country_id=?
2025-04-30 13:14:29 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        n1_0.country_id,
        n1_1.id,
        n1_1.[34mlanguage[0m,
        n1_1.name,
        n1_1.religion 
    [34mfrom[0m
        country_nations n1_0 
    [34mjoin[0m
        nation n1_1 
            [34mon[0m n1_1.id=n1_0.nation_id 
    [34mwhere[0m
        n1_0.country_id=?
2025-04-30 13:14:29 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 13:14:29 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 13:14:29 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-04-30 13:14:35 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=2
2025-04-30 13:14:35 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.id,
        c1_0.area,
        c1_0.country_id,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        city c1_0 
    [34mleft[0m [34mjoin[0m
        country c2_0 
            [34mon[0m c2_0.id=c1_0.country_id 
    [34mwhere[0m
        c2_0.id=?
2025-04-30 13:14:35 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 13:14:35 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 13:14:35 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-04-30 13:14:56 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-04-30 13:14:56 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.id,
        c1_0.area,
        c1_0.country_id,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        city c1_0
2025-04-30 13:14:56 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.id,
        c1_0.area,
        c1_0.capital,
        c1_0.gdp,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        country c1_0 
    [34mwhere[0m
        c1_0.id=?
2025-04-30 13:14:56 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.country_id,
        c1_0.id,
        c1_0.area,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        city c1_0 
    [34mwhere[0m
        c1_0.country_id=?
2025-04-30 13:14:56 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.country_id,
        c1_0.id,
        c1_0.area,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        city c1_0 
    [34mwhere[0m
        c1_0.country_id=?
2025-04-30 13:14:56 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        n1_0.country_id,
        n1_1.id,
        n1_1.[34mlanguage[0m,
        n1_1.name,
        n1_1.religion 
    [34mfrom[0m
        country_nations n1_0 
    [34mjoin[0m
        nation n1_1 
            [34mon[0m n1_1.id=n1_0.nation_id 
    [34mwhere[0m
        n1_0.country_id=?
2025-04-30 13:14:56 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 13:14:56 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 13:14:56 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 13:14:56 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-04-30 13:15:18 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-04-30 13:15:18 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        [34mdistinct[0m c1_0.id,
        c1_0.area,
        c1_0.capital,
        c2_0.country_id,
        c2_0.id,
        c2_0.area,
        c2_0.name,
        c2_0.population,
        c1_0.gdp,
        c1_0.name,
        n1_0.country_id,
        n1_1.id,
        n1_1.[34mlanguage[0m,
        n1_1.name,
        n1_1.religion,
        c1_0.population 
    [34mfrom[0m
        country c1_0 
    [34mleft[0m [34mjoin[0m
        country_nations n1_0 
            [34mon[0m c1_0.id=n1_0.country_id 
    [34mleft[0m [34mjoin[0m
        nation n1_1 
            [34mon[0m n1_1.id=n1_0.nation_id 
    [34mleft[0m [34mjoin[0m
        city c2_0 
            [34mon[0m c1_0.id=c2_0.country_id
2025-04-30 13:15:18 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.country_id,
        c1_0.id,
        c1_0.area,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        city c1_0 
    [34mwhere[0m
        c1_0.country_id=?
2025-04-30 13:15:18 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.nation_id,
        c1_1.id,
        c1_1.area,
        c1_1.capital,
        c1_1.gdp,
        c1_1.name,
        c1_1.population 
    [34mfrom[0m
        country_nations c1_0 
    [34mjoin[0m
        country c1_1 
            [34mon[0m c1_1.id=c1_0.country_id 
    [34mwhere[0m
        c1_0.nation_id=?
2025-04-30 13:15:18 | INFO  | org.example.service.CountryService - 🔄 Fetched 5 countries from DB and cached
2025-04-30 13:15:18 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-04-30 13:15:18 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-04-30 13:15:18 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-04-30 13:15:40 | WARN  | o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Failure in @ExceptionHandler org.example.exception.ExceptionManager#objectNotFoundException(ObjectNotFoundException, WebRequest)
java.lang.IllegalStateException: Could not resolve parameter [0] in public org.springframework.http.ResponseEntity<org.example.exception.ErrorMessage> org.example.exception.ExceptionManager.objectNotFoundException(org.example.exception.ObjectNotFoundException,org.springframework.web.context.request.WebRequest): No suitable resolver
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:222)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:178)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:432)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:74)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:175)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:80)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1357)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1160)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-04-30 13:15:40 | WARN  | o.s.w.s.m.s.DefaultHandlerExceptionResolver - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Unexpected character ('}' (code 125)): was expecting double-quote to start field name]
2025-04-30 13:16:02 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City)), args=2,City(id=null, name=Mogile, population=2000000.0, areaSquareKm=50000.0, country=Country(id=null, name=Belarus, capital=Minsk, population=1.431E8, areaSquareKm=1.71E7, gdp=1.779E12, cities=[], nations=null))
2025-04-30 13:16:02 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.id,
        c1_0.area,
        c1_0.capital,
        c2_0.country_id,
        c2_0.id,
        c2_0.area,
        c2_0.name,
        c2_0.population,
        c1_0.gdp,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        country c1_0 
    [34mleft[0m [34mjoin[0m
        city c2_0 
            [34mon[0m c1_0.id=c2_0.country_id 
    [34mwhere[0m
        c1_0.id=?
2025-04-30 13:16:02 | DEBUG | org.hibernate.SQL - 
    [34minsert[0m 
    [34minto[0m
        city
        (area, country_id, name, population) 
    [34mvalues[0m
        (?, ?, ?, ?)
2025-04-30 13:16:02 | INFO  | org.example.service.CityService - ➕ Added city 'Mogile' (ID: 43) to country 'Belarus' (ID: 2)
2025-04-30 13:16:02 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 2). Action: ADD
2025-04-30 13:16:02 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        n1_0.country_id,
        n1_1.id,
        n1_1.[34mlanguage[0m,
        n1_1.name,
        n1_1.religion 
    [34mfrom[0m
        country_nations n1_0 
    [34mjoin[0m
        nation n1_1 
            [34mon[0m n1_1.id=n1_0.nation_id 
    [34mwhere[0m
        n1_0.country_id=?
2025-04-30 13:16:02 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City))
2025-04-30 13:16:02 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCityByCountryId(Long,City))
2025-04-30 13:16:02 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-04-30 13:17:20 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=2
2025-04-30 13:17:20 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.id,
        c1_0.area,
        c1_0.country_id,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        city c1_0 
    [34mleft[0m [34mjoin[0m
        country c2_0 
            [34mon[0m c2_0.id=c1_0.country_id 
    [34mwhere[0m
        c2_0.id=?
2025-04-30 13:17:20 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.id,
        c1_0.area,
        c1_0.capital,
        c1_0.gdp,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        country c1_0 
    [34mwhere[0m
        c1_0.id=?
2025-04-30 13:17:20 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.country_id,
        c1_0.id,
        c1_0.area,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        city c1_0 
    [34mwhere[0m
        c1_0.country_id=?
2025-04-30 13:17:20 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.country_id,
        c1_0.id,
        c1_0.area,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        city c1_0 
    [34mwhere[0m
        c1_0.country_id=?
2025-04-30 13:17:20 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        n1_0.country_id,
        n1_1.id,
        n1_1.[34mlanguage[0m,
        n1_1.name,
        n1_1.religion 
    [34mfrom[0m
        country_nations n1_0 
    [34mjoin[0m
        nation n1_1 
            [34mon[0m n1_1.id=n1_0.nation_id 
    [34mwhere[0m
        n1_0.country_id=?
2025-04-30 13:17:20 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 13:17:20 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 13:17:20 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-04-30 13:17:33 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-04-30 13:17:33 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.id,
        c1_0.area,
        c1_0.country_id,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        city c1_0
2025-04-30 13:17:33 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.id,
        c1_0.area,
        c1_0.capital,
        c1_0.gdp,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        country c1_0 
    [34mwhere[0m
        c1_0.id=?
2025-04-30 13:17:33 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.country_id,
        c1_0.id,
        c1_0.area,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        city c1_0 
    [34mwhere[0m
        c1_0.country_id=?
2025-04-30 13:17:33 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.country_id,
        c1_0.id,
        c1_0.area,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        city c1_0 
    [34mwhere[0m
        c1_0.country_id=?
2025-04-30 13:17:33 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        n1_0.country_id,
        n1_1.id,
        n1_1.[34mlanguage[0m,
        n1_1.name,
        n1_1.religion 
    [34mfrom[0m
        country_nations n1_0 
    [34mjoin[0m
        nation n1_1 
            [34mon[0m n1_1.id=n1_0.nation_id 
    [34mwhere[0m
        n1_0.country_id=?
2025-04-30 13:17:33 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.id,
        c1_0.area,
        c1_0.capital,
        c1_0.gdp,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        country c1_0 
    [34mwhere[0m
        c1_0.id=?
2025-04-30 13:17:33 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.country_id,
        c1_0.id,
        c1_0.area,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        city c1_0 
    [34mwhere[0m
        c1_0.country_id=?
2025-04-30 13:17:33 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.country_id,
        c1_0.id,
        c1_0.area,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        city c1_0 
    [34mwhere[0m
        c1_0.country_id=?
2025-04-30 13:17:33 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        n1_0.country_id,
        n1_1.id,
        n1_1.[34mlanguage[0m,
        n1_1.name,
        n1_1.religion 
    [34mfrom[0m
        country_nations n1_0 
    [34mjoin[0m
        nation n1_1 
            [34mon[0m n1_1.id=n1_0.nation_id 
    [34mwhere[0m
        n1_0.country_id=?
2025-04-30 13:17:33 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 13:17:33 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 13:17:33 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 13:17:33 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 7
2025-04-30 13:18:51 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:18:51 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:18:51 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:18:51 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:18:51 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:18:51 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 13:18:51 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:18:51 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:18:51 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:18:51 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 13:18:51 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 13:18:51 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 13:18:51 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 13:18:51 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 13:18:51 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'null'
2025-04-30 13:18:51 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 13:18:51 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 13:18:51 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:18:51 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 13:18:51 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:18:51 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 13:18:51 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 13:18:51 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 13:18:51 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 13:18:51 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 13:18:51 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: null) to country 'null' (ID: 1)
2025-04-30 13:18:51 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:18:51 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 13:23:16 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: null) to country 'null' (ID: 1)
2025-04-30 13:23:16 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:23:16 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'null'
2025-04-30 13:23:16 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 13:23:16 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:23:16 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:23:16 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:23:16 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:23:16 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 13:23:16 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 13:23:16 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:23:16 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:23:16 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:23:16 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:23:33 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: null) to country 'null' (ID: 1)
2025-04-30 13:23:33 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:23:33 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'null'
2025-04-30 13:23:33 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 13:23:33 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:23:33 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:23:33 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:23:33 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:23:33 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 13:23:33 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 13:23:33 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:23:33 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:23:33 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:23:33 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:23:53 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:23:53 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:23:53 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:23:53 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:23:53 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:23:53 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 13:23:53 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:23:53 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:23:53 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:23:53 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 13:23:53 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 13:23:53 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 13:23:53 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 13:23:53 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 13:23:53 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'null'
2025-04-30 13:23:53 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 13:23:53 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 13:23:53 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:23:53 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 13:23:53 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:23:53 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 13:23:53 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 13:23:53 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 13:23:53 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 13:23:53 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 13:23:53 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: null) to country 'null' (ID: 1)
2025-04-30 13:23:53 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:23:53 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 13:24:10 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:24:10 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:24:10 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:24:10 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:24:10 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:24:10 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 13:24:10 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:24:10 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:24:10 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:24:10 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 13:24:10 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 13:24:10 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 13:24:10 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 13:24:10 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'null'
2025-04-30 13:24:10 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 13:24:10 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 13:24:10 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:24:10 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 13:24:10 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:24:10 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 13:24:10 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 13:24:10 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 13:24:10 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 13:24:10 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 13:24:10 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: null) to country 'null' (ID: 1)
2025-04-30 13:24:10 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:24:10 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 13:25:32 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 13:25:32 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 13:25:32 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 13:25:32 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:25:32 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:25:32 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:25:32 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:25:32 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:25:32 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 13:25:32 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:25:32 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:25:32 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:25:32 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 13:25:32 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 13:25:32 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 13:25:32 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 13:25:32 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'null'
2025-04-30 13:25:32 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 13:25:32 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 13:25:32 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:25:32 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 13:25:32 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:25:32 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 13:25:32 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 13:25:32 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 13:25:32 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 13:25:32 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 13:25:32 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: null) to country 'null' (ID: 1)
2025-04-30 13:25:32 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:25:32 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 13:25:59 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 13:25:59 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 13:25:59 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 13:26:00 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:26:00 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:26:00 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:26:00 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:26:00 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:26:00 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 13:26:00 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:26:00 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:26:00 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:26:00 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 13:26:00 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:26:00 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 13:26:00 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 13:26:00 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 13:26:00 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 13:26:00 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'null'
2025-04-30 13:26:00 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 13:26:00 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 13:26:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:26:00 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 13:26:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:26:00 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 13:26:00 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 13:26:00 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 13:26:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 13:26:00 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 13:26:00 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: null) to country 'null' (ID: 1)
2025-04-30 13:26:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:26:00 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 13:26:31 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 13:26:31 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 13:26:31 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 13:26:31 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:26:31 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:26:31 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:26:31 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:26:31 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:26:31 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 13:26:31 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:26:31 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:26:31 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:26:31 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 13:26:31 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:26:31 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 13:26:31 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 13:26:31 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 13:26:31 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 13:26:31 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'null'
2025-04-30 13:26:31 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 13:26:31 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 13:26:31 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:26:31 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 13:26:31 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:26:31 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 13:26:31 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 13:26:31 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 13:26:31 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 13:26:31 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 13:26:31 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: null) to country 'null' (ID: 1)
2025-04-30 13:26:31 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:26:31 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 13:26:41 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 13:26:41 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 13:26:41 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 13:26:41 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:26:41 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:26:41 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:26:41 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:26:41 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:26:41 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 13:26:41 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:26:41 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:26:41 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:26:41 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 13:26:41 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:26:41 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 13:26:41 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 13:26:41 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 13:26:41 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 13:26:41 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'null'
2025-04-30 13:26:41 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 13:26:41 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 13:26:41 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:26:41 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 13:26:41 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:26:41 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 13:26:41 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 13:26:41 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 13:26:41 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 13:26:41 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 13:26:41 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: null) to country 'null' (ID: 1)
2025-04-30 13:26:41 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:26:41 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 13:27:06 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 13:27:06 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 13:27:06 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 13:27:06 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:27:06 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:27:06 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:27:06 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:27:06 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:27:06 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 13:27:06 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:27:06 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:27:06 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:27:06 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 13:27:06 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:27:06 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 13:27:06 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 13:27:06 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 13:27:06 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 13:27:06 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'null'
2025-04-30 13:27:06 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 13:27:06 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 13:27:06 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:27:06 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 13:27:06 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:27:06 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 13:27:06 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 13:27:06 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 13:27:06 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 13:27:06 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 13:27:06 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: null) to country 'null' (ID: 1)
2025-04-30 13:27:06 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:27:06 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 13:27:56 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 13:27:56 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 13:27:56 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 13:27:56 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:27:56 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:27:56 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:27:56 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:27:56 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:27:56 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 13:27:56 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:27:56 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:27:56 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:27:56 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 13:27:56 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:27:56 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 13:27:56 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 13:27:56 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 13:27:56 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 13:27:56 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'null'
2025-04-30 13:27:56 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 13:27:56 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 13:27:56 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:27:56 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 13:27:56 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:27:56 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 13:27:56 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 13:27:56 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 13:27:56 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 13:27:56 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 13:27:56 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: null) to country 'null' (ID: 1)
2025-04-30 13:27:56 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:27:56 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 13:31:31 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 13:31:31 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 13:31:31 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 13:31:31 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:31:31 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 13:31:31 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:31:31 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:31:31 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:31:31 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:31:31 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 13:31:31 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:31:31 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:31:31 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:31:31 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 13:31:31 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:31:31 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 13:31:31 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 13:31:31 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 13:31:31 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 13:31:31 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'TestCountry'
2025-04-30 13:31:31 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'TestCountry'. Cache invalidated
2025-04-30 13:31:31 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 13:31:31 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:31:31 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 13:31:31 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:31:31 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 13:31:31 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 13:31:31 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 13:31:31 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 13:31:31 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 13:31:31 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: null) to country 'null' (ID: 1)
2025-04-30 13:31:31 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:31:31 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 13:45:15 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 13:45:15 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 13:45:15 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 13:45:15 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:45:15 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 13:45:15 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:45:15 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:45:15 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:45:15 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:45:15 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:45:15 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 13:45:15 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:45:15 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:45:15 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:45:15 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 13:45:15 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:45:15 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 13:45:15 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 13:45:15 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 13:45:15 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 13:45:15 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'TestCountry'
2025-04-30 13:45:15 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'TestCountry'. Cache invalidated
2025-04-30 13:45:15 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 13:45:15 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:45:15 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 13:45:15 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:45:15 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 13:45:15 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 13:45:15 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 13:45:15 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 13:45:15 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 13:45:15 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: null) to country 'null' (ID: 1)
2025-04-30 13:45:15 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:45:15 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 13:46:41 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 13:46:41 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 13:46:41 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 13:46:41 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:46:41 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 13:46:41 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:46:41 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:46:41 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:46:41 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:46:41 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:46:41 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 13:46:41 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:46:41 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:46:41 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:46:41 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 13:46:41 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:46:41 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 13:46:41 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 13:46:41 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 13:46:41 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 13:46:41 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'TestCountry'
2025-04-30 13:46:41 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'TestCountry'. Cache invalidated
2025-04-30 13:46:41 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 13:46:41 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:46:41 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 13:46:41 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:46:41 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 13:46:41 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 13:46:41 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 13:46:41 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 13:46:41 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 13:46:41 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: null) to country 'null' (ID: 1)
2025-04-30 13:46:41 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:46:41 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 13:46:57 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 13:46:57 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 13:46:57 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 13:46:57 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:46:57 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 13:46:57 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:46:57 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:46:57 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:46:57 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:46:57 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:46:57 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 13:46:57 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:46:57 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:46:57 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:46:57 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 13:46:57 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 13:46:57 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:46:57 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 13:46:57 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 13:46:57 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 13:46:57 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 13:46:57 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'TestCountry'
2025-04-30 13:46:57 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'TestCountry'. Cache invalidated
2025-04-30 13:46:57 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 13:46:57 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:46:57 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 13:46:57 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:46:57 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 13:46:57 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 13:46:57 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 13:46:57 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 13:46:57 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 13:46:57 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: null) to country 'null' (ID: 1)
2025-04-30 13:46:57 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:46:57 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 13:47:18 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 13:47:18 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 13:47:18 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 13:47:18 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:47:18 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 13:47:18 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:47:18 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:47:18 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:47:18 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:47:18 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:47:18 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 13:47:18 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:47:18 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:47:18 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:47:18 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 13:47:18 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 13:47:18 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:47:18 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 13:47:18 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 13:47:18 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 13:47:18 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 13:47:18 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'TestCountry'
2025-04-30 13:47:18 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'TestCountry'. Cache invalidated
2025-04-30 13:47:18 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 13:47:18 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:47:18 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 13:47:18 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:47:18 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 13:47:18 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 13:47:18 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 13:47:18 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 13:47:18 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 13:47:18 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: null) to country 'null' (ID: 1)
2025-04-30 13:47:18 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:47:18 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 13:47:40 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 13:47:40 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 13:47:40 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 13:47:40 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:47:40 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 13:47:40 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:47:40 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:47:40 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:47:40 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:47:40 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:47:40 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 13:47:40 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:47:40 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:47:40 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:47:40 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 13:47:40 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 13:47:40 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:47:40 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 13:47:40 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 13:47:40 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 13:47:40 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 13:47:40 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'TestCountry'
2025-04-30 13:47:40 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'TestCountry'. Cache invalidated
2025-04-30 13:47:40 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 13:47:40 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:47:40 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 13:47:40 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:47:40 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 13:47:40 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 13:47:40 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 13:47:40 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 13:47:40 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 13:47:40 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: null) to country 'null' (ID: 1)
2025-04-30 13:47:40 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:47:40 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 13:47:58 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 13:47:58 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 13:47:58 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 13:47:58 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:47:58 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 13:47:58 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:47:58 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:47:58 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:47:58 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:47:58 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:47:58 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 13:47:58 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:47:58 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:47:58 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:47:58 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 13:47:58 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 13:47:58 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:47:58 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 13:47:58 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 13:47:58 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 13:47:58 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 13:47:58 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 13:47:58 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'TestCountry'
2025-04-30 13:47:58 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'TestCountry'. Cache invalidated
2025-04-30 13:47:58 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 13:47:58 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:47:58 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 13:47:58 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:47:58 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 13:47:58 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 13:47:58 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 13:47:58 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 13:47:58 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 13:47:58 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: null) to country 'null' (ID: 1)
2025-04-30 13:47:58 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:47:58 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 13:48:33 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 13:48:33 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 13:48:33 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 13:48:33 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:48:33 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 13:48:33 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:48:33 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:48:33 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:48:33 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:48:33 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:48:33 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 13:48:33 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:48:33 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:48:33 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:48:33 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 13:48:33 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 13:48:33 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:48:33 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 13:48:33 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 13:48:33 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 13:48:33 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 13:48:33 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 13:48:33 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'TestCountry'
2025-04-30 13:48:33 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'TestCountry'. Cache invalidated
2025-04-30 13:48:33 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 13:48:33 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:48:33 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 13:48:33 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:48:33 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 13:48:33 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 13:48:33 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 13:48:33 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 13:48:33 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 13:48:33 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: null) to country 'null' (ID: 1)
2025-04-30 13:48:33 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:48:33 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 13:48:57 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 13:48:57 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 13:48:57 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 13:48:57 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:48:57 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 13:48:57 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:48:57 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:48:57 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:48:57 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:48:57 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:48:57 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 13:48:57 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:48:57 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:48:57 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:48:57 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 13:48:57 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 13:48:57 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:48:57 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 13:48:57 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 13:48:57 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 13:48:57 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 13:48:57 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 13:48:57 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'TestCountry'
2025-04-30 13:48:57 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'TestCountry'. Cache invalidated
2025-04-30 13:48:57 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 13:48:57 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:48:57 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 13:48:57 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:48:57 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 13:48:57 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 13:48:57 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 13:48:57 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 13:48:57 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 13:48:57 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: null) to country 'null' (ID: 1)
2025-04-30 13:48:57 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:48:57 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 13:49:51 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 13:49:51 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 13:49:51 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 13:49:51 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:49:51 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 13:49:51 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:49:51 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:49:51 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:49:51 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:49:51 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:49:51 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 13:49:51 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:49:51 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:49:51 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:49:51 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 13:49:51 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 13:49:51 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:49:51 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 13:49:51 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 13:49:51 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 13:49:51 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 13:49:51 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 13:49:51 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'TestCountry'
2025-04-30 13:49:51 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'TestCountry'. Cache invalidated
2025-04-30 13:49:51 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 13:49:51 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:49:51 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 13:49:51 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:49:51 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 13:49:51 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 13:49:51 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 13:49:51 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 13:49:51 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 13:49:51 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: null) to country 'null' (ID: 1)
2025-04-30 13:49:51 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:49:51 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 13:50:01 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 13:50:01 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 13:50:01 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 13:50:01 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:50:01 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 13:50:01 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:50:01 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:50:01 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:50:01 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:50:01 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:50:01 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 13:50:01 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:50:01 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:50:01 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:50:01 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 13:50:01 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 13:50:01 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:50:01 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 13:50:01 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 13:50:01 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 13:50:01 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 13:50:01 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 13:50:01 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'TestCountry'
2025-04-30 13:50:01 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'TestCountry'. Cache invalidated
2025-04-30 13:50:01 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 13:50:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:50:01 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 13:50:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:50:01 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 13:50:01 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 13:50:01 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 13:50:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 13:50:01 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 13:50:01 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: null) to country 'null' (ID: 1)
2025-04-30 13:50:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:50:01 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 13:55:32 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=4m57s495ms).
2025-04-30 13:55:56 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 13:55:56 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 13:55:56 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 13:55:56 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:55:56 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 13:55:56 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:55:56 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:55:56 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:55:56 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:55:56 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:55:56 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 13:55:56 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 13:55:56 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 13:55:56 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 13:55:56 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 13:55:56 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 13:55:56 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 13:55:56 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 13:55:56 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 13:55:56 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 13:55:56 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 13:55:56 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 13:55:56 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'TestCountry'
2025-04-30 13:55:56 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'TestCountry'. Cache invalidated
2025-04-30 13:55:56 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 13:55:56 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:55:56 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 13:55:56 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 13:55:56 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 13:55:56 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 13:55:56 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 13:55:56 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: null) to country 'null' (ID: 1)
2025-04-30 13:55:56 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 13:55:56 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 14:03:06 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=4m34s521ms).
2025-04-30 14:03:25 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-30 14:03:25 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 14:03:25 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-30 14:03:25 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-30 14:27:02 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 19197 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-04-30 14:27:02 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-30 14:27:02 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-30 14:27:02 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 20 ms. Found 3 JPA repository interfaces.
2025-04-30 14:27:03 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-30 14:27:03 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-30 14:27:03 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-30 14:27:03 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-30 14:27:03 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-30 14:27:03 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 699 ms
2025-04-30 14:27:03 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-30 14:27:03 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-30 14:27:03 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-30 14:27:03 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-30 14:27:03 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-30 14:27:03 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@4aeaff64
2025-04-30 14:27:03 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-30 14:27:03 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-30 14:27:04 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 14:27:04 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-30 14:27:04 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-30 14:27:05 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-30 14:27:05 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-30 14:27:05 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.099 seconds (process running for 3.465)
2025-04-30 14:27:46 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-30 14:27:46 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-30 14:27:46 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-30 14:27:46 | INFO  | o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 216 ms
2025-04-30 14:27:53 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String)), args=Berlin
2025-04-30 14:27:53 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        [34mdistinct[0m c1_0.id,
        c1_0.area,
        c1_0.capital,
        c1_0.gdp,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        country c1_0 
    [34mjoin[0m
        city c2_0 
            [34mon[0m c1_0.id=c2_0.country_id 
    [34mwhere[0m
        lower(c2_0.name) [34mlike[0m lower(([36m'%'[0m||?||[36m'%'[0m)) [34mescape[0m [36m''[0m
2025-04-30 14:27:53 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.country_id,
        c1_0.id,
        c1_0.area,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        city c1_0 
    [34mwhere[0m
        c1_0.country_id=?
2025-04-30 14:27:53 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.country_id,
        c1_0.id,
        c1_0.area,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        city c1_0 
    [34mwhere[0m
        c1_0.country_id=?
2025-04-30 14:27:53 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        n1_0.country_id,
        n1_1.id,
        n1_1.[34mlanguage[0m,
        n1_1.name,
        n1_1.religion 
    [34mfrom[0m
        country_nations n1_0 
    [34mjoin[0m
        nation n1_1 
            [34mon[0m n1_1.id=n1_0.nation_id 
    [34mwhere[0m
        n1_0.country_id=?
2025-04-30 14:27:53 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 14:27:53 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-04-30 14:27:53 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-04-30 14:30:51 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.LogsController.downloadOrViewLogs(String,String)), args=2025-04-24,*/*
2025-04-30 14:30:51 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.LogsController.downloadOrViewLogs(String,String))
2025-04-30 14:30:51 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.LogsController.downloadOrViewLogs(String,String))
2025-04-30 14:30:51 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-04-30 14:35:54 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 14:35:54 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 14:35:54 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 14:35:54 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 14:35:54 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 14:35:54 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 14:35:54 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 14:35:54 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 14:35:54 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 14:35:54 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 14:35:54 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 14:35:54 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 14:35:54 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 14:35:54 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 14:35:54 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 14:35:54 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 14:35:54 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 14:35:54 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 14:35:54 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 14:35:54 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 14:35:54 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 14:35:54 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 14:35:54 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'TestCountry'
2025-04-30 14:35:54 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'TestCountry'. Cache invalidated
2025-04-30 14:35:54 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 14:35:54 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 14:35:54 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 14:35:54 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 14:35:54 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 14:35:54 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 14:35:54 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 14:35:54 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 14:35:54 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 14:35:54 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: null) to country 'null' (ID: 1)
2025-04-30 14:35:54 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 14:35:54 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 14:36:16 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 14:36:16 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 14:36:16 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 14:36:16 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 14:36:16 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 14:36:16 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 14:36:16 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 14:36:16 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 14:36:16 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 14:36:16 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 14:36:16 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 14:36:16 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 14:36:16 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 14:36:16 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 14:36:16 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 14:36:16 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 14:36:16 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 14:36:16 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 14:36:16 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 14:36:16 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 14:36:16 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 14:36:16 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 14:36:16 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'TestCountry'
2025-04-30 14:36:16 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'TestCountry'. Cache invalidated
2025-04-30 14:36:16 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 14:36:16 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 14:36:16 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 14:36:16 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 14:36:16 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 14:36:16 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 14:36:16 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 14:36:16 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 14:36:16 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 14:36:16 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: null) to country 'null' (ID: 1)
2025-04-30 14:36:16 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 14:36:16 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 14:41:12 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: null) to country 'null' (ID: 1)
2025-04-30 14:41:12 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 14:41:12 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'TestCountry'
2025-04-30 14:41:12 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'TestCountry'. Cache invalidated
2025-04-30 14:41:12 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 14:41:12 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 14:41:12 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 14:41:12 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 14:41:33 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: null) to country 'null' (ID: 1)
2025-04-30 14:41:33 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 14:41:33 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'TestCountry'
2025-04-30 14:41:33 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'TestCountry'. Cache invalidated
2025-04-30 14:41:33 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 14:41:33 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 14:41:33 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 14:41:33 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 14:42:43 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 14:42:43 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 14:42:43 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 14:42:43 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 14:42:43 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 14:42:43 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 14:42:43 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 14:42:43 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 14:42:43 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 14:42:43 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 14:42:43 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 14:42:43 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 14:42:43 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 14:42:43 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 14:42:43 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 14:42:43 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 14:42:43 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 14:42:43 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 14:42:43 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 14:42:43 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 14:42:43 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 14:42:43 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 14:42:43 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'TestCountry'
2025-04-30 14:42:43 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'TestCountry'. Cache invalidated
2025-04-30 14:42:43 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 14:42:43 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 14:42:43 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 14:42:43 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 14:42:43 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 14:42:43 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 14:42:43 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 14:42:43 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 14:42:43 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 14:42:43 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 14:42:43 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 14:42:43 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 14:43:26 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 14:43:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 14:43:26 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'TestCountry'
2025-04-30 14:43:26 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'TestCountry'. Cache invalidated
2025-04-30 14:43:26 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 14:43:26 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 14:43:26 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 14:45:25 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 14:45:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 14:45:25 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'TestCountry'
2025-04-30 14:45:25 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'TestCountry'. Cache invalidated
2025-04-30 14:45:25 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 14:45:25 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 14:45:25 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 14:45:37 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 14:45:37 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 14:45:37 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'TestCountry'
2025-04-30 14:45:37 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'TestCountry'. Cache invalidated
2025-04-30 14:45:37 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 14:45:37 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 14:45:52 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 14:45:52 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 14:45:52 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'TestCountry'
2025-04-30 14:45:52 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'TestCountry'. Cache invalidated
2025-04-30 14:46:08 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 14:46:08 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 14:46:08 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'TestCountry'
2025-04-30 14:46:08 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'TestCountry'. Cache invalidated
2025-04-30 14:47:28 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 14:47:28 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 14:47:28 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'TestCountry'
2025-04-30 14:47:28 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'TestCountry'. Cache invalidated
2025-04-30 14:47:44 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 14:47:44 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 14:47:44 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'TestCountry'
2025-04-30 14:47:44 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'TestCountry'. Cache invalidated
2025-04-30 14:49:07 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 14:49:07 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 14:49:07 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'TestCountry'
2025-04-30 14:49:07 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'TestCountry'. Cache invalidated
2025-04-30 14:50:29 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'TestCountry'
2025-04-30 14:50:29 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'TestCountry'. Cache invalidated
2025-04-30 14:51:42 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'TestCountry'
2025-04-30 14:51:42 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'TestCountry'. Cache invalidated
2025-04-30 14:54:30 | INFO  | org.example.service.CityService - 🗑️ Deleting 2 cities from country 'TestCountry'
2025-04-30 14:54:30 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'TestCountry'. Cache invalidated
2025-04-30 14:55:30 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 14:55:30 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 14:55:30 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 14:55:30 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 14:55:30 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 14:55:30 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 14:55:30 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 14:55:30 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 14:55:30 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 14:55:30 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 14:55:30 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 14:55:30 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 14:55:30 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 14:55:30 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 14:55:30 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 14:55:30 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 14:55:30 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 14:55:30 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 14:55:30 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 14:55:30 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 14:55:30 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 14:55:30 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 14:55:30 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 14:55:30 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 14:55:30 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 14:55:30 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 14:55:30 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 14:55:30 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 14:55:30 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 14:55:30 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 14:55:30 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 14:55:30 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 14:55:30 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 14:55:30 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 14:55:41 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 14:55:41 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 14:55:41 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 14:55:41 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 14:55:41 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 14:55:41 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 14:55:41 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 14:55:41 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 14:55:41 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 14:55:41 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 14:55:41 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 14:55:41 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 14:55:41 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 14:55:41 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 14:55:41 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 14:55:41 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 14:55:41 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 14:55:41 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 14:55:41 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 14:55:41 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 14:55:41 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 14:55:41 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 14:55:41 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 14:55:41 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 14:55:41 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 14:55:41 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 14:55:41 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 14:55:41 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 14:55:41 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 14:55:41 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 14:55:41 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 14:55:41 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 14:55:41 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 14:55:41 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 14:55:51 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 14:55:51 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 14:55:51 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 14:55:51 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 14:55:51 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 14:55:51 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 14:55:51 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 14:55:51 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 14:55:51 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 14:55:51 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 14:55:51 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 14:55:51 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 14:55:51 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 14:55:51 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 14:55:51 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 14:55:51 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 14:55:51 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 14:55:51 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 14:55:51 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 14:55:51 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 14:55:51 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 14:55:51 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 14:55:51 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 14:55:51 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 14:55:51 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 14:55:51 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 14:55:51 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 14:55:51 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 14:55:51 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 14:55:51 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 14:55:51 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 14:55:51 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 14:55:51 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 14:55:51 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 14:59:43 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 14:59:43 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 14:59:43 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 14:59:43 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 14:59:43 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 14:59:43 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 14:59:43 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 14:59:43 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 14:59:43 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 14:59:43 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 14:59:43 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 14:59:43 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 14:59:43 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 14:59:43 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 14:59:43 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 14:59:43 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 14:59:43 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 14:59:43 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 14:59:43 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 14:59:43 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 14:59:43 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 14:59:43 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 14:59:43 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 14:59:43 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 14:59:43 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-04-30 14:59:43 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 14:59:43 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 14:59:43 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 14:59:43 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 14:59:43 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 14:59:43 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 14:59:43 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 14:59:43 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 14:59:43 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 14:59:43 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 14:59:43 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 14:59:43 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 14:59:43 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 14:59:43 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -1000.0, area: 5000.0 km²
2025-04-30 14:59:43 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 14:59:52 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 14:59:52 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 14:59:52 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 14:59:52 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 14:59:52 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 14:59:52 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 14:59:52 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 14:59:52 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 14:59:52 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 14:59:52 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 14:59:52 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 14:59:52 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 14:59:52 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 14:59:52 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 14:59:52 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 14:59:52 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 14:59:52 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 14:59:52 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 14:59:52 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 14:59:52 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 14:59:52 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 14:59:52 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 14:59:52 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 14:59:52 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 14:59:52 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-04-30 14:59:52 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 14:59:52 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 14:59:52 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 14:59:52 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 14:59:52 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 14:59:52 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 14:59:52 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 14:59:52 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 14:59:52 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 14:59:52 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 14:59:52 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 14:59:52 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 14:59:52 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 14:59:52 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -1000.0, area: 5000.0 km²
2025-04-30 14:59:52 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:00:25 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 15:00:25 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 15:00:25 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 15:00:25 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:00:25 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:00:25 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:00:25 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:00:25 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:00:25 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:00:25 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:00:25 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 15:00:25 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:00:25 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:00:25 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:00:25 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:00:25 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 15:00:25 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:00:25 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 15:00:25 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 15:00:25 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 15:00:25 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 15:00:25 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 15:00:25 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:00:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:00:25 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 15:00:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:00:25 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:00:25 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:00:25 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 15:00:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:00:25 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:00:25 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:00:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:00:26 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 15:00:49 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 15:00:49 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 15:00:49 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 15:00:49 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:00:49 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:00:49 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:00:49 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:00:49 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:00:49 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:00:49 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:00:49 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 15:00:49 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:00:49 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:00:49 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:00:49 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:00:49 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 15:00:49 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:00:49 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 15:00:49 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 15:00:49 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 15:00:49 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 15:00:49 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 15:00:49 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:00:49 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:00:49 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-04-30 15:00:49 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 15:00:49 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:00:49 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:00:49 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 15:00:49 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:00:49 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:00:49 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:00:49 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 15:00:49 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:00:49 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:00:49 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:00:49 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:00:49 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 15:00:49 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -1000.0, area: 5000.0 km²
2025-04-30 15:00:49 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:01:35 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 15:01:35 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 15:01:35 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 15:01:35 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:01:35 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:01:35 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:01:35 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:01:35 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:01:35 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:01:35 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:01:35 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 15:01:35 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:01:35 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:01:35 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:01:35 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:01:35 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 15:01:35 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:01:35 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 15:01:35 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 15:01:35 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 15:01:35 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 15:01:35 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 15:01:35 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:01:35 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:01:35 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 15:01:35 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:01:35 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:01:35 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:01:35 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 15:01:35 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:01:35 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:01:35 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:01:35 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:01:35 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 15:02:06 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 15:02:06 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 15:02:06 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 15:02:06 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:02:06 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:02:06 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:02:06 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:02:06 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:02:06 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:02:06 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:02:06 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 15:02:06 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:02:06 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:02:06 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:02:06 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:02:06 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 15:02:06 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:02:06 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 15:02:06 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 15:02:06 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 15:02:06 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 15:02:06 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 15:02:06 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:02:06 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:02:06 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 15:02:06 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:02:06 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:02:06 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:02:06 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 15:02:06 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:02:06 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:02:06 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:02:06 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:02:06 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 15:02:39 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 15:02:39 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 15:02:39 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 15:02:39 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:02:39 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:02:39 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:02:39 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:02:39 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:02:39 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:02:39 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:02:39 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 15:02:39 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:02:39 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:02:39 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:02:39 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:02:39 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 15:02:39 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:02:39 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 15:02:39 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 15:02:39 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 15:02:39 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 15:02:39 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 15:02:39 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:02:39 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:02:39 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 15:02:39 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:02:39 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:02:39 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:02:39 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 15:02:39 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:02:39 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:02:39 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:02:39 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:02:39 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 15:07:57 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 15:07:57 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 15:07:57 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 15:07:57 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:07:57 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:07:57 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:07:57 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:07:57 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:07:57 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:07:57 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:07:57 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 15:07:57 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:07:57 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:07:57 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:07:57 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:07:57 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 15:07:57 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:07:57 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 15:07:57 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 15:07:57 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 15:07:57 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 15:07:57 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 15:07:57 | WARN  | org.example.service.CityService - Invalid cache entry for key: allCities
2025-04-30 15:07:57 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:07:57 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:07:57 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:07:57 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 15:07:57 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:07:57 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:07:57 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:07:57 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 15:07:57 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:07:57 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-04-30 15:07:57 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:07:57 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:07:57 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:07:57 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:07:57 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-04-30 15:07:57 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 15:07:57 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 15:07:57 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-04-30 15:07:57 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:08:06 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 15:08:06 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 15:08:06 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 15:08:06 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:08:06 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:08:06 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:08:06 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:08:06 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:08:06 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:08:06 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:08:06 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 15:08:06 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:08:06 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:08:06 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:08:06 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:08:06 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 15:08:06 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:08:06 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 15:08:06 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 15:08:06 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 15:08:06 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 15:08:06 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 15:08:06 | WARN  | org.example.service.CityService - Invalid cache entry for key: allCities
2025-04-30 15:08:06 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:08:06 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:08:06 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:08:06 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 15:08:06 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:08:06 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:08:06 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:08:06 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 15:08:06 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:08:06 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-04-30 15:08:06 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:08:06 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:08:06 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:08:06 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:08:06 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-04-30 15:08:06 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 15:08:06 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 15:08:06 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-04-30 15:08:06 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:08:47 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 15:08:47 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 15:08:47 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 15:08:47 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:08:47 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:08:47 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:08:47 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:08:47 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:08:47 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:08:47 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:08:47 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 15:08:47 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:08:47 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:08:47 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:08:47 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:08:47 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 15:08:47 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:08:47 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 15:08:47 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 15:08:47 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 15:08:47 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 15:08:47 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 15:08:47 | WARN  | org.example.service.CityService - Invalid cache entry for key: allCities
2025-04-30 15:08:47 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:08:47 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:08:47 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:08:47 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 15:08:47 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:08:47 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:08:47 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:08:47 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 15:08:47 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:08:47 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-04-30 15:08:47 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:08:47 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:08:47 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:08:47 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:08:47 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-04-30 15:08:47 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 15:08:47 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 15:08:47 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-04-30 15:08:47 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:09:09 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:09:09 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:09:09 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:09:09 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 15:09:09 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 15:09:09 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 15:09:09 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:09:09 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:09:09 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:09:09 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:09:09 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:09:09 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:09:09 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:09:09 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:09:09 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:09:09 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 15:09:09 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:09:09 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:09:09 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:09:09 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:09:09 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 15:09:09 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:09:09 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 15:09:09 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 15:09:09 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 15:09:09 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 15:09:09 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 15:09:09 | WARN  | org.example.service.CityService - Invalid cache entry for key: allCities
2025-04-30 15:09:09 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:09:09 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:09:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:09:09 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 15:09:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:09:09 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:09:09 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:09:09 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 15:09:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:09:09 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-04-30 15:09:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:09:09 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:09:09 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:09:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:09:09 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-04-30 15:09:09 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 15:09:09 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 15:09:09 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-04-30 15:09:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:10:01 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:10:01 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:10:01 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:10:01 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 15:10:01 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 15:10:01 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 15:10:01 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:10:01 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:10:01 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:10:01 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:10:01 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:10:01 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:10:01 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:10:01 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:10:01 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:10:01 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 15:10:01 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:10:01 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:10:01 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:10:01 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:10:01 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 15:10:01 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:10:01 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 15:10:01 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 15:10:01 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 15:10:01 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 15:10:01 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 15:10:01 | WARN  | org.example.service.CityService - Invalid cache entry for key: allCities
2025-04-30 15:10:01 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:10:01 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:10:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:10:01 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 15:10:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:10:01 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:10:01 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:10:01 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 15:10:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:10:01 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-04-30 15:10:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:10:01 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:10:01 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:10:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:10:01 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-04-30 15:10:01 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 15:10:01 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 15:10:01 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-04-30 15:10:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:11:01 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:11:01 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:11:01 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:11:01 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 15:11:01 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 15:11:01 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 15:11:01 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:11:01 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:11:01 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:11:01 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:11:01 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:11:01 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:11:01 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:11:01 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:11:01 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:11:01 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 15:11:01 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:11:01 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:11:01 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:11:01 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:11:01 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 15:11:01 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:11:01 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 15:11:01 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 15:11:01 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 15:11:01 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 15:11:01 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 15:11:01 | WARN  | org.example.service.CityService - Invalid cache entry for key: allCities
2025-04-30 15:11:01 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:11:01 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:11:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:11:01 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 15:11:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:11:01 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:11:01 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:11:01 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 15:11:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:11:01 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-04-30 15:11:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:11:01 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:11:01 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:11:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:11:01 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-04-30 15:11:01 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 15:11:01 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 15:11:01 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-04-30 15:11:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:11:24 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:11:24 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:11:24 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:11:24 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 15:11:24 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 15:11:24 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 15:11:24 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:11:24 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:11:24 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:11:24 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:11:24 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:11:24 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:11:24 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:11:24 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:11:24 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:11:24 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 15:11:24 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:11:24 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:11:24 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:11:24 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:11:24 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 15:11:24 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:11:24 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 15:11:24 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 15:11:24 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 15:11:24 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 15:11:24 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 15:11:24 | WARN  | org.example.service.CityService - Invalid cache entry for key: allCities
2025-04-30 15:11:24 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:11:24 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:11:24 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:11:24 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 15:11:24 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:11:24 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:11:24 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:11:24 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 15:11:24 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:11:24 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-04-30 15:11:24 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:11:24 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:11:24 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:11:24 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:11:24 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-04-30 15:11:24 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 15:11:24 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 15:11:24 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-04-30 15:11:24 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:14:24 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:14:24 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:14:24 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:14:24 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 15:14:24 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 15:14:24 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 15:14:24 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:14:24 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:14:24 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:14:24 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:14:24 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:14:24 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:14:24 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:14:24 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:14:24 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:14:24 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 15:14:24 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:14:24 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:14:24 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:14:24 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:14:24 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 15:14:24 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:14:24 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 15:14:24 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 15:14:24 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 15:14:24 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 15:14:24 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 15:14:24 | WARN  | org.example.service.CityService - Invalid cache entry for key: allCities
2025-04-30 15:14:24 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:14:24 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:14:24 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:14:24 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 15:14:24 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:14:24 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:14:24 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:14:24 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 15:14:24 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:14:24 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-04-30 15:14:24 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:14:24 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:14:24 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:14:24 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:14:24 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-04-30 15:14:24 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 15:14:24 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:14:24 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 15:14:24 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-04-30 15:14:24 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:14:45 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:14:45 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:14:45 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:14:45 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 15:14:45 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 15:14:45 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 15:14:45 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:14:45 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:14:45 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:14:45 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:14:45 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:14:45 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:14:45 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:14:45 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:14:45 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:14:45 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 15:14:45 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:14:45 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:14:45 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:14:45 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:14:45 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:14:45 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 15:14:45 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:14:45 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 15:14:45 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 15:14:45 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 15:14:45 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 15:14:45 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 15:14:45 | WARN  | org.example.service.CityService - Invalid cache entry for key: allCities
2025-04-30 15:14:45 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:14:45 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:14:45 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:14:45 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 15:14:45 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:14:45 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:14:45 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:14:45 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 15:14:45 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:14:45 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-04-30 15:14:45 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:14:45 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:14:45 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:14:45 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:14:45 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-04-30 15:14:45 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 15:14:45 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:14:45 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 15:14:45 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-04-30 15:14:45 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:15:20 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:15:20 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:15:20 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:15:20 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 15:15:20 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 15:15:20 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 15:15:20 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:15:20 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:15:20 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:15:20 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:15:20 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:15:20 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:15:20 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:15:20 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:15:20 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:15:20 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 15:15:20 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:15:20 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:15:20 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:15:20 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:15:20 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:15:20 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 15:15:20 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:15:20 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 15:15:20 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 15:15:20 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 15:15:20 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 15:15:20 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 15:15:21 | WARN  | org.example.service.CityService - Invalid cache entry for key: allCities
2025-04-30 15:15:21 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:15:21 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:15:21 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:15:21 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 15:15:21 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:15:21 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:15:21 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:15:21 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 15:15:21 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:15:21 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-04-30 15:15:21 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:15:21 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:15:21 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:15:21 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:15:21 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-04-30 15:15:21 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 15:15:21 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:15:21 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 15:15:21 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-04-30 15:15:21 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:15:50 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:15:50 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:15:50 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:15:50 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 15:15:50 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 15:15:50 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 15:15:50 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:15:50 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:15:50 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:15:50 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:15:50 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:15:50 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:15:50 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:15:50 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:15:50 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:15:50 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 15:15:50 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:15:50 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:15:50 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:15:50 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:15:50 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:15:50 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 15:15:50 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:15:50 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 15:15:50 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 15:15:50 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 15:15:50 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 15:15:50 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 15:15:50 | WARN  | org.example.service.CityService - Invalid cache entry for key: allCities
2025-04-30 15:15:50 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:15:50 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:15:50 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:15:50 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 15:15:50 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:15:50 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:15:50 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:15:50 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 15:15:50 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:15:50 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-04-30 15:15:50 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:15:50 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:15:50 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:15:50 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:15:50 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-04-30 15:15:50 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 15:15:50 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:15:50 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 15:15:50 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-04-30 15:15:50 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:17:24 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:17:24 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:17:24 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:17:24 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 15:17:24 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 15:17:24 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 15:17:24 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:17:24 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:17:24 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:17:24 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:17:24 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:17:24 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:17:24 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:17:24 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:17:24 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:17:24 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 15:17:24 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:17:24 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:17:24 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:17:24 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:17:24 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:17:24 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 15:17:24 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:17:24 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 15:17:24 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 15:17:24 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 15:17:24 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 15:17:24 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 15:17:24 | WARN  | org.example.service.CityService - Invalid cache entry for key: allCities
2025-04-30 15:17:24 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:17:24 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:17:24 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:17:24 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 15:17:24 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:17:24 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:17:24 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:17:24 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:17:24 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:17:24 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 15:17:24 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:17:24 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-04-30 15:17:24 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:17:24 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:17:24 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:17:24 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:17:24 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-04-30 15:17:24 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 15:17:24 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:17:24 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 15:17:24 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:17:24 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:17:24 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-04-30 15:17:24 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:17:44 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:17:44 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:17:44 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:17:44 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 15:17:44 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 15:17:44 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 15:17:44 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:17:44 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:17:44 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:17:44 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:17:44 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:17:44 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:17:44 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:17:44 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:17:44 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:17:44 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 15:17:44 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:17:44 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:17:44 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:17:44 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:17:44 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:17:44 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 15:17:44 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:17:44 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 15:17:44 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 15:17:44 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 15:17:44 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 15:17:44 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 15:17:44 | WARN  | org.example.service.CityService - Invalid cache entry for key: allCities
2025-04-30 15:17:44 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:17:44 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:17:44 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:17:44 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 15:17:44 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:17:44 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:17:44 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:17:44 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:17:44 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:17:44 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 15:17:44 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:17:44 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-04-30 15:17:44 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:17:44 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:17:44 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:17:44 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:17:44 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-04-30 15:17:44 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 15:17:44 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:17:44 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 15:17:44 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:17:44 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:17:44 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-04-30 15:17:44 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:19:20 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:19:20 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:19:20 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:19:20 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 15:19:20 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 15:19:20 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 15:19:20 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:19:20 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:19:20 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:19:20 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:19:20 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:19:20 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:19:20 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:19:20 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:19:20 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:19:20 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 15:19:20 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:19:20 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:19:20 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:19:20 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:19:20 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:19:20 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 15:19:20 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:19:20 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 15:19:20 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 15:19:20 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 15:19:20 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 15:19:20 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 15:19:21 | WARN  | org.example.service.CityService - Invalid cache entry for key: allCities
2025-04-30 15:19:21 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:19:21 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:19:21 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:19:21 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 15:19:21 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:19:21 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:19:21 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:19:21 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:19:21 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:19:21 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 15:19:21 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:19:21 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-04-30 15:19:21 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:19:21 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:19:21 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:19:21 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:19:21 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-04-30 15:19:21 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 15:19:21 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:19:21 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 15:19:21 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:19:21 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:19:21 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-04-30 15:19:21 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:20:47 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:20:47 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:20:47 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:20:47 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 15:20:47 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 15:20:47 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 15:20:47 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:20:47 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:20:47 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:20:47 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:20:47 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:20:47 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:20:47 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:20:47 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:20:47 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:20:47 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 15:20:47 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:20:47 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:20:47 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:20:47 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:20:47 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:20:47 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 15:20:47 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:20:47 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 15:20:47 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 15:20:47 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 15:20:47 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 15:20:47 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 15:20:47 | WARN  | org.example.service.CityService - Invalid cache entry for key: allCities
2025-04-30 15:20:47 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:20:47 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:20:47 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:20:47 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 15:20:47 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:20:47 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:20:47 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:20:47 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:20:47 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:20:47 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 15:20:47 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:20:47 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-04-30 15:20:47 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:20:47 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:20:47 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:20:47 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:20:47 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-04-30 15:20:47 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 15:20:47 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:20:47 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 15:20:47 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:20:47 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:20:47 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-04-30 15:20:47 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:21:14 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:21:14 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:21:14 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:21:14 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 15:21:14 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 15:21:14 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 15:21:14 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:21:14 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:21:14 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:21:14 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:21:14 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:21:14 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:21:14 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:21:14 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:21:14 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:21:14 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 15:21:14 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:21:14 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:21:14 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:21:14 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:21:14 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:21:14 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 15:21:14 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:21:14 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 15:21:14 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 15:21:14 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 15:21:14 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 15:21:14 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 15:21:14 | WARN  | org.example.service.CityService - Invalid cache entry for key: allCities
2025-04-30 15:21:14 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:21:14 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:21:14 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:21:14 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 15:21:14 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:21:14 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:21:14 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:21:14 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:21:14 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:21:14 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 15:21:14 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:21:14 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-04-30 15:21:14 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:21:14 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:21:14 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:21:14 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:21:14 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-04-30 15:21:14 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 15:21:14 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:21:14 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 15:21:14 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:21:14 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:21:14 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-04-30 15:21:14 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:22:48 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:22:48 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:22:48 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:22:48 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 15:22:48 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 15:22:48 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 15:22:48 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:22:48 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:22:48 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:22:48 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:22:48 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:22:48 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:22:48 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:22:48 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:22:48 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:22:48 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 15:22:48 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:22:48 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:22:48 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:22:48 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:22:48 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:22:48 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 15:22:48 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:22:48 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 15:22:48 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 15:22:48 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 15:22:48 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 15:22:48 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 15:22:48 | WARN  | org.example.service.CityService - Invalid cache entry for key: allCities
2025-04-30 15:22:48 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:22:48 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:22:48 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:22:48 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 15:22:48 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:22:48 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:22:48 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:22:48 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:22:48 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:22:48 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 15:22:48 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:22:48 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-04-30 15:22:48 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:22:48 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:22:48 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:22:48 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:22:48 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-04-30 15:22:48 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 15:22:48 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:22:48 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 15:22:48 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:22:48 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:22:48 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-04-30 15:22:48 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:27:35 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:27:35 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:27:35 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:27:35 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 15:27:35 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 15:27:35 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 15:27:35 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:27:35 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:27:35 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:27:35 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:27:35 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:27:35 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:27:35 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:27:35 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:27:35 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:27:35 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 15:27:35 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:27:35 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:27:35 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:27:35 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:27:35 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:27:35 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 15:27:35 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:27:35 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 15:27:35 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 15:27:35 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 15:27:35 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 15:27:35 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 15:27:35 | WARN  | org.example.service.CityService - Invalid cache entry for key: allCities
2025-04-30 15:27:35 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:27:35 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:27:35 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:27:35 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 15:27:35 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:27:35 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:27:35 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:27:35 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:27:35 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:27:35 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 15:27:35 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:27:35 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-04-30 15:27:35 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:27:35 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:27:35 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:27:35 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:27:35 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-04-30 15:27:35 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 15:27:35 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:27:35 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 15:27:35 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:27:35 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:27:35 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-04-30 15:27:35 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:28:00 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:28:00 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:28:00 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:28:00 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 15:28:00 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 15:28:00 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 15:28:00 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:28:00 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:28:00 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:28:00 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:28:00 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:28:00 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:28:00 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:28:00 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:28:00 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:28:00 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 15:28:00 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:28:00 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:28:00 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:28:00 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:28:00 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:28:00 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 15:28:00 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:28:00 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 15:28:00 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 15:28:00 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 15:28:00 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 15:28:00 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 15:28:00 | WARN  | org.example.service.CityService - Invalid cache entry for key: allCities
2025-04-30 15:28:00 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:28:00 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:28:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:28:00 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 15:28:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:28:00 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:28:00 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:28:00 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:28:00 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:28:00 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 15:28:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:28:00 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-04-30 15:28:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:28:00 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:28:00 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:28:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:28:00 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-04-30 15:28:00 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 15:28:00 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:28:00 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 15:28:00 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:28:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:28:00 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-04-30 15:28:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:28:27 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:28:27 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:28:27 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:28:27 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 15:28:27 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 15:28:27 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 15:28:27 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:28:27 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:28:27 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:28:27 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:28:27 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:28:27 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:28:27 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:28:27 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:28:27 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:28:27 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 15:28:27 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:28:27 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:28:27 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:28:27 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:28:27 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:28:27 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 15:28:27 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:28:27 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 15:28:27 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 15:28:27 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 15:28:27 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 15:28:27 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 15:28:28 | WARN  | org.example.service.CityService - Invalid cache entry for key: allCities
2025-04-30 15:28:28 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:28:28 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:28:28 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:28:28 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 15:28:28 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:28:28 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:28:28 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:28:28 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:28:28 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:28:28 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 15:28:28 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:28:28 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-04-30 15:28:28 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:28:28 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:28:28 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:28:28 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:28:28 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-04-30 15:28:28 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 15:28:28 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:28:28 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 15:28:28 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:28:28 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:28:28 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-04-30 15:28:28 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:28:47 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:28:47 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:28:47 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:28:47 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 15:28:47 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 15:28:47 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 15:28:47 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:28:47 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:28:47 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:28:47 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:28:47 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:28:47 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:28:47 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:28:47 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:28:47 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:28:47 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 15:28:47 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:28:47 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:28:47 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:28:47 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:28:47 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:28:47 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 15:28:47 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:28:47 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 15:28:47 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 15:28:47 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 15:28:47 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 15:28:47 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 15:28:47 | WARN  | org.example.service.CityService - Invalid cache entry for key: allCities
2025-04-30 15:28:47 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:28:47 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:28:47 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:28:47 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 15:28:47 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:28:47 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:28:47 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:28:47 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:28:47 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:28:47 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 15:28:47 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:28:47 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-04-30 15:28:47 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:28:47 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:28:47 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:28:47 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:28:47 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-04-30 15:28:47 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 15:28:47 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:28:47 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 15:28:47 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:28:47 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:28:47 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-04-30 15:28:47 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:31:52 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:31:52 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:31:52 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:31:52 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 15:31:52 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 15:31:52 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 15:31:52 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:31:52 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:31:52 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:31:52 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:31:52 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:31:52 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:31:52 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:31:52 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:31:52 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:31:52 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 15:31:52 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:31:52 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:31:52 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:31:52 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:31:52 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:31:52 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 15:31:52 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:31:52 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 15:31:52 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 15:31:52 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 15:31:52 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 15:31:52 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 15:31:52 | WARN  | org.example.service.CityService - Invalid cache entry for key: allCities
2025-04-30 15:31:52 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:31:52 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:31:52 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:31:52 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 15:31:52 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:31:52 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:31:52 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:31:52 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:31:52 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:31:52 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 15:31:52 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:31:52 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-04-30 15:31:52 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:31:52 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:31:52 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:31:52 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:31:52 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-04-30 15:31:52 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 15:31:52 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:31:52 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 15:31:52 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:31:52 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:31:52 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-04-30 15:31:52 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:33:15 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:33:15 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:33:15 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:33:15 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 15:33:15 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 15:33:15 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 15:33:15 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:33:15 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:33:15 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:33:15 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:33:15 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:33:15 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:33:15 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:33:15 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:33:15 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:33:15 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 15:33:15 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:33:15 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:33:15 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:33:15 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:33:15 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:33:15 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 15:33:15 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:33:15 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 15:33:15 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 15:33:15 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 15:33:15 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 15:33:15 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 15:33:15 | WARN  | org.example.service.CityService - Invalid cache entry for key: allCities
2025-04-30 15:33:15 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:33:15 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:33:15 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:33:15 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 15:33:15 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:33:15 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:33:15 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:33:15 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:33:15 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:33:15 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 15:33:15 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:33:15 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-04-30 15:33:15 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:33:15 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:33:15 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:33:15 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:33:15 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-04-30 15:33:15 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 15:33:15 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:33:15 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 15:33:15 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:33:15 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:33:15 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-04-30 15:33:15 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:34:57 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:34:57 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:34:57 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:34:57 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 15:34:57 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 15:34:57 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 15:34:57 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:34:57 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:34:57 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:34:57 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:34:57 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:34:57 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:34:57 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:34:57 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:34:57 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:34:57 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 15:34:57 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:34:57 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:34:57 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:34:57 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:34:57 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:34:57 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 15:34:57 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:34:57 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 15:34:57 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 15:34:57 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 15:34:57 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 15:34:57 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 15:34:57 | WARN  | org.example.service.CityService - Invalid cache entry for key: allCities
2025-04-30 15:34:57 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:34:57 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:34:57 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:34:57 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 15:34:57 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:34:57 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:34:57 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:34:57 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:34:57 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:34:57 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 15:34:57 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:34:57 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-04-30 15:34:57 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:34:57 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:34:57 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:34:57 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:34:57 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-04-30 15:34:57 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 15:34:57 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:34:57 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 15:34:57 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:34:57 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:34:57 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-04-30 15:34:57 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:37:14 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:37:14 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:37:14 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:37:14 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 15:37:14 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 15:37:14 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 15:37:14 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:37:14 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:37:14 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:37:14 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:37:14 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:37:14 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:37:14 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:37:14 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:37:14 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:37:14 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 15:37:14 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:37:14 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:37:14 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:37:14 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:37:14 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:37:14 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 15:37:14 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:37:14 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 15:37:14 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 15:37:14 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 15:37:14 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 15:37:14 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 15:37:14 | WARN  | org.example.service.CityService - Invalid cache entry for key: allCities
2025-04-30 15:37:14 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:37:14 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:37:14 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:37:14 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 15:37:14 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:37:14 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:37:14 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:37:14 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:37:14 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:37:14 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 15:37:14 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:37:14 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-04-30 15:37:14 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:37:14 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:37:14 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:37:14 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:37:14 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-04-30 15:37:14 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 15:37:14 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:37:14 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 15:37:14 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:37:14 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:37:14 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-04-30 15:37:14 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:38:07 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:38:07 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:38:07 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:38:07 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 15:38:07 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 15:38:07 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 15:38:07 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:38:07 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:38:07 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:38:07 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:38:07 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:38:07 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:38:07 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:38:07 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:38:07 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:38:07 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 15:38:07 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:38:07 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:38:07 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:38:07 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:38:07 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:38:07 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 15:38:07 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:38:07 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 15:38:07 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 15:38:07 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 15:38:07 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 15:38:07 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 15:38:07 | WARN  | org.example.service.CityService - Invalid cache entry for key: allCities
2025-04-30 15:38:07 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:38:07 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:38:07 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:38:07 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 15:38:07 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:38:07 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:38:07 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:38:07 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:38:07 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:38:07 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 15:38:07 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:38:07 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-04-30 15:38:07 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:38:07 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:38:07 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:38:07 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:38:07 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-04-30 15:38:07 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 15:38:07 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:38:07 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 15:38:07 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:38:07 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:38:07 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-04-30 15:38:07 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:38:58 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:38:58 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:38:58 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:38:58 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 15:38:58 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 15:38:58 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 15:38:58 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:38:58 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:38:58 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:38:58 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:38:58 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:38:58 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:38:58 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:38:58 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:38:58 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:38:58 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 15:38:58 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:38:58 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:38:58 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:38:58 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:38:58 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:38:58 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 15:38:58 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:38:58 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 15:38:58 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 15:38:58 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 15:38:58 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 15:38:58 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 15:38:58 | WARN  | org.example.service.CityService - Invalid cache entry for key: allCities
2025-04-30 15:38:58 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:38:58 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:38:58 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:38:58 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 15:38:58 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:38:58 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:38:58 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:38:58 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:38:58 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:38:58 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 15:38:58 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:38:58 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-04-30 15:38:58 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:38:58 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:38:58 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:38:58 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:38:58 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-04-30 15:38:58 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 15:38:58 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:38:58 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 15:38:58 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:38:58 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:38:58 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-04-30 15:38:58 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:40:19 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:40:19 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:40:19 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:40:19 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-04-30 15:40:19 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-04-30 15:40:19 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-04-30 15:40:19 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:40:19 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:40:19 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:40:19 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-04-30 15:40:19 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:40:19 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:40:19 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:40:19 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:40:19 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:40:19 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-04-30 15:40:19 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:40:19 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 15:40:19 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:40:19 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:40:19 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 15:40:19 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-04-30 15:40:19 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:40:19 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-04-30 15:40:19 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-04-30 15:40:19 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-04-30 15:40:19 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-04-30 15:40:19 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-04-30 15:40:20 | WARN  | org.example.service.CityService - Invalid cache entry for key: allCities
2025-04-30 15:40:20 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:40:20 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:40:20 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:40:20 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-04-30 15:40:20 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:40:20 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:40:20 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:40:20 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-04-30 15:40:20 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-04-30 15:40:20 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-04-30 15:40:20 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:40:20 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-04-30 15:40:20 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:40:20 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:40:20 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:40:20 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:40:20 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-04-30 15:40:20 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-04-30 15:40:20 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 15:40:20 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 15:40:20 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-04-30 15:40:20 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-04-30 15:40:20 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-04-30 15:40:20 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-04-30 15:41:09 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-30 15:41:09 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 15:41:09 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-30 15:41:09 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-30 15:41:23 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-30 15:41:23 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 21933 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-04-30 15:41:23 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-30 15:41:23 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-30 15:41:23 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19 ms. Found 3 JPA repository interfaces.
2025-04-30 15:41:24 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-30 15:41:24 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-30 15:41:24 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-30 15:41:24 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-30 15:41:24 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-30 15:41:24 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 736 ms
2025-04-30 15:41:24 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-30 15:41:24 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-30 15:41:24 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-30 15:41:24 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-30 15:41:24 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-30 15:41:24 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@41059616
2025-04-30 15:41:24 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-30 15:41:25 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-30 15:41:25 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 15:41:25 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-30 15:41:25 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-30 15:41:26 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-30 15:41:26 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-30 15:41:26 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.277 seconds (process running for 3.64)
2025-04-30 15:41:29 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-30 15:41:29 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-30 15:41:29 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-30 15:41:29 | INFO  | o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 197 ms
2025-04-30 15:41:43 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-04-30 15:41:43 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.id,
        c1_0.area,
        c1_0.country_id,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        city c1_0
2025-04-30 15:41:43 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.id,
        c1_0.area,
        c1_0.capital,
        c1_0.gdp,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        country c1_0 
    [34mwhere[0m
        c1_0.id=?
2025-04-30 15:41:43 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.country_id,
        c1_0.id,
        c1_0.area,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        city c1_0 
    [34mwhere[0m
        c1_0.country_id=?
2025-04-30 15:41:43 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.country_id,
        c1_0.id,
        c1_0.area,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        city c1_0 
    [34mwhere[0m
        c1_0.country_id=?
2025-04-30 15:41:43 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        n1_0.country_id,
        n1_1.id,
        n1_1.[34mlanguage[0m,
        n1_1.name,
        n1_1.religion 
    [34mfrom[0m
        country_nations n1_0 
    [34mjoin[0m
        nation n1_1 
            [34mon[0m n1_1.id=n1_0.nation_id 
    [34mwhere[0m
        n1_0.country_id=?
2025-04-30 15:41:43 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.id,
        c1_0.area,
        c1_0.capital,
        c1_0.gdp,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        country c1_0 
    [34mwhere[0m
        c1_0.id=?
2025-04-30 15:41:43 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.country_id,
        c1_0.id,
        c1_0.area,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        city c1_0 
    [34mwhere[0m
        c1_0.country_id=?
2025-04-30 15:41:43 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.country_id,
        c1_0.id,
        c1_0.area,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        city c1_0 
    [34mwhere[0m
        c1_0.country_id=?
2025-04-30 15:41:43 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        n1_0.country_id,
        n1_1.id,
        n1_1.[34mlanguage[0m,
        n1_1.name,
        n1_1.religion 
    [34mfrom[0m
        country_nations n1_0 
    [34mjoin[0m
        nation n1_1 
            [34mon[0m n1_1.id=n1_0.nation_id 
    [34mwhere[0m
        n1_0.country_id=?
2025-04-30 15:41:43 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 15:41:43 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 15:41:43 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-04-30 15:47:43 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=1
2025-04-30 15:47:43 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.id,
        c1_0.area,
        c1_0.country_id,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        city c1_0 
    [34mleft[0m [34mjoin[0m
        country c2_0 
            [34mon[0m c2_0.id=c1_0.country_id 
    [34mwhere[0m
        c2_0.id=?
2025-04-30 15:47:43 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.id,
        c1_0.area,
        c1_0.capital,
        c1_0.gdp,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        country c1_0 
    [34mwhere[0m
        c1_0.id=?
2025-04-30 15:47:43 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.country_id,
        c1_0.id,
        c1_0.area,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        city c1_0 
    [34mwhere[0m
        c1_0.country_id=?
2025-04-30 15:47:43 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.country_id,
        c1_0.id,
        c1_0.area,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        city c1_0 
    [34mwhere[0m
        c1_0.country_id=?
2025-04-30 15:47:43 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        n1_0.country_id,
        n1_1.id,
        n1_1.[34mlanguage[0m,
        n1_1.name,
        n1_1.religion 
    [34mfrom[0m
        country_nations n1_0 
    [34mjoin[0m
        nation n1_1 
            [34mon[0m n1_1.id=n1_0.nation_id 
    [34mwhere[0m
        n1_0.country_id=?
2025-04-30 15:47:43 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 15:47:43 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 15:47:43 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-04-30 15:47:55 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=1
2025-04-30 15:47:55 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 15:47:55 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-04-30 15:47:55 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-04-30 15:55:48 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=1
2025-04-30 15:55:48 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        [34mdistinct[0m c1_0.id,
        c1_0.area,
        c1_0.capital,
        c2_0.country_id,
        c2_0.id,
        c2_0.area,
        c2_0.name,
        c2_0.population,
        c1_0.gdp,
        c1_0.name,
        n1_0.country_id,
        n1_1.id,
        n1_1.[34mlanguage[0m,
        n1_1.name,
        n1_1.religion,
        c1_0.population 
    [34mfrom[0m
        country c1_0 
    [34mleft[0m [34mjoin[0m
        country_nations n1_0 
            [34mon[0m c1_0.id=n1_0.country_id 
    [34mleft[0m [34mjoin[0m
        nation n1_1 
            [34mon[0m n1_1.id=n1_0.nation_id 
    [34mleft[0m [34mjoin[0m
        city c2_0 
            [34mon[0m c1_0.id=c2_0.country_id 
    [34mwhere[0m
        c1_0.id=?
2025-04-30 15:55:48 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.country_id,
        c1_0.id,
        c1_0.area,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        city c1_0 
    [34mwhere[0m
        c1_0.country_id=?
2025-04-30 15:55:48 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.nation_id,
        c1_1.id,
        c1_1.area,
        c1_1.capital,
        c1_1.gdp,
        c1_1.name,
        c1_1.population 
    [34mfrom[0m
        country_nations c1_0 
    [34mjoin[0m
        country c1_1 
            [34mon[0m c1_1.id=c1_0.country_id 
    [34mwhere[0m
        c1_0.nation_id=?
2025-04-30 15:55:48 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-04-30 15:55:48 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-04-30 15:55:48 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-04-30 15:55:53 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=1
2025-04-30 15:55:53 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-04-30 15:55:53 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-04-30 15:55:53 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-04-30 15:55:55 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=1
2025-04-30 15:55:55 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-04-30 15:55:55 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-04-30 15:55:55 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-04-30 15:56:06 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), args=1
2025-04-30 15:56:06 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:56:06 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.id,
        c1_0.area,
        c1_0.capital,
        c1_0.gdp,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        country c1_0 
    [34mwhere[0m
        c1_0.id=?
2025-04-30 15:56:06 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.country_id,
        c1_0.id,
        c1_0.area,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        city c1_0 
    [34mwhere[0m
        c1_0.country_id=?
2025-04-30 15:56:06 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.country_id,
        c1_0.id,
        c1_0.area,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        city c1_0 
    [34mwhere[0m
        c1_0.country_id=?
2025-04-30 15:56:06 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        n1_0.country_id,
        n1_1.id,
        n1_1.[34mlanguage[0m,
        n1_1.name,
        n1_1.religion 
    [34mfrom[0m
        country_nations n1_0 
    [34mjoin[0m
        nation n1_1 
            [34mon[0m n1_1.id=n1_0.nation_id 
    [34mwhere[0m
        n1_0.country_id=?
2025-04-30 15:56:06 | DEBUG | org.hibernate.SQL - 
    [34mdelete[0m 
    [34mfrom[0m
        country_nations 
    [34mwhere[0m
        country_id=?
2025-04-30 15:56:06 | DEBUG | org.hibernate.SQL - 
    [34mdelete[0m 
    [34mfrom[0m
        country 
    [34mwhere[0m
        id=?
2025-04-30 15:56:06 | WARN  | o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 23503
2025-04-30 15:56:06 | ERROR | o.h.e.jdbc.spi.SqlExceptionHelper - ERROR: update or delete on table "country" violates foreign key constraint "fkrpd7j1p7yxr784adkx4pyepba" on table "city"
  Подробности: Key (id)=(1) is still referenced from table "city".
2025-04-30 15:56:06 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), exception: could not execute statement [ERROR: update or delete on table "country" violates foreign key constraint "fkrpd7j1p7yxr784adkx4pyepba" on table "city"
  Подробности: Key (id)=(1) is still referenced from table "city".] [delete from country where id=?]; SQL [delete from country where id=?]; constraint [fkrpd7j1p7yxr784adkx4pyepba]
2025-04-30 15:56:06 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-04-30 15:56:06 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 7
2025-04-30 15:56:17 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=1
2025-04-30 15:56:17 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        [34mdistinct[0m c1_0.id,
        c1_0.area,
        c1_0.capital,
        c2_0.country_id,
        c2_0.id,
        c2_0.area,
        c2_0.name,
        c2_0.population,
        c1_0.gdp,
        c1_0.name,
        n1_0.country_id,
        n1_1.id,
        n1_1.[34mlanguage[0m,
        n1_1.name,
        n1_1.religion,
        c1_0.population 
    [34mfrom[0m
        country c1_0 
    [34mleft[0m [34mjoin[0m
        country_nations n1_0 
            [34mon[0m c1_0.id=n1_0.country_id 
    [34mleft[0m [34mjoin[0m
        nation n1_1 
            [34mon[0m n1_1.id=n1_0.nation_id 
    [34mleft[0m [34mjoin[0m
        city c2_0 
            [34mon[0m c1_0.id=c2_0.country_id 
    [34mwhere[0m
        c1_0.id=?
2025-04-30 15:56:17 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.country_id,
        c1_0.id,
        c1_0.area,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        city c1_0 
    [34mwhere[0m
        c1_0.country_id=?
2025-04-30 15:56:17 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.nation_id,
        c1_1.id,
        c1_1.area,
        c1_1.capital,
        c1_1.gdp,
        c1_1.name,
        c1_1.population 
    [34mfrom[0m
        country_nations c1_0 
    [34mjoin[0m
        country c1_1 
            [34mon[0m c1_1.id=c1_0.country_id 
    [34mwhere[0m
        c1_0.nation_id=?
2025-04-30 15:56:17 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-04-30 15:56:17 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-04-30 15:56:17 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 8
2025-04-30 15:57:01 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), args=1
2025-04-30 15:57:01 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 15:57:01 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.id,
        c1_0.area,
        c1_0.capital,
        c1_0.gdp,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        country c1_0 
    [34mwhere[0m
        c1_0.id=?
2025-04-30 15:57:01 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.country_id,
        c1_0.id,
        c1_0.area,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        city c1_0 
    [34mwhere[0m
        c1_0.country_id=?
2025-04-30 15:57:01 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.country_id,
        c1_0.id,
        c1_0.area,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        city c1_0 
    [34mwhere[0m
        c1_0.country_id=?
2025-04-30 15:57:01 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        n1_0.country_id,
        n1_1.id,
        n1_1.[34mlanguage[0m,
        n1_1.name,
        n1_1.religion 
    [34mfrom[0m
        country_nations n1_0 
    [34mjoin[0m
        nation n1_1 
            [34mon[0m n1_1.id=n1_0.nation_id 
    [34mwhere[0m
        n1_0.country_id=?
2025-04-30 15:57:01 | DEBUG | org.hibernate.SQL - 
    [34mdelete[0m 
    [34mfrom[0m
        country_nations 
    [34mwhere[0m
        country_id=?
2025-04-30 15:57:01 | DEBUG | org.hibernate.SQL - 
    [34mdelete[0m 
    [34mfrom[0m
        country 
    [34mwhere[0m
        id=?
2025-04-30 15:57:01 | WARN  | o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 23503
2025-04-30 15:57:01 | ERROR | o.h.e.jdbc.spi.SqlExceptionHelper - ERROR: update or delete on table "country" violates foreign key constraint "fkrpd7j1p7yxr784adkx4pyepba" on table "city"
  Подробности: Key (id)=(1) is still referenced from table "city".
2025-04-30 15:57:01 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), exception: could not execute statement [ERROR: update or delete on table "country" violates foreign key constraint "fkrpd7j1p7yxr784adkx4pyepba" on table "city"
  Подробности: Key (id)=(1) is still referenced from table "city".] [delete from country where id=?]; SQL [delete from country where id=?]; constraint [fkrpd7j1p7yxr784adkx4pyepba]
2025-04-30 15:57:01 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-04-30 15:57:01 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 9
2025-04-30 15:58:28 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=1
2025-04-30 15:58:28 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        [34mdistinct[0m c1_0.id,
        c1_0.area,
        c1_0.capital,
        c2_0.country_id,
        c2_0.id,
        c2_0.area,
        c2_0.name,
        c2_0.population,
        c1_0.gdp,
        c1_0.name,
        n1_0.country_id,
        n1_1.id,
        n1_1.[34mlanguage[0m,
        n1_1.name,
        n1_1.religion,
        c1_0.population 
    [34mfrom[0m
        country c1_0 
    [34mleft[0m [34mjoin[0m
        country_nations n1_0 
            [34mon[0m c1_0.id=n1_0.country_id 
    [34mleft[0m [34mjoin[0m
        nation n1_1 
            [34mon[0m n1_1.id=n1_0.nation_id 
    [34mleft[0m [34mjoin[0m
        city c2_0 
            [34mon[0m c1_0.id=c2_0.country_id 
    [34mwhere[0m
        c1_0.id=?
2025-04-30 15:58:28 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.country_id,
        c1_0.id,
        c1_0.area,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        city c1_0 
    [34mwhere[0m
        c1_0.country_id=?
2025-04-30 15:58:28 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.nation_id,
        c1_1.id,
        c1_1.area,
        c1_1.capital,
        c1_1.gdp,
        c1_1.name,
        c1_1.population 
    [34mfrom[0m
        country_nations c1_0 
    [34mjoin[0m
        country c1_1 
            [34mon[0m c1_1.id=c1_0.country_id 
    [34mwhere[0m
        c1_0.nation_id=?
2025-04-30 15:58:28 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-04-30 15:58:28 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-04-30 15:58:28 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 10
2025-04-30 15:58:31 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=1
2025-04-30 15:58:31 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-04-30 15:58:31 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-04-30 15:58:31 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 11
2025-04-30 15:58:47 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-30 15:58:47 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 15:58:47 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-30 15:58:47 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-30 15:58:50 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-30 15:58:50 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 22379 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-04-30 15:58:50 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-30 15:58:50 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-30 15:58:50 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 22 ms. Found 3 JPA repository interfaces.
2025-04-30 15:58:51 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-30 15:58:51 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-30 15:58:51 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-30 15:58:51 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-30 15:58:51 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-30 15:58:51 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 801 ms
2025-04-30 15:58:51 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-30 15:58:51 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-30 15:58:51 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-30 15:58:51 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-30 15:58:51 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-30 15:58:51 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@5d3b6585
2025-04-30 15:58:51 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-30 15:58:51 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-30 15:58:51 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 15:58:51 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-30 15:58:52 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-30 15:58:53 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-30 15:58:53 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-30 15:58:53 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.482 seconds (process running for 3.84)
2025-04-30 15:58:54 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-30 15:58:54 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-30 15:58:54 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-30 15:58:54 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=1
2025-04-30 15:58:54 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        [34mdistinct[0m c1_0.id,
        c1_0.area,
        c1_0.capital,
        c2_0.country_id,
        c2_0.id,
        c2_0.area,
        c2_0.name,
        c2_0.population,
        c1_0.gdp,
        c1_0.name,
        n1_0.country_id,
        n1_1.id,
        n1_1.[34mlanguage[0m,
        n1_1.name,
        n1_1.religion,
        c1_0.population 
    [34mfrom[0m
        country c1_0 
    [34mleft[0m [34mjoin[0m
        country_nations n1_0 
            [34mon[0m c1_0.id=n1_0.country_id 
    [34mleft[0m [34mjoin[0m
        nation n1_1 
            [34mon[0m n1_1.id=n1_0.nation_id 
    [34mleft[0m [34mjoin[0m
        city c2_0 
            [34mon[0m c1_0.id=c2_0.country_id 
    [34mwhere[0m
        c1_0.id=?
2025-04-30 15:58:54 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.country_id,
        c1_0.id,
        c1_0.area,
        c1_0.name,
        c1_0.population 
    [34mfrom[0m
        city c1_0 
    [34mwhere[0m
        c1_0.country_id=?
2025-04-30 15:58:54 | DEBUG | org.hibernate.SQL - 
    [34mselect[0m
        c1_0.nation_id,
        c1_1.id,
        c1_1.area,
        c1_1.capital,
        c1_1.gdp,
        c1_1.name,
        c1_1.population 
    [34mfrom[0m
        country_nations c1_0 
    [34mjoin[0m
        country c1_1 
            [34mon[0m c1_1.id=c1_0.country_id 
    [34mwhere[0m
        c1_0.nation_id=?
2025-04-30 15:58:54 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-04-30 15:58:54 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-04-30 15:58:54 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-04-30 15:59:03 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=1
2025-04-30 15:59:03 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-04-30 15:59:03 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-04-30 15:59:03 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-04-30 15:59:24 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-30 15:59:24 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 15:59:24 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-30 15:59:24 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-30 15:59:25 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-30 15:59:25 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 22411 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-04-30 15:59:25 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-30 15:59:26 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-30 15:59:26 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19 ms. Found 3 JPA repository interfaces.
2025-04-30 15:59:26 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-30 15:59:26 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-30 15:59:26 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-30 15:59:26 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-30 15:59:26 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-30 15:59:26 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 716 ms
2025-04-30 15:59:26 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-30 15:59:26 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-30 15:59:26 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-30 15:59:26 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-30 15:59:26 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-30 15:59:26 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@38cb1606
2025-04-30 15:59:26 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-30 15:59:27 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-30 15:59:27 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 15:59:27 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-30 15:59:27 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-30 15:59:28 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-30 15:59:28 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-30 15:59:28 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.117 seconds (process running for 3.493)
2025-04-30 15:59:36 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-30 15:59:36 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-30 15:59:36 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-30 15:59:36 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=1
2025-04-30 15:59:37 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 15:59:37 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-04-30 15:59:37 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-04-30 15:59:37 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-04-30 15:59:43 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=1
2025-04-30 15:59:43 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-04-30 15:59:43 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-04-30 15:59:43 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-04-30 15:59:43 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-04-30 16:25:24 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), args=1
2025-04-30 16:25:24 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 16:25:24 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-04-30 16:25:24 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 16:25:24 | WARN  | o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 23503
2025-04-30 16:25:24 | ERROR | o.h.e.jdbc.spi.SqlExceptionHelper - ERROR: update or delete on table "country" violates foreign key constraint "fkrpd7j1p7yxr784adkx4pyepba" on table "city"
  Подробности: Key (id)=(1) is still referenced from table "city".
2025-04-30 16:25:24 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), exception: could not execute statement [ERROR: update or delete on table "country" violates foreign key constraint "fkrpd7j1p7yxr784adkx4pyepba" on table "city"
  Подробности: Key (id)=(1) is still referenced from table "city".] [delete from country where id=?]; SQL [delete from country where id=?]; constraint [fkrpd7j1p7yxr784adkx4pyepba]
2025-04-30 16:25:24 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-04-30 16:25:24 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-04-30 16:30:37 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-30 16:30:37 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 16:30:37 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-30 16:30:37 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-30 16:30:39 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-30 16:30:39 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 23396 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-04-30 16:30:39 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-30 16:30:39 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-30 16:30:39 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 21 ms. Found 3 JPA repository interfaces.
2025-04-30 16:30:40 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-30 16:30:40 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-30 16:30:40 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-30 16:30:40 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-30 16:30:40 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-30 16:30:40 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 804 ms
2025-04-30 16:30:40 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-30 16:30:40 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-30 16:30:40 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-30 16:30:40 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-30 16:30:40 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-30 16:30:40 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@38cb1606
2025-04-30 16:30:40 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-30 16:30:41 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-30 16:30:41 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 16:30:41 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-30 16:30:41 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-30 16:30:42 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-30 16:30:42 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-30 16:30:42 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.45 seconds (process running for 3.95)
2025-04-30 16:30:43 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-30 16:30:43 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-30 16:30:43 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-30 16:30:43 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), args=1
2025-04-30 16:30:43 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 16:30:43 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-04-30 16:30:43 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-04-30 16:30:43 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-04-30 16:30:43 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-04-30 16:30:53 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=1
2025-04-30 16:30:53 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-04-30 16:30:53 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), exception: Country not found
2025-04-30 16:30:53 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-04-30 16:30:53 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-04-30 16:31:06 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-04-30 16:31:06 | INFO  | org.example.service.CountryService - 🔄 Fetched 4 countries from DB and cached
2025-04-30 16:31:06 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-04-30 16:31:06 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-04-30 16:31:06 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-04-30 16:31:18 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-04-30 16:31:18 | INFO  | org.example.service.CountryService - ✅ Retrieved 4 countries from cache
2025-04-30 16:31:18 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-04-30 16:31:18 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-04-30 16:31:18 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-04-30 16:31:26 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-04-30 16:31:26 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 16:31:26 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 16:31:26 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 16:31:26 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-04-30 16:31:46 | WARN  | o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Failure in @ExceptionHandler org.example.exception.ExceptionManager#objectNotFoundException(ObjectNotFoundException, WebRequest)
java.lang.IllegalStateException: Could not resolve parameter [0] in public org.springframework.http.ResponseEntity<org.example.exception.ErrorMessage> org.example.exception.ExceptionManager.objectNotFoundException(org.example.exception.ObjectNotFoundException,org.springframework.web.context.request.WebRequest): No suitable resolver
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:222)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:178)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:432)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:74)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:175)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:80)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1357)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1160)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-04-30 16:31:46 | WARN  | o.s.w.s.m.s.DefaultHandlerExceptionResolver - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `java.util.ArrayList<org.example.model.City>` from Object value (token `JsonToken.START_OBJECT`)]
2025-04-30 16:33:34 | WARN  | o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Failure in @ExceptionHandler org.example.exception.ExceptionManager#objectNotFoundException(ObjectNotFoundException, WebRequest)
java.lang.IllegalStateException: Could not resolve parameter [0] in public org.springframework.http.ResponseEntity<org.example.exception.ErrorMessage> org.example.exception.ExceptionManager.objectNotFoundException(org.example.exception.ObjectNotFoundException,org.springframework.web.context.request.WebRequest): No suitable resolver
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:222)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:178)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:432)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:74)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:175)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:80)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1357)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1160)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-04-30 16:33:34 | WARN  | o.s.w.s.m.s.DefaultHandlerExceptionResolver - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `java.util.ArrayList<org.example.model.City>` from Object value (token `JsonToken.START_OBJECT`)]
2025-04-30 16:33:39 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List)), args=2,[City(id=null, name=Minsk, population=2000000.0, areaSquareKm=409.5, country=null), City(id=null, name=Grodno, population=370000.0, areaSquareKm=142.1, country=null)]
2025-04-30 16:33:39 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 44) to country 'Belarus' (ID: 2)
2025-04-30 16:33:39 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 2). Action: ADD
2025-04-30 16:33:39 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 45) to country 'Belarus' (ID: 2)
2025-04-30 16:33:39 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 2). Action: ADD
2025-04-30 16:33:39 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-04-30 16:33:39 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-04-30 16:33:39 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-04-30 16:33:49 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-04-30 16:33:49 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-04-30 16:33:49 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 16:33:49 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 16:33:49 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 7
2025-04-30 16:33:54 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-04-30 16:33:54 | INFO  | org.example.service.CountryService - ✅ Retrieved 4 countries from cache
2025-04-30 16:33:54 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-04-30 16:33:54 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-04-30 16:33:54 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 8
2025-04-30 16:34:27 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-04-30 16:34:27 | INFO  | org.example.service.CityService - Getting cities from cache
2025-04-30 16:34:27 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 16:34:27 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-04-30 16:34:27 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 9
2025-04-30 16:35:14 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-30 16:35:14 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 16:35:14 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-30 16:35:14 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-30 16:35:16 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-30 16:35:16 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 23525 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-04-30 16:35:16 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-30 16:35:16 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-30 16:35:16 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19 ms. Found 3 JPA repository interfaces.
2025-04-30 16:35:16 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-30 16:35:16 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-30 16:35:16 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-30 16:35:16 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-30 16:35:16 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-30 16:35:16 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 728 ms
2025-04-30 16:35:16 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-30 16:35:16 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-30 16:35:16 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-30 16:35:17 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-30 16:35:17 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-30 16:35:17 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@2b99c937
2025-04-30 16:35:17 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-30 16:35:17 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-30 16:35:17 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 16:35:17 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-30 16:35:17 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-30 16:35:19 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-30 16:35:19 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-30 16:35:19 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.323 seconds (process running for 3.671)
2025-04-30 16:35:23 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-04-30 16:35:23 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-04-30 16:35:23 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-04-30 16:35:23 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), args=1
2025-04-30 16:35:23 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-04-30 16:35:23 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), exception: Country not found with ID: 1
2025-04-30 16:35:23 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-04-30 16:35:23 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-04-30 16:35:31 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), args=3
2025-04-30 16:35:31 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 3
2025-04-30 16:35:31 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 3
2025-04-30 16:35:31 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-04-30 16:35:31 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-04-30 16:35:31 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-04-30 16:35:40 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-04-30 16:35:40 | INFO  | org.example.service.CountryService - 🔄 Fetched 3 countries from DB and cached
2025-04-30 16:35:40 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-04-30 16:35:40 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-04-30 16:35:40 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-04-30 16:40:22 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-04-30 16:40:22 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 16:40:22 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-04-30 16:40:22 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-04-30 16:40:24 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-04-30 16:40:24 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 23668 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-04-30 16:40:24 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-04-30 16:40:24 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-04-30 16:40:24 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19 ms. Found 3 JPA repository interfaces.
2025-04-30 16:40:24 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-04-30 16:40:24 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-04-30 16:40:24 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-04-30 16:40:24 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-04-30 16:40:24 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-04-30 16:40:24 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 771 ms
2025-04-30 16:40:25 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-04-30 16:40:25 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-04-30 16:40:25 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-04-30 16:40:25 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-04-30 16:40:25 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-04-30 16:40:25 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@1029cf9
2025-04-30 16:40:25 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-04-30 16:40:25 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-04-30 16:40:25 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-04-30 16:40:25 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-04-30 16:40:26 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-04-30 16:40:27 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-04-30 16:40:27 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-04-30 16:40:27 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.277 seconds (process running for 3.668)
2025-04-30 16:55:00 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=6m35s241ms).
2025-04-30 17:27:01 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=32m1s224ms).
2025-04-30 18:49:30 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h22m28s61ms).
2025-04-30 19:52:02 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h2m32s773ms).
2025-04-30 21:07:12 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h15m9s860ms).
2025-04-30 21:48:15 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=41m2s406ms).
2025-04-30 22:53:27 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h5m12s537ms).
2025-05-01 00:19:28 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h26m917ms).
2025-05-01 01:10:32 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=51m3s932ms).
2025-05-01 02:30:19 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h19m47s451ms).
2025-05-01 03:58:30 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h28m10s251ms).
2025-05-01 05:38:18 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h39m48s250ms).
2025-05-01 06:58:54 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h20m35s926ms).
2025-05-01 08:19:00 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h20m6s257ms).
2025-05-01 09:48:45 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h29m45s277ms).
2025-05-01 10:24:15 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=35m29s172ms).
2025-05-01 11:39:57 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h15m42s709ms).
2025-05-01 12:51:55 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h11m57s387ms).
2025-05-01 14:19:24 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h27m29s83ms).
2025-05-01 15:27:16 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h7m52s688ms).
2025-05-01 16:43:04 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h15m47s779ms).
2025-05-01 17:29:35 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=46m30s440ms).
2025-05-01 18:58:05 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h28m30s304ms).
2025-05-01 19:59:11 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h1m5s936ms).
2025-05-01 21:00:22 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h1m10s764ms).
2025-05-01 21:52:17 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=51m55s494ms).
2025-05-01 22:49:07 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=56m49s587ms).
2025-05-02 00:03:21 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h14m14s466ms).
2025-05-02 01:20:15 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h16m53s854ms).
2025-05-02 02:37:00 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h16m44s462ms).
2025-05-02 04:15:04 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h38m4s455ms).
2025-05-02 05:37:29 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h22m24s909ms).
2025-05-02 07:00:11 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h22m41s867ms).
2025-05-02 08:41:41 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h41m30s142ms).
2025-05-02 09:11:44 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=30m3s20ms).
2025-05-02 09:32:47 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m33s385ms).
2025-05-02 09:36:16 | WARN  | javax.management.remote.misc - The server has decided to close this client connection.
2025-05-02 09:52:50 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m32s785ms).
2025-05-02 10:02:08 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=6m17s386ms).
2025-05-02 10:18:11 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m33s572ms).
2025-05-02 11:06:04 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=46m22s687ms).
2025-05-02 11:59:08 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=53m4s410ms).
2025-05-02 12:01:12 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=2m3s664ms).
2025-05-02 12:31:06 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=10m23s735ms).
2025-05-02 12:48:50 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=17m44s417ms).
2025-05-02 13:04:38 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m47s462ms).
2025-05-02 13:17:24 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=12m45s895ms).
2025-05-02 13:18:56 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-02 13:18:56 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-02 13:18:56 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-02 13:18:56 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-02 13:18:57 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-02 13:18:57 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 26235 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-02 13:18:57 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-02 13:18:58 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-02 13:18:58 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 21 ms. Found 3 JPA repository interfaces.
2025-05-02 13:18:58 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-02 13:18:58 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-02 13:18:58 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-02 13:18:58 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-02 13:18:58 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-02 13:18:58 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 771 ms
2025-05-02 13:18:58 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-02 13:18:58 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-02 13:18:58 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-02 13:18:59 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-02 13:18:59 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-02 13:18:59 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@716ae973
2025-05-02 13:18:59 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-02 13:18:59 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-02 13:18:59 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-02 13:18:59 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-02 13:18:59 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-02 13:19:01 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-02 13:19:01 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-02 13:19:01 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.27 seconds (process running for 3.743)
2025-05-02 13:23:14 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-02 13:23:14 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-02 13:23:14 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 12 ms
2025-05-02 13:23:14 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-02 13:23:14 | INFO  | org.example.service.CountryService - 🔄 Fetched 3 countries from DB and cached
2025-05-02 13:23:14 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 13:23:14 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 13:23:14 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-02 13:23:21 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-02 13:23:21 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-02 13:23:21 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:23:21 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:23:21 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-02 13:23:44 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=1
2025-05-02 13:23:44 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-02 13:23:44 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-02 13:23:44 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-05-02 13:23:49 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=2
2025-05-02 13:23:49 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-02 13:23:49 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-02 13:23:49 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-05-02 13:23:58 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List)), args=2,[City(id=null, name=Minsk, population=2000000.0, areaSquareKm=409.5, country=null), City(id=null, name=Grodno, population=370000.0, areaSquareKm=142.1, country=null)]
2025-05-02 13:23:58 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 46) to country 'Belarus' (ID: 2)
2025-05-02 13:23:58 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 2). Action: ADD
2025-05-02 13:23:58 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 47) to country 'Belarus' (ID: 2)
2025-05-02 13:23:58 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 2). Action: ADD
2025-05-02 13:23:58 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-02 13:23:58 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-02 13:23:58 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-05-02 13:24:01 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-02 13:24:01 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-02 13:24:01 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:24:01 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:24:01 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-05-02 13:24:12 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), args=2
2025-05-02 13:24:12 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 2
2025-05-02 13:24:12 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 2
2025-05-02 13:24:12 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-02 13:24:12 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-02 13:24:12 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 7
2025-05-02 13:24:19 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-02 13:24:19 | INFO  | org.example.service.CountryService - 🔄 Fetched 2 countries from DB and cached
2025-05-02 13:24:19 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 13:24:19 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 13:24:19 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 8
2025-05-02 13:24:24 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-02 13:24:24 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-02 13:24:24 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:24:24 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:24:24 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 9
2025-05-02 13:24:48 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-02 13:24:48 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-02 13:24:48 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-02 13:24:48 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-02 13:24:50 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-02 13:24:50 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 26679 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-02 13:24:50 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-02 13:24:51 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-02 13:24:51 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19 ms. Found 3 JPA repository interfaces.
2025-05-02 13:24:51 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-02 13:24:51 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-02 13:24:51 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-02 13:24:51 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-02 13:24:51 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-02 13:24:51 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 706 ms
2025-05-02 13:24:51 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-02 13:24:51 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-02 13:24:51 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-02 13:24:51 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-02 13:24:51 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-02 13:24:51 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@655909e2
2025-05-02 13:24:51 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-02 13:24:52 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-02 13:24:52 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-02 13:24:52 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-02 13:24:52 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-02 13:24:53 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-02 13:24:53 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-02 13:24:53 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.189 seconds (process running for 3.532)
2025-05-02 13:24:54 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-02 13:24:54 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-02 13:24:54 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-02 13:24:54 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-02 13:24:54 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-02 13:24:54 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:24:54 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:24:54 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-02 13:25:32 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-02 13:25:32 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-02 13:25:32 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-02 13:25:32 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-02 13:25:33 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-02 13:25:34 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 26703 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-02 13:25:34 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-02 13:25:34 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-02 13:25:34 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 20 ms. Found 3 JPA repository interfaces.
2025-05-02 13:25:34 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-02 13:25:34 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-02 13:25:34 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-02 13:25:34 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-02 13:25:34 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-02 13:25:34 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 734 ms
2025-05-02 13:25:34 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-02 13:25:34 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-02 13:25:34 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-02 13:25:34 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-02 13:25:35 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-02 13:25:35 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@2b99c937
2025-05-02 13:25:35 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-02 13:25:35 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-02 13:25:35 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-02 13:25:35 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-02 13:25:35 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-02 13:25:37 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-02 13:25:37 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-02 13:25:37 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.15 seconds (process running for 3.485)
2025-05-02 13:25:54 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-02 13:25:54 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-02 13:25:54 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-02 13:25:54 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-02 13:25:54 | INFO  | org.example.service.CountryService - 🔄 Fetched 2 countries from DB and cached
2025-05-02 13:25:54 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 13:25:54 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 13:25:54 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-02 13:26:10 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List)), args=4,[City(id=null, name=Minsk, population=2000000.0, areaSquareKm=409.5, country=null), City(id=null, name=Grodno, population=370000.0, areaSquareKm=142.1, country=null)]
2025-05-02 13:26:10 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 48) to country 'Russia' (ID: 4)
2025-05-02 13:26:10 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Russia' (ID: 4). Action: ADD
2025-05-02 13:26:10 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 49) to country 'Russia' (ID: 4)
2025-05-02 13:26:10 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Russia' (ID: 4). Action: ADD
2025-05-02 13:26:10 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-02 13:26:10 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-02 13:26:10 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-02 13:26:17 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-02 13:26:17 | INFO  | org.example.service.CountryService - ✅ Retrieved 2 countries from cache
2025-05-02 13:26:17 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 13:26:17 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 13:26:17 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-05-02 13:26:21 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), args=4
2025-05-02 13:26:21 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 4
2025-05-02 13:26:21 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 4
2025-05-02 13:26:21 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-02 13:26:21 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-02 13:26:21 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-05-02 13:26:24 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-02 13:26:24 | INFO  | org.example.service.CountryService - 🔄 Fetched 1 countries from DB and cached
2025-05-02 13:26:24 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 13:26:24 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 13:26:24 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-05-02 13:26:28 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-02 13:26:28 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-02 13:26:28 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:26:28 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:26:28 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-05-02 13:26:29 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-02 13:26:29 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-02 13:26:29 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:26:29 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:26:29 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 7
2025-05-02 13:26:30 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-02 13:26:30 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-02 13:26:30 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:26:30 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:26:30 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 8
2025-05-02 13:26:48 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=4
2025-05-02 13:26:48 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-02 13:26:48 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-02 13:26:48 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 9
2025-05-02 13:26:51 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-02 13:26:51 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-02 13:26:51 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:26:51 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:26:51 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 10
2025-05-02 13:26:56 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List)), args=4,[City(id=null, name=Minsk, population=2000000.0, areaSquareKm=409.5, country=null), City(id=null, name=Grodno, population=370000.0, areaSquareKm=142.1, country=null)]
2025-05-02 13:26:56 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List)), exception: country, which id 4 does not exist, you can't add new city
2025-05-02 13:26:56 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-02 13:26:56 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 11
2025-05-02 13:27:00 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List)), args=5,[City(id=null, name=Minsk, population=2000000.0, areaSquareKm=409.5, country=null), City(id=null, name=Grodno, population=370000.0, areaSquareKm=142.1, country=null)]
2025-05-02 13:27:00 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 50) to country 'Rossiya' (ID: 5)
2025-05-02 13:27:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Rossiya' (ID: 5). Action: ADD
2025-05-02 13:27:00 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 51) to country 'Rossiya' (ID: 5)
2025-05-02 13:27:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Rossiya' (ID: 5). Action: ADD
2025-05-02 13:27:00 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-02 13:27:00 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-02 13:27:00 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 12
2025-05-02 13:27:06 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=5
2025-05-02 13:27:06 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-02 13:27:06 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-02 13:27:06 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 13
2025-05-02 13:27:09 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-02 13:27:09 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-02 13:27:09 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:27:09 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:27:09 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 14
2025-05-02 13:27:16 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-02 13:27:16 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-02 13:27:16 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-02 13:27:16 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-02 13:27:17 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-02 13:27:17 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 26743 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-02 13:27:17 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-02 13:27:17 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-02 13:27:17 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19 ms. Found 3 JPA repository interfaces.
2025-05-02 13:27:18 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-02 13:27:18 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-02 13:27:18 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-02 13:27:18 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-02 13:27:18 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-02 13:27:18 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 762 ms
2025-05-02 13:27:18 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-02 13:27:18 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-02 13:27:18 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-02 13:27:18 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-02 13:27:18 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-02 13:27:18 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@26c59348
2025-05-02 13:27:18 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-02 13:27:19 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-02 13:27:19 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-02 13:27:19 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-02 13:27:19 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-02 13:27:20 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-02 13:27:20 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-02 13:27:20 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.349 seconds (process running for 3.688)
2025-05-02 13:27:30 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-02 13:27:30 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-02 13:27:30 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-02 13:27:30 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-02 13:27:30 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-02 13:27:30 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:27:30 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:27:30 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-02 13:27:37 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), args=5
2025-05-02 13:27:37 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 5
2025-05-02 13:27:37 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 5
2025-05-02 13:27:37 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-02 13:27:37 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-02 13:27:37 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-02 13:27:41 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=5
2025-05-02 13:27:41 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-02 13:27:41 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-02 13:27:41 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-05-02 13:27:44 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-02 13:27:44 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-02 13:27:44 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:27:44 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:27:44 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-05-02 13:27:49 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-02 13:27:49 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-02 13:27:49 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:27:49 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:27:49 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-05-02 13:27:58 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-02 13:27:58 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-02 13:27:58 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 13:27:58 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 13:27:58 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-05-02 13:28:01 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-02 13:28:01 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-02 13:28:01 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:28:01 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:28:01 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 7
2025-05-02 13:28:04 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-02 13:28:04 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-02 13:28:04 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-02 13:28:04 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-02 13:28:05 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-02 13:28:05 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 26767 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-02 13:28:05 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-02 13:28:06 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-02 13:28:06 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19 ms. Found 3 JPA repository interfaces.
2025-05-02 13:28:06 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-02 13:28:06 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-02 13:28:06 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-02 13:28:06 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-02 13:28:06 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-02 13:28:06 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 721 ms
2025-05-02 13:28:06 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-02 13:28:06 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-02 13:28:06 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-02 13:28:06 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-02 13:28:06 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-02 13:28:06 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@545604a9
2025-05-02 13:28:06 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-02 13:28:07 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-02 13:28:07 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-02 13:28:07 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-02 13:28:07 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-02 13:28:08 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-02 13:28:08 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-02 13:28:08 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.181 seconds (process running for 3.518)
2025-05-02 13:28:09 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-02 13:28:09 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-02 13:28:09 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-02 13:28:09 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-02 13:28:09 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-02 13:28:09 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:28:09 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:28:09 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-02 13:28:21 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-02 13:28:21 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-02 13:28:21 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-02 13:28:21 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-02 13:28:22 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-02 13:28:22 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 26792 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-02 13:28:22 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-02 13:28:23 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-02 13:28:23 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19 ms. Found 3 JPA repository interfaces.
2025-05-02 13:28:23 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-02 13:28:23 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-02 13:28:23 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-02 13:28:23 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-02 13:28:23 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-02 13:28:23 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 700 ms
2025-05-02 13:28:23 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-02 13:28:23 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-02 13:28:23 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-02 13:28:23 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-02 13:28:23 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-02 13:28:24 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@545604a9
2025-05-02 13:28:24 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-02 13:28:24 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-02 13:28:24 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-02 13:28:24 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-02 13:28:24 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-02 13:28:26 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-02 13:28:26 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-02 13:28:26 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.175 seconds (process running for 3.501)
2025-05-02 13:28:42 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-02 13:28:42 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-02 13:28:42 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-02 13:28:42 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country)), args=Country(id=null, name=Germany, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cities=[], nations=null)
2025-05-02 13:28:42 | INFO  | org.example.service.CountryService - ✨ Created country: Germany (ID: 6)
2025-05-02 13:28:42 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-02 13:28:42 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-02 13:28:42 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-02 13:28:50 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List)), args=6,[City(id=null, name=Minsk, population=2000000.0, areaSquareKm=409.5, country=null), City(id=null, name=Grodno, population=370000.0, areaSquareKm=142.1, country=null)]
2025-05-02 13:28:50 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 52) to country 'Germany' (ID: 6)
2025-05-02 13:28:50 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 6). Action: ADD
2025-05-02 13:28:50 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 53) to country 'Germany' (ID: 6)
2025-05-02 13:28:50 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 6). Action: ADD
2025-05-02 13:28:50 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-02 13:28:50 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-02 13:28:50 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-02 13:28:54 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-02 13:28:54 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-02 13:28:54 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:28:54 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:28:54 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-05-02 13:29:01 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), args=6
2025-05-02 13:29:01 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 6
2025-05-02 13:29:01 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 6
2025-05-02 13:29:01 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-02 13:29:01 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-02 13:29:01 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-05-02 13:29:04 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-02 13:29:04 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-02 13:29:04 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:29:04 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:29:04 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-05-02 13:29:09 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-02 13:29:09 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-02 13:29:09 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 13:29:09 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 13:29:09 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-05-02 13:29:15 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-02 13:29:15 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-02 13:29:15 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:29:15 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:29:15 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 7
2025-05-02 13:29:26 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-02 13:29:26 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-02 13:29:26 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-02 13:29:26 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-02 13:29:27 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-02 13:29:27 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 26824 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-02 13:29:27 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-02 13:29:27 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-02 13:29:27 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19 ms. Found 3 JPA repository interfaces.
2025-05-02 13:29:28 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-02 13:29:28 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-02 13:29:28 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-02 13:29:28 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-02 13:29:28 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-02 13:29:28 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 804 ms
2025-05-02 13:29:28 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-02 13:29:28 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-02 13:29:28 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-02 13:29:28 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-02 13:29:28 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-02 13:29:28 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@4aeaff64
2025-05-02 13:29:28 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-02 13:29:28 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-02 13:29:29 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-02 13:29:29 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-02 13:29:29 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-02 13:29:30 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-02 13:29:30 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-02 13:29:30 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.401 seconds (process running for 3.753)
2025-05-02 13:29:31 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-02 13:29:31 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-02 13:29:31 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-02 13:29:31 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-02 13:29:31 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-02 13:29:31 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:29:31 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:29:31 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-02 13:29:32 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-02 13:29:32 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-02 13:29:32 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:29:32 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:29:32 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-02 13:30:53 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-02 13:30:53 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-02 13:30:53 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-02 13:30:53 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-02 13:30:55 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-02 13:30:55 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 26885 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-02 13:30:55 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-02 13:30:56 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-02 13:30:56 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 18 ms. Found 3 JPA repository interfaces.
2025-05-02 13:30:56 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-02 13:30:56 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-02 13:30:56 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-02 13:30:56 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-02 13:30:56 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-02 13:30:56 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 744 ms
2025-05-02 13:30:56 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-02 13:30:56 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-02 13:30:56 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-02 13:30:56 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-02 13:30:56 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-02 13:30:56 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@4aeaff64
2025-05-02 13:30:56 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-02 13:30:57 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-02 13:30:57 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-02 13:30:57 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-02 13:30:57 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-02 13:30:58 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-02 13:30:58 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-02 13:30:59 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.239 seconds (process running for 3.574)
2025-05-02 13:31:19 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-02 13:31:19 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-02 13:31:19 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-02 13:31:19 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country)), args=Country(id=null, name=Germany, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cities=[], nations=null)
2025-05-02 13:31:19 | INFO  | org.example.service.CountryService - ✨ Created country: Germany (ID: 7)
2025-05-02 13:31:19 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-02 13:31:19 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-02 13:31:19 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-02 13:31:22 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-02 13:31:22 | INFO  | org.example.service.CountryService - 🔄 Fetched 1 countries from DB and cached
2025-05-02 13:31:22 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 13:31:22 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 13:31:22 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-02 13:31:39 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=7
2025-05-02 13:31:39 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_7
2025-05-02 13:31:39 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-02 13:31:39 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-02 13:31:39 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-05-02 13:31:43 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=7
2025-05-02 13:31:43 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_7
2025-05-02 13:31:43 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-02 13:31:43 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-02 13:31:43 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-05-02 13:32:44 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List)), args=7,[City(id=null, name=Minsk, population=2000000.0, areaSquareKm=409.5, country=null), City(id=null, name=Grodno, population=370000.0, areaSquareKm=142.1, country=null)]
2025-05-02 13:32:44 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 54) to country 'Germany' (ID: 7)
2025-05-02 13:32:44 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 7). Action: ADD
2025-05-02 13:32:44 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 55) to country 'Germany' (ID: 7)
2025-05-02 13:32:44 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 7). Action: ADD
2025-05-02 13:32:44 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-02 13:32:44 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-02 13:32:44 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-05-02 13:32:47 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-02 13:32:47 | INFO  | org.example.service.CountryService - ✅ Retrieved 1 countries from cache
2025-05-02 13:32:47 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 13:32:47 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 13:32:47 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-05-02 13:32:51 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-02 13:32:51 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-02 13:32:51 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:32:51 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:32:51 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 7
2025-05-02 13:32:59 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), args=7
2025-05-02 13:32:59 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 7
2025-05-02 13:33:00 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 7
2025-05-02 13:33:00 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-02 13:33:00 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-02 13:33:00 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 8
2025-05-02 13:33:02 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-02 13:33:02 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-02 13:33:02 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 13:33:02 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 13:33:02 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 9
2025-05-02 13:33:14 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-02 13:33:14 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-02 13:33:14 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:33:14 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:33:14 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 10
2025-05-02 13:33:18 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-02 13:33:18 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-02 13:33:18 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-02 13:33:18 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-02 13:33:19 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-02 13:33:19 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 26952 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-02 13:33:19 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-02 13:33:19 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-02 13:33:19 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19 ms. Found 3 JPA repository interfaces.
2025-05-02 13:33:20 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-02 13:33:20 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-02 13:33:20 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-02 13:33:20 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-02 13:33:20 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-02 13:33:20 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 743 ms
2025-05-02 13:33:20 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-02 13:33:20 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-02 13:33:20 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-02 13:33:20 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-02 13:33:20 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-02 13:33:20 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@1c0e4262
2025-05-02 13:33:20 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-02 13:33:21 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-02 13:33:21 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-02 13:33:21 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-02 13:33:21 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-02 13:33:22 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-02 13:33:22 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-02 13:33:22 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.258 seconds (process running for 3.648)
2025-05-02 13:33:23 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-02 13:33:23 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-02 13:33:23 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-02 13:33:23 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-02 13:33:23 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-02 13:33:23 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:33:23 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:33:23 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-02 13:33:24 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-02 13:33:24 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-02 13:33:24 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:33:24 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:33:24 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-02 13:44:14 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-02 13:44:14 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-02 13:44:14 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-02 13:44:14 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-02 13:44:16 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-02 13:44:16 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 27311 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-02 13:44:16 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-02 13:44:16 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-02 13:44:16 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19 ms. Found 3 JPA repository interfaces.
2025-05-02 13:44:16 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-02 13:44:16 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-02 13:44:16 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-02 13:44:16 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-02 13:44:16 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-02 13:44:16 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 714 ms
2025-05-02 13:44:16 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-02 13:44:16 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-02 13:44:16 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-02 13:44:17 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-02 13:44:17 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-02 13:44:17 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@545604a9
2025-05-02 13:44:17 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-02 13:44:17 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-02 13:44:17 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-02 13:44:17 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-02 13:44:17 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-02 13:44:19 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-02 13:44:19 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-02 13:44:19 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.133 seconds (process running for 3.462)
2025-05-02 13:44:20 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-02 13:44:20 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-02 13:44:20 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-02 13:44:20 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-02 13:44:20 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-02 13:44:20 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:44:20 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:44:20 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-02 13:44:23 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country)), args=Country(id=null, name=Germany, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cities=[], nations=null)
2025-05-02 13:44:23 | INFO  | org.example.service.CountryService - ✨ Created country: Germany (ID: 8)
2025-05-02 13:44:23 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-02 13:44:23 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-02 13:44:23 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-02 13:44:26 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-02 13:44:26 | INFO  | org.example.service.CountryService - 🔄 Fetched 1 countries from DB and cached
2025-05-02 13:44:26 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 13:44:26 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 13:44:26 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-05-02 13:44:30 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List)), args=8,[City(id=null, name=Minsk, population=2000000.0, areaSquareKm=409.5, country=null), City(id=null, name=Grodno, population=370000.0, areaSquareKm=142.1, country=null)]
2025-05-02 13:44:30 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 56) to country 'Germany' (ID: 8)
2025-05-02 13:44:30 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 8). Action: ADD
2025-05-02 13:44:30 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 57) to country 'Germany' (ID: 8)
2025-05-02 13:44:30 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 8). Action: ADD
2025-05-02 13:44:30 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-02 13:44:30 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-02 13:44:30 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-05-02 13:44:38 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-02 13:44:38 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-02 13:44:38 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:44:38 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 13:44:38 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-05-02 13:44:42 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), args=8
2025-05-02 13:44:42 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 8
2025-05-02 13:44:42 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 8
2025-05-02 13:44:42 | WARN  | o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 23502
2025-05-02 13:44:42 | ERROR | o.h.e.jdbc.spi.SqlExceptionHelper - ERROR: null value in column "country_id" of relation "city" violates not-null constraint
  Подробности: Failing row contains (56, 409.5, Minsk, 2000000, null, null).
2025-05-02 13:44:42 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), exception: could not execute statement [ERROR: null value in column "country_id" of relation "city" violates not-null constraint
  Подробности: Failing row contains (56, 409.5, Minsk, 2000000, null, null).] [update city set area=?,country_id=?,name=?,population=? where id=?]; SQL [update city set area=?,country_id=?,name=?,population=? where id=?]; constraint [country_id" of relation "city]
2025-05-02 13:44:42 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-02 13:44:42 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-05-02 14:00:50 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m3s176ms).
2025-05-02 14:46:08 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-02 14:46:08 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-02 14:46:08 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-02 14:46:08 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-02 14:47:13 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-02 14:47:13 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 29280 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-02 14:47:13 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-02 14:47:13 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-02 14:47:13 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 23 ms. Found 3 JPA repository interfaces.
2025-05-02 14:47:13 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-02 14:47:13 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-02 14:47:13 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-02 14:47:13 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-02 14:47:13 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-02 14:47:13 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 784 ms
2025-05-02 14:47:13 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-02 14:47:13 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-02 14:47:13 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-02 14:47:14 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-02 14:47:14 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-02 14:47:14 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@716ae973
2025-05-02 14:47:14 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-02 14:47:14 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-02 14:47:14 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-02 14:47:14 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-02 14:47:15 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-02 14:47:16 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-02 14:47:16 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-02 14:47:16 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.518 seconds (process running for 3.873)
2025-05-02 14:47:57 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-02 14:47:57 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-02 14:47:57 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-02 14:47:57 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-02 14:47:59 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-02 14:47:59 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 29303 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-02 14:47:59 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-02 14:47:59 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-02 14:47:59 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 27 ms. Found 3 JPA repository interfaces.
2025-05-02 14:47:59 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-02 14:47:59 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-02 14:47:59 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-02 14:47:59 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-02 14:47:59 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-02 14:47:59 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 827 ms
2025-05-02 14:48:00 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-02 14:48:00 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-02 14:48:00 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-02 14:48:00 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-02 14:48:00 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-02 14:48:00 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@1171ba7e
2025-05-02 14:48:00 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-02 14:48:00 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-02 14:48:00 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-02 14:48:00 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-02 14:48:01 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-02 14:48:02 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-02 14:48:02 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-02 14:48:02 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.4 seconds (process running for 3.735)
2025-05-02 14:48:16 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-02 14:48:16 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-02 14:48:16 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-02 14:48:16 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country)), args=Country(id=null, name=Germany, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cities=[], nations=null)
2025-05-02 14:48:16 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Germany
2025-05-02 14:48:16 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country)), exception: Country exists
2025-05-02 14:48:16 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-02 14:48:16 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-02 14:48:23 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-02 14:48:23 | INFO  | org.example.service.CountryService - 🔄 Fetched 1 countries from DB and cached
2025-05-02 14:48:23 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 14:48:23 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 14:48:23 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-02 14:48:33 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-02 14:48:33 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-02 14:48:33 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 14:48:33 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 14:48:33 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-05-02 14:48:36 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), args=8
2025-05-02 14:48:36 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 8
2025-05-02 14:48:36 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 8
2025-05-02 14:48:36 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-02 14:48:36 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-02 14:48:36 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-05-02 14:48:39 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-02 14:48:39 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-02 14:48:39 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 14:48:39 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 14:48:39 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-05-02 14:48:45 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-02 14:48:46 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-02 14:48:46 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 14:48:46 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 14:48:46 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-05-02 14:48:48 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-02 14:48:48 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-02 14:48:48 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 14:48:48 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 14:48:48 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 7
2025-05-02 14:48:51 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-02 14:48:51 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-02 14:48:51 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-02 14:48:51 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-02 14:48:52 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-02 14:48:52 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 29327 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-02 14:48:52 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-02 14:48:52 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-02 14:48:52 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 22 ms. Found 3 JPA repository interfaces.
2025-05-02 14:48:53 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-02 14:48:53 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-02 14:48:53 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-02 14:48:53 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-02 14:48:53 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-02 14:48:53 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 828 ms
2025-05-02 14:48:53 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-02 14:48:53 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-02 14:48:53 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-02 14:48:53 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-02 14:48:53 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-02 14:48:53 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@56872fcb
2025-05-02 14:48:53 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-02 14:48:54 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-02 14:48:54 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-02 14:48:54 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-02 14:48:54 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-02 14:48:55 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-02 14:48:55 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-02 14:48:55 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.501 seconds (process running for 3.888)
2025-05-02 14:48:56 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-02 14:48:56 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-02 14:48:56 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-02 14:48:56 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-02 14:48:56 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-02 14:48:56 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 14:48:56 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 14:48:56 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-02 14:48:56 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-02 14:48:56 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-02 14:48:56 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 14:48:56 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 14:48:56 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-02 14:53:13 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-02 14:53:13 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-02 14:53:13 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 14:53:13 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 14:53:13 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-05-02 14:57:10 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-02 14:57:10 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-02 14:57:10 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-02 14:57:10 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-02 14:57:12 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-02 14:57:12 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 29626 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-02 14:57:12 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-02 14:57:12 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-02 14:57:12 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 20 ms. Found 3 JPA repository interfaces.
2025-05-02 14:57:13 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-02 14:57:13 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-02 14:57:13 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-02 14:57:13 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-02 14:57:13 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-02 14:57:13 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 734 ms
2025-05-02 14:57:13 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-02 14:57:13 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-02 14:57:13 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-02 14:57:13 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-02 14:57:13 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-02 14:57:13 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@403f7aa2
2025-05-02 14:57:13 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-02 14:57:14 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-02 14:57:14 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-02 14:57:14 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-02 14:57:14 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-02 14:57:15 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-02 14:57:15 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-02 14:57:15 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.124 seconds (process running for 3.468)
2025-05-02 14:57:17 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-02 14:57:17 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-02 14:57:17 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-02 14:57:17 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-02 14:57:17 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-02 14:57:17 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 14:57:17 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 14:57:17 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-02 14:57:19 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-02 14:57:19 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-02 14:57:19 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 14:57:19 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 14:57:19 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-02 14:57:22 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country)), args=Country(id=null, name=Germany, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cities=[], nations=null)
2025-05-02 14:57:22 | INFO  | org.example.service.CountryService - ✨ Created country: Germany (ID: 9)
2025-05-02 14:57:22 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-02 14:57:22 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-02 14:57:22 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-05-02 14:57:24 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-02 14:57:24 | INFO  | org.example.service.CountryService - 🔄 Fetched 1 countries from DB and cached
2025-05-02 14:57:24 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 14:57:24 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 14:57:24 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-05-02 14:57:33 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List)), args=9,[City(id=null, name=Minsk, population=2000000.0, areaSquareKm=409.5, country=null), City(id=null, name=Grodno, population=370000.0, areaSquareKm=142.1, country=null)]
2025-05-02 14:57:33 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 58) to country 'Germany' (ID: 9)
2025-05-02 14:57:33 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 9). Action: ADD
2025-05-02 14:57:33 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 59) to country 'Germany' (ID: 9)
2025-05-02 14:57:33 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 9). Action: ADD
2025-05-02 14:57:33 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-02 14:57:33 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-02 14:57:33 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-05-02 14:57:36 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-02 14:57:36 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-02 14:57:36 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 14:57:36 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 14:57:36 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-05-02 14:57:39 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-02 14:57:39 | INFO  | org.example.service.CountryService - ✅ Retrieved 1 countries from cache
2025-05-02 14:57:39 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 14:57:39 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 14:57:39 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 7
2025-05-02 14:57:43 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), args=9
2025-05-02 14:57:43 | WARN  | org.example.service.CountryService - Попытка удаления страны с ID: 9
2025-05-02 14:57:43 | INFO  | org.example.service.CountryService - 🗑️ Страна с ID: 9 удалена
2025-05-02 14:57:43 | WARN  | o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 23503
2025-05-02 14:57:43 | ERROR | o.h.e.jdbc.spi.SqlExceptionHelper - ERROR: update or delete on table "country" violates foreign key constraint "fkrpd7j1p7yxr784adkx4pyepba" on table "city"
  Подробности: Key (id)=(9) is still referenced from table "city".
2025-05-02 14:57:43 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), exception: could not execute statement [ERROR: update or delete on table "country" violates foreign key constraint "fkrpd7j1p7yxr784adkx4pyepba" on table "city"
  Подробности: Key (id)=(9) is still referenced from table "city".] [delete from country where id=?]; SQL [delete from country where id=?]; constraint [fkrpd7j1p7yxr784adkx4pyepba]
2025-05-02 14:57:43 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-02 14:57:43 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 8
2025-05-02 15:00:05 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-02 15:00:05 | WARN  | com.zaxxer.hikari.pool.PoolBase - HikariPool-1 - Failed to validate connection org.postgresql.jdbc.PgConnection@403f7aa2 (Соединение уже было закрыто). Possibly consider using a shorter maxLifetime value.
2025-05-02 15:00:05 | WARN  | com.zaxxer.hikari.pool.PoolBase - HikariPool-1 - Failed to validate connection org.postgresql.jdbc.PgConnection@19bddb01 (Соединение уже было закрыто). Possibly consider using a shorter maxLifetime value.
2025-05-02 15:00:05 | WARN  | com.zaxxer.hikari.pool.PoolBase - HikariPool-1 - Failed to validate connection org.postgresql.jdbc.PgConnection@27f403fe (Соединение уже было закрыто). Possibly consider using a shorter maxLifetime value.
2025-05-02 15:00:05 | WARN  | com.zaxxer.hikari.pool.PoolBase - HikariPool-1 - Failed to validate connection org.postgresql.jdbc.PgConnection@1d37d337 (Соединение уже было закрыто). Possibly consider using a shorter maxLifetime value.
2025-05-02 15:00:05 | WARN  | com.zaxxer.hikari.pool.PoolBase - HikariPool-1 - Failed to validate connection org.postgresql.jdbc.PgConnection@5f91421e (Соединение уже было закрыто). Possibly consider using a shorter maxLifetime value.
2025-05-02 15:00:05 | WARN  | com.zaxxer.hikari.pool.PoolBase - HikariPool-1 - Failed to validate connection org.postgresql.jdbc.PgConnection@2883ff3e (Соединение уже было закрыто). Possibly consider using a shorter maxLifetime value.
2025-05-02 15:00:05 | WARN  | com.zaxxer.hikari.pool.PoolBase - HikariPool-1 - Failed to validate connection org.postgresql.jdbc.PgConnection@2f6fe223 (Соединение уже было закрыто). Possibly consider using a shorter maxLifetime value.
2025-05-02 15:00:05 | WARN  | com.zaxxer.hikari.pool.PoolBase - HikariPool-1 - Failed to validate connection org.postgresql.jdbc.PgConnection@ce22292 (Соединение уже было закрыто). Possibly consider using a shorter maxLifetime value.
2025-05-02 15:00:05 | WARN  | com.zaxxer.hikari.pool.PoolBase - HikariPool-1 - Failed to validate connection org.postgresql.jdbc.PgConnection@59b610a2 (Соединение уже было закрыто). Possibly consider using a shorter maxLifetime value.
2025-05-02 15:00:05 | WARN  | com.zaxxer.hikari.pool.PoolBase - HikariPool-1 - Failed to validate connection org.postgresql.jdbc.PgConnection@6efb7ea5 (Соединение уже было закрыто). Possibly consider using a shorter maxLifetime value.
2025-05-02 15:00:05 | INFO  | org.example.service.CountryService - 🔄 Fetched 1 countries from DB and cached
2025-05-02 15:00:05 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 15:00:05 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 15:00:05 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 9
2025-05-02 15:00:13 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-02 15:00:13 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-02 15:00:13 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-02 15:00:13 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-02 15:00:14 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-02 15:00:14 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 29824 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-02 15:00:14 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-02 15:00:14 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-02 15:00:14 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 21 ms. Found 3 JPA repository interfaces.
2025-05-02 15:00:15 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-02 15:00:15 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-02 15:00:15 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-02 15:00:15 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-02 15:00:15 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-02 15:00:15 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 776 ms
2025-05-02 15:00:15 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-02 15:00:15 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-02 15:00:15 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-02 15:00:15 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-02 15:00:15 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-02 15:00:15 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@d949bc4
2025-05-02 15:00:15 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-02 15:00:15 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-02 15:00:15 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-02 15:00:15 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-02 15:00:16 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-02 15:00:17 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-02 15:00:17 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-02 15:00:17 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.347 seconds (process running for 3.716)
2025-05-02 15:00:17 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-02 15:00:17 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-02 15:00:17 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-02 15:00:17 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-02 15:00:17 | INFO  | org.example.service.CountryService - 🔄 Fetched 1 countries from DB and cached
2025-05-02 15:00:17 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 15:00:17 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 15:00:17 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-02 15:00:18 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-02 15:00:18 | INFO  | org.example.service.CountryService - ✅ Retrieved 1 countries from cache
2025-05-02 15:00:18 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 15:00:18 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 15:00:18 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-02 15:00:25 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=9
2025-05-02 15:00:25 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_9
2025-05-02 15:00:25 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-02 15:00:25 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-02 15:00:25 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-05-02 15:00:36 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=9
2025-05-02 15:00:36 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-02 15:00:36 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-02 15:00:36 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-05-02 15:00:48 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=9
2025-05-02 15:00:48 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-02 15:00:48 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-02 15:00:48 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-05-02 15:00:53 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), args=9
2025-05-02 15:00:53 | WARN  | org.example.service.CountryService - Попытка удаления страны с ID: 9
2025-05-02 15:00:53 | INFO  | org.example.service.CountryService - 🗑️ Страна с ID: 9 удалена
2025-05-02 15:00:53 | WARN  | o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 23503
2025-05-02 15:00:53 | ERROR | o.h.e.jdbc.spi.SqlExceptionHelper - ERROR: update or delete on table "country" violates foreign key constraint "fkrpd7j1p7yxr784adkx4pyepba" on table "city"
  Подробности: Key (id)=(9) is still referenced from table "city".
2025-05-02 15:00:53 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), exception: could not execute statement [ERROR: update or delete on table "country" violates foreign key constraint "fkrpd7j1p7yxr784adkx4pyepba" on table "city"
  Подробности: Key (id)=(9) is still referenced from table "city".] [delete from country where id=?]; SQL [delete from country where id=?]; constraint [fkrpd7j1p7yxr784adkx4pyepba]
2025-05-02 15:00:53 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-02 15:00:53 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-05-02 15:02:09 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-02 15:02:09 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-02 15:02:09 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-02 15:02:09 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-02 15:02:11 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-02 15:02:11 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 29907 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-02 15:02:11 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-02 15:02:11 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-02 15:02:11 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19 ms. Found 3 JPA repository interfaces.
2025-05-02 15:02:12 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-02 15:02:12 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-02 15:02:12 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-02 15:02:12 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-02 15:02:12 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-02 15:02:12 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 713 ms
2025-05-02 15:02:12 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-02 15:02:12 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-02 15:02:12 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-02 15:02:12 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-02 15:02:12 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-02 15:02:12 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@1de12397
2025-05-02 15:02:12 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-02 15:02:12 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-02 15:02:12 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-02 15:02:12 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-02 15:02:13 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-02 15:02:14 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-02 15:02:14 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-02 15:02:14 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.231 seconds (process running for 3.585)
2025-05-02 15:02:16 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-02 15:02:16 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-02 15:02:16 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-02 15:02:16 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-02 15:02:16 | INFO  | org.example.service.CountryService - 🔄 Fetched 1 countries from DB and cached
2025-05-02 15:02:16 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 15:02:16 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 15:02:16 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-02 15:02:18 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), args=9
2025-05-02 15:02:18 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 9
2025-05-02 15:02:19 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 9
2025-05-02 15:02:19 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-02 15:02:19 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-02 15:02:19 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-02 15:02:21 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-02 15:02:21 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-02 15:02:21 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 15:02:21 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 15:02:21 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-05-02 15:02:47 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country)), args=Country(id=null, name=Germany, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cities=[], nations=null)
2025-05-02 15:02:47 | INFO  | org.example.service.CountryService - ✨ Created country: Germany (ID: 10)
2025-05-02 15:02:47 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-02 15:02:47 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-02 15:02:47 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-05-02 15:02:58 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country)), args=Country(id=null, name=Германия, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cities=[], nations=null)
2025-05-02 15:02:58 | INFO  | org.example.service.CountryService - ✨ Created country: Германия (ID: 11)
2025-05-02 15:02:58 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-02 15:02:58 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-02 15:02:58 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-05-02 15:03:02 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-02 15:03:02 | INFO  | org.example.service.CountryService - 🔄 Fetched 2 countries from DB and cached
2025-05-02 15:03:02 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 15:03:02 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 15:03:02 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-05-02 15:03:08 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List)), args=10,[City(id=null, name=Minsk, population=2000000.0, areaSquareKm=409.5, country=null), City(id=null, name=Grodno, population=370000.0, areaSquareKm=142.1, country=null)]
2025-05-02 15:03:08 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 60) to country 'Germany' (ID: 10)
2025-05-02 15:03:08 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 10). Action: ADD
2025-05-02 15:03:08 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 61) to country 'Germany' (ID: 10)
2025-05-02 15:03:08 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 10). Action: ADD
2025-05-02 15:03:08 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-02 15:03:08 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-02 15:03:08 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 7
2025-05-02 15:03:10 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-02 15:03:10 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-02 15:03:10 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 15:03:10 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 15:03:10 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 8
2025-05-02 15:03:40 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-02 15:03:40 | INFO  | org.example.service.CountryService - ✅ Retrieved 2 countries from cache
2025-05-02 15:03:40 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 15:03:40 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 15:03:40 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 9
2025-05-02 15:03:45 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-02 15:03:45 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-02 15:03:45 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 15:03:45 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-02 15:03:45 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 10
2025-05-02 15:04:09 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String)), args=Berlin
2025-05-02 15:04:09 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-05-02 15:04:09 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-05-02 15:04:09 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 11
2025-05-02 15:04:15 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String)), args=Minsk
2025-05-02 15:04:15 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-05-02 15:04:15 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.SearchController.searchCountriesByCity(String))
2025-05-02 15:04:15 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 12
2025-05-02 15:08:51 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.updateCountry(Long,String,String,Double,Double,Double)), args=11
2025-05-02 15:08:51 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_11
2025-05-02 15:08:51 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 11
2025-05-02 15:08:51 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.updateCountry(Long,String,String,Double,Double,Double))
2025-05-02 15:08:51 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.updateCountry(Long,String,String,Double,Double,Double))
2025-05-02 15:08:51 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 13
2025-05-02 15:08:55 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-02 15:08:55 | INFO  | org.example.service.CountryService - 🔄 Fetched 2 countries from DB and cached
2025-05-02 15:08:55 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 15:08:55 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 15:08:55 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 14
2025-05-02 15:09:14 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.updateCountry(Long,String,String,Double,Double,Double)), args=11,Germany,Berlin,3.31002651E8,9833517.0,21.45
2025-05-02 15:09:14 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_11
2025-05-02 15:09:14 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Germany
2025-05-02 15:09:14 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CountryController.updateCountry(Long,String,String,Double,Double,Double)), exception: Name exists
2025-05-02 15:09:14 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.updateCountry(Long,String,String,Double,Double,Double))
2025-05-02 15:09:14 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 15
2025-05-02 15:09:25 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.updateCountry(Long,String,String,Double,Double,Double)), args=11,United States,Berlin,3.31002651E8,9833517.0,21.45
2025-05-02 15:09:25 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_11
2025-05-02 15:09:25 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 11
2025-05-02 15:09:25 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.updateCountry(Long,String,String,Double,Double,Double))
2025-05-02 15:09:25 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.updateCountry(Long,String,String,Double,Double,Double))
2025-05-02 15:09:25 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 16
2025-05-02 15:09:29 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-02 15:09:29 | INFO  | org.example.service.CountryService - 🔄 Fetched 2 countries from DB and cached
2025-05-02 15:09:29 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 15:09:29 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 15:09:29 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 17
2025-05-02 15:09:37 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.updateCountry(Long,String,String,Double,Double,Double)), args=12,United States,Berlin,3.31002651E8,9833517.0,21.45
2025-05-02 15:09:37 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 12
2025-05-02 15:09:37 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CountryController.updateCountry(Long,String,String,Double,Double,Double)), exception: Country not found
2025-05-02 15:09:37 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.updateCountry(Long,String,String,Double,Double,Double))
2025-05-02 15:09:37 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 18
2025-05-02 15:10:05 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-02 15:10:05 | INFO  | org.example.service.CountryService - ✅ Retrieved 2 countries from cache
2025-05-02 15:10:05 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 15:10:05 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 15:10:05 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 19
2025-05-02 15:14:27 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-02 15:14:27 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-02 15:14:27 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-02 15:14:27 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-02 15:14:29 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-02 15:14:29 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 30415 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-02 15:14:29 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-02 15:14:29 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-02 15:14:30 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19 ms. Found 3 JPA repository interfaces.
2025-05-02 15:14:30 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-02 15:14:30 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-02 15:14:30 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-02 15:14:30 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-02 15:14:30 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-02 15:14:30 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 710 ms
2025-05-02 15:14:30 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-02 15:14:30 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-02 15:14:30 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-02 15:14:30 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-02 15:14:30 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-02 15:14:30 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@655909e2
2025-05-02 15:14:30 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-02 15:14:31 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-02 15:14:31 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-02 15:14:31 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-02 15:14:31 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-02 15:14:32 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-02 15:14:32 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-02 15:14:32 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.117 seconds (process running for 3.468)
2025-05-02 15:14:47 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-02 15:14:47 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-02 15:14:47 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 5 ms
2025-05-02 15:14:47 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-02 15:14:47 | INFO  | org.example.service.CountryService - 🔄 Fetched 2 countries from DB and cached
2025-05-02 15:14:47 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 15:14:47 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 15:14:47 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-02 15:14:50 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-02 15:14:50 | INFO  | org.example.service.CountryService - ✅ Retrieved 2 countries from cache
2025-05-02 15:14:50 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 15:14:50 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-02 15:14:50 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-02 15:15:00 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=10
2025-05-02 15:15:00 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_10
2025-05-02 15:15:00 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-02 15:15:00 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-02 15:15:00 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-05-02 15:15:03 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=10
2025-05-02 15:15:03 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_10
2025-05-02 15:15:03 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-02 15:15:03 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-02 15:15:03 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-05-02 15:15:43 | WARN  | o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Failure in @ExceptionHandler org.example.exception.ExceptionManager#objectNotFoundException(ObjectNotFoundException, WebRequest)
java.lang.IllegalStateException: Could not resolve parameter [0] in public org.springframework.http.ResponseEntity<org.example.exception.ErrorMessage> org.example.exception.ExceptionManager.objectNotFoundException(org.example.exception.ObjectNotFoundException,org.springframework.web.context.request.WebRequest): No suitable resolver
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:222)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:178)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:432)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:74)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:175)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:80)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1357)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1160)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-05-02 15:15:43 | WARN  | o.s.w.s.m.s.DefaultHandlerExceptionResolver - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `java.util.ArrayList<org.example.model.Nation>` from Object value (token `JsonToken.START_OBJECT`)]
2025-05-02 15:43:53 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=26m52s614ms).
2025-05-02 16:00:18 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s886ms).
2025-05-02 16:16:13 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s988ms).
2025-05-02 16:32:38 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s950ms).
2025-05-02 16:47:23 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=14m45s).
2025-05-02 17:34:45 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=47m22s184ms).
2025-05-02 19:09:29 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h34m44s216ms).
2025-05-02 20:21:06 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h11m36s485ms).
2025-05-02 21:54:28 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h33m22s596ms).
2025-05-02 23:18:07 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h23m39s128ms).
2025-05-03 00:25:08 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h7m1s58ms).
2025-05-03 01:58:08 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h32m59s513ms).
2025-05-03 03:18:24 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h20m16s375ms).
2025-05-03 04:46:40 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h28m16s35ms).
2025-05-03 06:05:37 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h18m56s968ms).
2025-05-03 07:31:11 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h25m33s172ms).
2025-05-03 08:49:40 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h18m29s953ms).
2025-05-03 10:20:43 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h31m2s236ms).
2025-05-03 11:48:57 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h28m13s878ms).
2025-05-03 12:36:22 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=47m25s263ms).
2025-05-03 13:37:23 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h1m1s345ms).
2025-05-03 14:26:14 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=48m51s264ms).
2025-05-03 15:12:29 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=46m14s493ms).
2025-05-03 15:59:23 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=46m54s162ms).
2025-05-03 17:00:38 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h1m15s155ms).
2025-05-03 18:15:02 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h14m23s946ms).
2025-05-03 19:31:26 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h16m23s393ms).
2025-05-03 21:00:04 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h28m38s14ms).
2025-05-03 21:00:32 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Retrograde clock change detected (housekeeper delta=28s322ms), soft-evicting connections from pool.
2025-05-03 21:04:32 | INFO  | o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 232 ms
2025-05-03 21:32:01 | INFO  | o.a.coyote.http11.Http11Processor - Error parsing HTTP request header
 Note: further occurrences of HTTP request parsing errors will be logged at DEBUG level.
java.lang.IllegalArgumentException: Invalid character found in method name [0x160x030x010x060xa00x010x000x060x9c0x030x03M0xe30x1e0xd2}0xa6A*N0xe80xe10xb8_0xf9:[sa0x150x990xa40x1b30x030xfb[[0x130x920xb50xfba ]. HTTP method names must be tokens
	at org.apache.coyote.http11.Http11InputBuffer.parseRequestLine(Http11InputBuffer.java:407)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:264)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-05-03 22:02:43 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-03 22:02:43 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-03 22:02:43 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-03 22:02:43 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-03 22:02:46 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 22:02:46 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 33554 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 22:02:46 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 22:02:46 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 22:02:46 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 21 ms. Found 3 JPA repository interfaces.
2025-05-03 22:02:47 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 22:02:47 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 22:02:47 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 22:02:47 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 22:02:47 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 22:02:47 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 778 ms
2025-05-03 22:02:47 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-03 22:02:47 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-03 22:02:47 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-03 22:02:47 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-03 22:02:47 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 22:02:48 | ERROR | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Exception during pool initialization.
org.postgresql.util.PSQLException: FATAL: database "user" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2713)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2825)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:175)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:313)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:54)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:263)
	at org.postgresql.Driver.makeConnection(Driver.java:443)
	at org.postgresql.Driver.connect(Driver.java:297)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess.obtainConnection(JdbcEnvironmentInitiator.java:428)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcIsolationDelegate.delegateWork(JdbcIsolationDelegate.java:61)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentUsingJdbcMetadata(JdbcEnvironmentInitiator.java:276)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:107)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:129)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:238)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:215)
	at org.hibernate.boot.model.relational.Database.<init>(Database.java:45)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.getDatabase(InFlightMetadataCollectorImpl.java:223)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:191)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:170)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1432)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1503)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
2025-05-03 22:02:48 | WARN  | o.h.e.j.e.i.JdbcEnvironmentInitiator - HHH000342: Could not obtain connection to query metadata
java.lang.NullPointerException: Cannot invoke "org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(java.sql.SQLException, String)" because the return value of "org.hibernate.resource.transaction.backend.jdbc.internal.JdbcIsolationDelegate.sqlExceptionHelper()" is null
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcIsolationDelegate.delegateWork(JdbcIsolationDelegate.java:116)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentUsingJdbcMetadata(JdbcEnvironmentInitiator.java:276)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:107)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:129)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:238)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:215)
	at org.hibernate.boot.model.relational.Database.<init>(Database.java:45)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.getDatabase(InFlightMetadataCollectorImpl.java:223)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:191)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:170)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1432)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1503)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
2025-05-03 22:02:48 | ERROR | o.s.o.j.LocalContainerEntityManagerFactoryBean - Failed to initialize JPA EntityManagerFactory: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment] due to: Unable to determine Dialect without JDBC metadata (please set 'jakarta.persistence.jdbc.url' for common cases or 'hibernate.dialect' when a custom Dialect implementation must be provided)
2025-05-03 22:02:48 | WARN  | o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment] due to: Unable to determine Dialect without JDBC metadata (please set 'jakarta.persistence.jdbc.url' for common cases or 'hibernate.dialect' when a custom Dialect implementation must be provided)
2025-05-03 22:02:48 | INFO  | o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-05-03 22:02:48 | INFO  | o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-05-03 22:02:48 | ERROR | o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment] due to: Unable to determine Dialect without JDBC metadata (please set 'jakarta.persistence.jdbc.url' for common cases or 'hibernate.dialect' when a custom Dialect implementation must be provided)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
Caused by: org.hibernate.service.spi.ServiceException: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment] due to: Unable to determine Dialect without JDBC metadata (please set 'jakarta.persistence.jdbc.url' for common cases or 'hibernate.dialect' when a custom Dialect implementation must be provided)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:276)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:238)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:215)
	at org.hibernate.boot.model.relational.Database.<init>(Database.java:45)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.getDatabase(InFlightMetadataCollectorImpl.java:223)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:191)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:170)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1432)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1503)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 16 common frames omitted
Caused by: org.hibernate.HibernateException: Unable to determine Dialect without JDBC metadata (please set 'jakarta.persistence.jdbc.url' for common cases or 'hibernate.dialect' when a custom Dialect implementation must be provided)
	at org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl.determineDialect(DialectFactoryImpl.java:191)
	at org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl.buildDialect(DialectFactoryImpl.java:87)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentWithDefaults(JdbcEnvironmentInitiator.java:143)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentUsingJdbcMetadata(JdbcEnvironmentInitiator.java:348)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:107)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:129)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	... 31 common frames omitted
2025-05-03 22:04:04 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 22:04:04 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 33640 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 22:04:04 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 22:04:04 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 22:04:04 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 43 ms. Found 3 JPA repository interfaces.
2025-05-03 22:04:05 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 22:04:05 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 22:04:05 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 22:04:05 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 22:04:05 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 22:04:05 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1011 ms
2025-05-03 22:04:05 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-03 22:04:05 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-03 22:04:05 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-03 22:04:05 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-03 22:04:05 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 22:04:06 | ERROR | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Exception during pool initialization.
org.postgresql.util.PSQLException: FATAL: database "user" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2713)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2825)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:175)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:313)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:54)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:263)
	at org.postgresql.Driver.makeConnection(Driver.java:443)
	at org.postgresql.Driver.connect(Driver.java:297)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess.obtainConnection(JdbcEnvironmentInitiator.java:428)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcIsolationDelegate.delegateWork(JdbcIsolationDelegate.java:61)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentUsingJdbcMetadata(JdbcEnvironmentInitiator.java:276)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:107)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:129)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:238)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:215)
	at org.hibernate.boot.model.relational.Database.<init>(Database.java:45)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.getDatabase(InFlightMetadataCollectorImpl.java:223)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:191)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:170)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1432)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1503)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
2025-05-03 22:04:06 | WARN  | o.h.e.j.e.i.JdbcEnvironmentInitiator - HHH000342: Could not obtain connection to query metadata
java.lang.NullPointerException: Cannot invoke "org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(java.sql.SQLException, String)" because the return value of "org.hibernate.resource.transaction.backend.jdbc.internal.JdbcIsolationDelegate.sqlExceptionHelper()" is null
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcIsolationDelegate.delegateWork(JdbcIsolationDelegate.java:116)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentUsingJdbcMetadata(JdbcEnvironmentInitiator.java:276)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:107)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:129)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:238)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:215)
	at org.hibernate.boot.model.relational.Database.<init>(Database.java:45)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.getDatabase(InFlightMetadataCollectorImpl.java:223)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:191)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:170)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1432)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1503)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
2025-05-03 22:04:06 | ERROR | o.s.o.j.LocalContainerEntityManagerFactoryBean - Failed to initialize JPA EntityManagerFactory: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment] due to: Unable to determine Dialect without JDBC metadata (please set 'jakarta.persistence.jdbc.url' for common cases or 'hibernate.dialect' when a custom Dialect implementation must be provided)
2025-05-03 22:04:06 | WARN  | o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment] due to: Unable to determine Dialect without JDBC metadata (please set 'jakarta.persistence.jdbc.url' for common cases or 'hibernate.dialect' when a custom Dialect implementation must be provided)
2025-05-03 22:04:06 | INFO  | o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-05-03 22:04:06 | INFO  | o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-05-03 22:04:06 | ERROR | o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment] due to: Unable to determine Dialect without JDBC metadata (please set 'jakarta.persistence.jdbc.url' for common cases or 'hibernate.dialect' when a custom Dialect implementation must be provided)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
Caused by: org.hibernate.service.spi.ServiceException: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment] due to: Unable to determine Dialect without JDBC metadata (please set 'jakarta.persistence.jdbc.url' for common cases or 'hibernate.dialect' when a custom Dialect implementation must be provided)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:276)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:238)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:215)
	at org.hibernate.boot.model.relational.Database.<init>(Database.java:45)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.getDatabase(InFlightMetadataCollectorImpl.java:223)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:191)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:170)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1432)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1503)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 16 common frames omitted
Caused by: org.hibernate.HibernateException: Unable to determine Dialect without JDBC metadata (please set 'jakarta.persistence.jdbc.url' for common cases or 'hibernate.dialect' when a custom Dialect implementation must be provided)
	at org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl.determineDialect(DialectFactoryImpl.java:191)
	at org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl.buildDialect(DialectFactoryImpl.java:87)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentWithDefaults(JdbcEnvironmentInitiator.java:143)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentUsingJdbcMetadata(JdbcEnvironmentInitiator.java:348)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:107)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:129)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	... 31 common frames omitted
2025-05-03 22:06:44 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 22:06:44 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 33843 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 22:06:44 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 22:06:45 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 22:06:45 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 23 ms. Found 3 JPA repository interfaces.
2025-05-03 22:06:45 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 22:06:45 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 22:06:45 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 22:06:45 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 22:06:45 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 22:06:45 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 831 ms
2025-05-03 22:06:45 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-03 22:06:45 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-03 22:06:45 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-03 22:06:46 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-03 22:06:46 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 22:06:47 | ERROR | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Exception during pool initialization.
org.postgresql.util.PSQLException: FATAL: database "user" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2713)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2825)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:175)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:313)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:54)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:263)
	at org.postgresql.Driver.makeConnection(Driver.java:443)
	at org.postgresql.Driver.connect(Driver.java:297)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess.obtainConnection(JdbcEnvironmentInitiator.java:428)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcIsolationDelegate.delegateWork(JdbcIsolationDelegate.java:61)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentUsingJdbcMetadata(JdbcEnvironmentInitiator.java:276)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:107)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:129)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:238)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:215)
	at org.hibernate.boot.model.relational.Database.<init>(Database.java:45)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.getDatabase(InFlightMetadataCollectorImpl.java:223)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:191)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:170)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1432)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1503)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
2025-05-03 22:06:47 | WARN  | o.h.e.j.e.i.JdbcEnvironmentInitiator - HHH000342: Could not obtain connection to query metadata
java.lang.NullPointerException: Cannot invoke "org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(java.sql.SQLException, String)" because the return value of "org.hibernate.resource.transaction.backend.jdbc.internal.JdbcIsolationDelegate.sqlExceptionHelper()" is null
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcIsolationDelegate.delegateWork(JdbcIsolationDelegate.java:116)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentUsingJdbcMetadata(JdbcEnvironmentInitiator.java:276)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:107)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:129)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:238)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:215)
	at org.hibernate.boot.model.relational.Database.<init>(Database.java:45)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.getDatabase(InFlightMetadataCollectorImpl.java:223)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:191)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:170)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1432)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1503)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
2025-05-03 22:06:47 | ERROR | o.s.o.j.LocalContainerEntityManagerFactoryBean - Failed to initialize JPA EntityManagerFactory: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment] due to: Unable to determine Dialect without JDBC metadata (please set 'jakarta.persistence.jdbc.url' for common cases or 'hibernate.dialect' when a custom Dialect implementation must be provided)
2025-05-03 22:06:47 | WARN  | o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment] due to: Unable to determine Dialect without JDBC metadata (please set 'jakarta.persistence.jdbc.url' for common cases or 'hibernate.dialect' when a custom Dialect implementation must be provided)
2025-05-03 22:06:47 | INFO  | o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-05-03 22:06:47 | INFO  | o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-05-03 22:06:47 | ERROR | o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment] due to: Unable to determine Dialect without JDBC metadata (please set 'jakarta.persistence.jdbc.url' for common cases or 'hibernate.dialect' when a custom Dialect implementation must be provided)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
Caused by: org.hibernate.service.spi.ServiceException: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment] due to: Unable to determine Dialect without JDBC metadata (please set 'jakarta.persistence.jdbc.url' for common cases or 'hibernate.dialect' when a custom Dialect implementation must be provided)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:276)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:238)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:215)
	at org.hibernate.boot.model.relational.Database.<init>(Database.java:45)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.getDatabase(InFlightMetadataCollectorImpl.java:223)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:191)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:170)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1432)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1503)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 16 common frames omitted
Caused by: org.hibernate.HibernateException: Unable to determine Dialect without JDBC metadata (please set 'jakarta.persistence.jdbc.url' for common cases or 'hibernate.dialect' when a custom Dialect implementation must be provided)
	at org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl.determineDialect(DialectFactoryImpl.java:191)
	at org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl.buildDialect(DialectFactoryImpl.java:87)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentWithDefaults(JdbcEnvironmentInitiator.java:143)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentUsingJdbcMetadata(JdbcEnvironmentInitiator.java:348)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:107)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:129)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	... 31 common frames omitted
2025-05-03 22:09:34 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 22:09:34 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 33957 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 22:09:34 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 22:09:34 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 22:09:34 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 27 ms. Found 3 JPA repository interfaces.
2025-05-03 22:09:35 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 22:09:35 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 22:09:35 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 22:09:35 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 22:09:35 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 22:09:35 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 964 ms
2025-05-03 22:09:35 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-03 22:09:35 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-03 22:09:35 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-03 22:09:35 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-03 22:09:35 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 22:09:36 | ERROR | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Exception during pool initialization.
org.postgresql.util.PSQLException: FATAL: database "user" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2713)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2825)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:175)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:313)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:54)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:263)
	at org.postgresql.Driver.makeConnection(Driver.java:443)
	at org.postgresql.Driver.connect(Driver.java:297)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess.obtainConnection(JdbcEnvironmentInitiator.java:428)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcIsolationDelegate.delegateWork(JdbcIsolationDelegate.java:61)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentUsingJdbcMetadata(JdbcEnvironmentInitiator.java:276)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:107)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:129)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:238)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:215)
	at org.hibernate.boot.model.relational.Database.<init>(Database.java:45)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.getDatabase(InFlightMetadataCollectorImpl.java:223)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:191)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:170)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1432)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1503)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
2025-05-03 22:09:36 | WARN  | o.h.e.j.e.i.JdbcEnvironmentInitiator - HHH000342: Could not obtain connection to query metadata
java.lang.NullPointerException: Cannot invoke "org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(java.sql.SQLException, String)" because the return value of "org.hibernate.resource.transaction.backend.jdbc.internal.JdbcIsolationDelegate.sqlExceptionHelper()" is null
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcIsolationDelegate.delegateWork(JdbcIsolationDelegate.java:116)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentUsingJdbcMetadata(JdbcEnvironmentInitiator.java:276)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:107)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:129)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:238)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:215)
	at org.hibernate.boot.model.relational.Database.<init>(Database.java:45)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.getDatabase(InFlightMetadataCollectorImpl.java:223)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:191)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:170)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1432)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1503)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
2025-05-03 22:09:36 | ERROR | o.s.o.j.LocalContainerEntityManagerFactoryBean - Failed to initialize JPA EntityManagerFactory: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment] due to: Unable to determine Dialect without JDBC metadata (please set 'jakarta.persistence.jdbc.url' for common cases or 'hibernate.dialect' when a custom Dialect implementation must be provided)
2025-05-03 22:09:36 | WARN  | o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment] due to: Unable to determine Dialect without JDBC metadata (please set 'jakarta.persistence.jdbc.url' for common cases or 'hibernate.dialect' when a custom Dialect implementation must be provided)
2025-05-03 22:09:36 | INFO  | o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-05-03 22:09:36 | INFO  | o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-05-03 22:09:36 | ERROR | o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment] due to: Unable to determine Dialect without JDBC metadata (please set 'jakarta.persistence.jdbc.url' for common cases or 'hibernate.dialect' when a custom Dialect implementation must be provided)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
Caused by: org.hibernate.service.spi.ServiceException: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment] due to: Unable to determine Dialect without JDBC metadata (please set 'jakarta.persistence.jdbc.url' for common cases or 'hibernate.dialect' when a custom Dialect implementation must be provided)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:276)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:238)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:215)
	at org.hibernate.boot.model.relational.Database.<init>(Database.java:45)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.getDatabase(InFlightMetadataCollectorImpl.java:223)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:191)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:170)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1432)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1503)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 16 common frames omitted
Caused by: org.hibernate.HibernateException: Unable to determine Dialect without JDBC metadata (please set 'jakarta.persistence.jdbc.url' for common cases or 'hibernate.dialect' when a custom Dialect implementation must be provided)
	at org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl.determineDialect(DialectFactoryImpl.java:191)
	at org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl.buildDialect(DialectFactoryImpl.java:87)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentWithDefaults(JdbcEnvironmentInitiator.java:143)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentUsingJdbcMetadata(JdbcEnvironmentInitiator.java:348)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:107)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:129)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	... 31 common frames omitted
2025-05-03 22:11:17 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 22:11:18 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 34049 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 22:11:18 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 22:11:18 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 22:11:18 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 24 ms. Found 3 JPA repository interfaces.
2025-05-03 22:11:18 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 22:11:18 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 22:11:18 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 22:11:18 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 22:11:18 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 22:11:18 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 870 ms
2025-05-03 22:11:19 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-03 22:11:19 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-03 22:11:19 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-03 22:11:19 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-03 22:11:19 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 22:11:20 | ERROR | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Exception during pool initialization.
org.postgresql.util.PSQLException: FATAL: database "user" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2713)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2825)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:175)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:313)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:54)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:263)
	at org.postgresql.Driver.makeConnection(Driver.java:443)
	at org.postgresql.Driver.connect(Driver.java:297)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess.obtainConnection(JdbcEnvironmentInitiator.java:428)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcIsolationDelegate.delegateWork(JdbcIsolationDelegate.java:61)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentUsingJdbcMetadata(JdbcEnvironmentInitiator.java:276)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:107)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:129)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:238)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:215)
	at org.hibernate.boot.model.relational.Database.<init>(Database.java:45)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.getDatabase(InFlightMetadataCollectorImpl.java:223)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:191)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:170)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1432)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1503)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
2025-05-03 22:11:20 | WARN  | o.h.e.j.e.i.JdbcEnvironmentInitiator - HHH000342: Could not obtain connection to query metadata
java.lang.NullPointerException: Cannot invoke "org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(java.sql.SQLException, String)" because the return value of "org.hibernate.resource.transaction.backend.jdbc.internal.JdbcIsolationDelegate.sqlExceptionHelper()" is null
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcIsolationDelegate.delegateWork(JdbcIsolationDelegate.java:116)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentUsingJdbcMetadata(JdbcEnvironmentInitiator.java:276)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:107)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:129)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:238)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:215)
	at org.hibernate.boot.model.relational.Database.<init>(Database.java:45)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.getDatabase(InFlightMetadataCollectorImpl.java:223)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:191)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:170)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1432)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1503)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
2025-05-03 22:11:20 | ERROR | o.s.o.j.LocalContainerEntityManagerFactoryBean - Failed to initialize JPA EntityManagerFactory: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment] due to: Unable to determine Dialect without JDBC metadata (please set 'jakarta.persistence.jdbc.url' for common cases or 'hibernate.dialect' when a custom Dialect implementation must be provided)
2025-05-03 22:11:20 | WARN  | o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment] due to: Unable to determine Dialect without JDBC metadata (please set 'jakarta.persistence.jdbc.url' for common cases or 'hibernate.dialect' when a custom Dialect implementation must be provided)
2025-05-03 22:11:20 | INFO  | o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-05-03 22:11:20 | INFO  | o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-05-03 22:11:20 | ERROR | o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment] due to: Unable to determine Dialect without JDBC metadata (please set 'jakarta.persistence.jdbc.url' for common cases or 'hibernate.dialect' when a custom Dialect implementation must be provided)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
Caused by: org.hibernate.service.spi.ServiceException: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment] due to: Unable to determine Dialect without JDBC metadata (please set 'jakarta.persistence.jdbc.url' for common cases or 'hibernate.dialect' when a custom Dialect implementation must be provided)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:276)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:238)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:215)
	at org.hibernate.boot.model.relational.Database.<init>(Database.java:45)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.getDatabase(InFlightMetadataCollectorImpl.java:223)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:191)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:170)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1432)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1503)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 16 common frames omitted
Caused by: org.hibernate.HibernateException: Unable to determine Dialect without JDBC metadata (please set 'jakarta.persistence.jdbc.url' for common cases or 'hibernate.dialect' when a custom Dialect implementation must be provided)
	at org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl.determineDialect(DialectFactoryImpl.java:191)
	at org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl.buildDialect(DialectFactoryImpl.java:87)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentWithDefaults(JdbcEnvironmentInitiator.java:143)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentUsingJdbcMetadata(JdbcEnvironmentInitiator.java:348)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:107)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:129)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	... 31 common frames omitted
2025-05-03 22:15:07 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 22:15:07 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 34194 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 22:15:07 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 22:15:07 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 22:15:07 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 26 ms. Found 3 JPA repository interfaces.
2025-05-03 22:15:08 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 22:15:08 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 22:15:08 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 22:15:08 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 22:15:08 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 22:15:08 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 856 ms
2025-05-03 22:15:08 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-03 22:15:08 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-03 22:15:08 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-03 22:15:08 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-03 22:15:08 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 22:15:09 | ERROR | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Exception during pool initialization.
org.postgresql.util.PSQLException: FATAL: database "user" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2713)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2825)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:175)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:313)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:54)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:263)
	at org.postgresql.Driver.makeConnection(Driver.java:443)
	at org.postgresql.Driver.connect(Driver.java:297)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess.obtainConnection(JdbcEnvironmentInitiator.java:428)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcIsolationDelegate.delegateWork(JdbcIsolationDelegate.java:61)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentUsingJdbcMetadata(JdbcEnvironmentInitiator.java:276)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:107)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:129)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:238)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:215)
	at org.hibernate.boot.model.relational.Database.<init>(Database.java:45)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.getDatabase(InFlightMetadataCollectorImpl.java:223)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:191)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:170)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1432)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1503)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
2025-05-03 22:15:09 | WARN  | o.h.e.j.e.i.JdbcEnvironmentInitiator - HHH000342: Could not obtain connection to query metadata
java.lang.NullPointerException: Cannot invoke "org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(java.sql.SQLException, String)" because the return value of "org.hibernate.resource.transaction.backend.jdbc.internal.JdbcIsolationDelegate.sqlExceptionHelper()" is null
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcIsolationDelegate.delegateWork(JdbcIsolationDelegate.java:116)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentUsingJdbcMetadata(JdbcEnvironmentInitiator.java:276)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:107)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:129)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:238)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:215)
	at org.hibernate.boot.model.relational.Database.<init>(Database.java:45)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.getDatabase(InFlightMetadataCollectorImpl.java:223)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:191)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:170)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1432)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1503)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
2025-05-03 22:15:09 | WARN  | org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-05-03 22:15:10 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-03 22:15:10 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 22:15:11 | ERROR | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Exception during pool initialization.
org.postgresql.util.PSQLException: FATAL: database "user" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2713)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2825)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:175)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:313)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:54)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:263)
	at org.postgresql.Driver.makeConnection(Driver.java:443)
	at org.postgresql.Driver.connect(Driver.java:297)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess.obtainConnection(JdbcEnvironmentInitiator.java:428)
	at org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl.getIsolatedConnection(DdlTransactionIsolatorNonJtaImpl.java:46)
	at org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl.getIsolatedConnection(DdlTransactionIsolatorNonJtaImpl.java:39)
	at org.hibernate.tool.schema.internal.exec.ImprovedExtractionContextImpl.getJdbcConnection(ImprovedExtractionContextImpl.java:63)
	at org.hibernate.tool.schema.extract.spi.ExtractionContext.getQueryResults(ExtractionContext.java:43)
	at org.hibernate.tool.schema.extract.internal.SequenceInformationExtractorLegacyImpl.extractMetadata(SequenceInformationExtractorLegacyImpl.java:39)
	at org.hibernate.tool.schema.extract.internal.DatabaseInformationImpl.initializeSequences(DatabaseInformationImpl.java:66)
	at org.hibernate.tool.schema.extract.internal.DatabaseInformationImpl.<init>(DatabaseInformationImpl.java:60)
	at org.hibernate.tool.schema.internal.Helper.buildDatabaseInformation(Helper.java:185)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:98)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
2025-05-03 22:15:11 | WARN  | o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 3D000
2025-05-03 22:15:11 | ERROR | o.h.e.jdbc.spi.SqlExceptionHelper - FATAL: database "user" does not exist
2025-05-03 22:15:11 | ERROR | o.s.o.j.LocalContainerEntityManagerFactoryBean - Failed to initialize JPA EntityManagerFactory: [PersistenceUnit: default] Unable to build Hibernate SessionFactory; nested exception is org.hibernate.exception.GenericJDBCException: Unable to open JDBC Connection for DDL execution [FATAL: database "user" does not exist] [n/a]
2025-05-03 22:15:11 | WARN  | o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: [PersistenceUnit: default] Unable to build Hibernate SessionFactory; nested exception is org.hibernate.exception.GenericJDBCException: Unable to open JDBC Connection for DDL execution [FATAL: database "user" does not exist] [n/a]
2025-05-03 22:15:11 | INFO  | o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-05-03 22:15:11 | INFO  | o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-05-03 22:15:11 | ERROR | o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: [PersistenceUnit: default] Unable to build Hibernate SessionFactory; nested exception is org.hibernate.exception.GenericJDBCException: Unable to open JDBC Connection for DDL execution [FATAL: database "user" does not exist] [n/a]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
Caused by: jakarta.persistence.PersistenceException: [PersistenceUnit: default] Unable to build Hibernate SessionFactory; nested exception is org.hibernate.exception.GenericJDBCException: Unable to open JDBC Connection for DDL execution [FATAL: database "user" does not exist] [n/a]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:421)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 16 common frames omitted
Caused by: org.hibernate.exception.GenericJDBCException: Unable to open JDBC Connection for DDL execution [FATAL: database "user" does not exist] [n/a]
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:63)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:108)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:94)
	at org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl.getIsolatedConnection(DdlTransactionIsolatorNonJtaImpl.java:74)
	at org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl.getIsolatedConnection(DdlTransactionIsolatorNonJtaImpl.java:39)
	at org.hibernate.tool.schema.internal.exec.ImprovedExtractionContextImpl.getJdbcConnection(ImprovedExtractionContextImpl.java:63)
	at org.hibernate.tool.schema.extract.spi.ExtractionContext.getQueryResults(ExtractionContext.java:43)
	at org.hibernate.tool.schema.extract.internal.SequenceInformationExtractorLegacyImpl.extractMetadata(SequenceInformationExtractorLegacyImpl.java:39)
	at org.hibernate.tool.schema.extract.internal.DatabaseInformationImpl.initializeSequences(DatabaseInformationImpl.java:66)
	at org.hibernate.tool.schema.extract.internal.DatabaseInformationImpl.<init>(DatabaseInformationImpl.java:60)
	at org.hibernate.tool.schema.internal.Helper.buildDatabaseInformation(Helper.java:185)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:98)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	... 20 common frames omitted
Caused by: org.postgresql.util.PSQLException: FATAL: database "user" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2713)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2825)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:175)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:313)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:54)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:263)
	at org.postgresql.Driver.makeConnection(Driver.java:443)
	at org.postgresql.Driver.connect(Driver.java:297)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess.obtainConnection(JdbcEnvironmentInitiator.java:428)
	at org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl.getIsolatedConnection(DdlTransactionIsolatorNonJtaImpl.java:46)
	... 40 common frames omitted
2025-05-03 22:22:20 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 22:22:20 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 34751 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 22:22:20 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 22:22:20 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 22:22:20 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 22 ms. Found 3 JPA repository interfaces.
2025-05-03 22:22:21 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 22:22:21 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 22:22:21 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 22:22:21 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 22:22:21 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 22:22:21 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 870 ms
2025-05-03 22:22:21 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-03 22:22:21 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-03 22:22:21 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-03 22:22:21 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-03 22:22:21 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 22:22:22 | ERROR | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Exception during pool initialization.
org.postgresql.util.PSQLException: FATAL: database "user" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2713)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2825)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:175)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:313)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:54)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:263)
	at org.postgresql.Driver.makeConnection(Driver.java:443)
	at org.postgresql.Driver.connect(Driver.java:297)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess.obtainConnection(JdbcEnvironmentInitiator.java:428)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcIsolationDelegate.delegateWork(JdbcIsolationDelegate.java:61)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentUsingJdbcMetadata(JdbcEnvironmentInitiator.java:276)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:107)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:129)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:238)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:215)
	at org.hibernate.boot.model.relational.Database.<init>(Database.java:45)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.getDatabase(InFlightMetadataCollectorImpl.java:223)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:191)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:170)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1432)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1503)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
2025-05-03 22:22:22 | WARN  | o.h.e.j.e.i.JdbcEnvironmentInitiator - HHH000342: Could not obtain connection to query metadata
java.lang.NullPointerException: Cannot invoke "org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(java.sql.SQLException, String)" because the return value of "org.hibernate.resource.transaction.backend.jdbc.internal.JdbcIsolationDelegate.sqlExceptionHelper()" is null
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcIsolationDelegate.delegateWork(JdbcIsolationDelegate.java:116)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentUsingJdbcMetadata(JdbcEnvironmentInitiator.java:276)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:107)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:129)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:238)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:215)
	at org.hibernate.boot.model.relational.Database.<init>(Database.java:45)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.getDatabase(InFlightMetadataCollectorImpl.java:223)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:191)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:170)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1432)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1503)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
2025-05-03 22:22:22 | WARN  | org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-05-03 22:22:22 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-03 22:22:22 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 22:22:23 | ERROR | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Exception during pool initialization.
org.postgresql.util.PSQLException: FATAL: database "user" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2713)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2825)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:175)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:313)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:54)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:263)
	at org.postgresql.Driver.makeConnection(Driver.java:443)
	at org.postgresql.Driver.connect(Driver.java:297)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess.obtainConnection(JdbcEnvironmentInitiator.java:428)
	at org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl.getIsolatedConnection(DdlTransactionIsolatorNonJtaImpl.java:46)
	at org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl.getIsolatedConnection(DdlTransactionIsolatorNonJtaImpl.java:39)
	at org.hibernate.tool.schema.internal.exec.ImprovedExtractionContextImpl.getJdbcConnection(ImprovedExtractionContextImpl.java:63)
	at org.hibernate.tool.schema.extract.spi.ExtractionContext.getQueryResults(ExtractionContext.java:43)
	at org.hibernate.tool.schema.extract.internal.SequenceInformationExtractorLegacyImpl.extractMetadata(SequenceInformationExtractorLegacyImpl.java:39)
	at org.hibernate.tool.schema.extract.internal.DatabaseInformationImpl.initializeSequences(DatabaseInformationImpl.java:66)
	at org.hibernate.tool.schema.extract.internal.DatabaseInformationImpl.<init>(DatabaseInformationImpl.java:60)
	at org.hibernate.tool.schema.internal.Helper.buildDatabaseInformation(Helper.java:185)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:98)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
2025-05-03 22:22:23 | WARN  | o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 3D000
2025-05-03 22:22:23 | ERROR | o.h.e.jdbc.spi.SqlExceptionHelper - FATAL: database "user" does not exist
2025-05-03 22:22:23 | ERROR | o.s.o.j.LocalContainerEntityManagerFactoryBean - Failed to initialize JPA EntityManagerFactory: [PersistenceUnit: default] Unable to build Hibernate SessionFactory; nested exception is org.hibernate.exception.GenericJDBCException: Unable to open JDBC Connection for DDL execution [FATAL: database "user" does not exist] [n/a]
2025-05-03 22:22:23 | WARN  | o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: [PersistenceUnit: default] Unable to build Hibernate SessionFactory; nested exception is org.hibernate.exception.GenericJDBCException: Unable to open JDBC Connection for DDL execution [FATAL: database "user" does not exist] [n/a]
2025-05-03 22:22:23 | INFO  | o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-05-03 22:22:23 | INFO  | o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-05-03 22:22:23 | ERROR | o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: [PersistenceUnit: default] Unable to build Hibernate SessionFactory; nested exception is org.hibernate.exception.GenericJDBCException: Unable to open JDBC Connection for DDL execution [FATAL: database "user" does not exist] [n/a]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
Caused by: jakarta.persistence.PersistenceException: [PersistenceUnit: default] Unable to build Hibernate SessionFactory; nested exception is org.hibernate.exception.GenericJDBCException: Unable to open JDBC Connection for DDL execution [FATAL: database "user" does not exist] [n/a]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:421)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 16 common frames omitted
Caused by: org.hibernate.exception.GenericJDBCException: Unable to open JDBC Connection for DDL execution [FATAL: database "user" does not exist] [n/a]
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:63)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:108)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:94)
	at org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl.getIsolatedConnection(DdlTransactionIsolatorNonJtaImpl.java:74)
	at org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl.getIsolatedConnection(DdlTransactionIsolatorNonJtaImpl.java:39)
	at org.hibernate.tool.schema.internal.exec.ImprovedExtractionContextImpl.getJdbcConnection(ImprovedExtractionContextImpl.java:63)
	at org.hibernate.tool.schema.extract.spi.ExtractionContext.getQueryResults(ExtractionContext.java:43)
	at org.hibernate.tool.schema.extract.internal.SequenceInformationExtractorLegacyImpl.extractMetadata(SequenceInformationExtractorLegacyImpl.java:39)
	at org.hibernate.tool.schema.extract.internal.DatabaseInformationImpl.initializeSequences(DatabaseInformationImpl.java:66)
	at org.hibernate.tool.schema.extract.internal.DatabaseInformationImpl.<init>(DatabaseInformationImpl.java:60)
	at org.hibernate.tool.schema.internal.Helper.buildDatabaseInformation(Helper.java:185)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:98)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1430)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	... 20 common frames omitted
Caused by: org.postgresql.util.PSQLException: FATAL: database "user" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2713)
	at org.postgresql.core.v3.QueryExecutorImpl.readStartupMessages(QueryExecutorImpl.java:2825)
	at org.postgresql.core.v3.QueryExecutorImpl.<init>(QueryExecutorImpl.java:175)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:313)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:54)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:263)
	at org.postgresql.Driver.makeConnection(Driver.java:443)
	at org.postgresql.Driver.connect(Driver.java:297)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess.obtainConnection(JdbcEnvironmentInitiator.java:428)
	at org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl.getIsolatedConnection(DdlTransactionIsolatorNonJtaImpl.java:46)
	... 40 common frames omitted
2025-05-03 22:25:06 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 22:25:06 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 34851 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 22:25:06 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 22:25:06 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 22:25:06 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 23 ms. Found 3 JPA repository interfaces.
2025-05-03 22:25:07 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 22:25:07 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 22:25:07 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 22:25:07 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 22:25:07 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 22:25:07 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 808 ms
2025-05-03 22:25:07 | WARN  | o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: No data scripts found at location 'classpath:db/init.sql'
2025-05-03 22:25:07 | INFO  | o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-05-03 22:25:07 | INFO  | o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-05-03 22:25:07 | ERROR | o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: No data scripts found at location 'classpath:db/init.sql'
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
Caused by: java.lang.IllegalStateException: No data scripts found at location 'classpath:db/init.sql'
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.getScripts(AbstractScriptDatabaseInitializer.java:129)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:106)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 18 common frames omitted
2025-05-03 22:26:57 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 22:26:57 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 34945 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 22:26:57 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 22:26:58 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 22:26:58 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 25 ms. Found 3 JPA repository interfaces.
2025-05-03 22:26:58 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 22:26:58 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 22:26:58 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 22:26:58 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 22:26:58 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 22:26:58 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 882 ms
2025-05-03 22:26:58 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 22:26:58 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@103c97ff
2025-05-03 22:26:58 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-03 22:26:58 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-03 22:26:58 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-03 22:26:58 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-03 22:26:58 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-03 22:26:58 | WARN  | org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-05-03 22:26:59 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-03 22:26:59 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-03 22:26:59 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-03 22:26:59 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-03 22:27:01 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-03 22:27:01 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-03 22:27:01 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.66 seconds (process running for 4.066)
2025-05-03 22:27:31 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-03 22:27:31 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-03 22:27:31 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 7 ms
2025-05-03 22:27:31 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-03 22:27:31 | INFO  | org.example.service.CountryService - 🔄 Fetched 1 countries from DB and cached
2025-05-03 22:27:31 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 22:27:31 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 22:27:31 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-03 22:27:38 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=10
2025-05-03 22:27:38 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 10
2025-05-03 22:27:38 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), exception: Country not found
2025-05-03 22:27:38 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-03 22:27:38 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-03 22:27:42 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=1
2025-05-03 22:27:42 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-03 22:27:42 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-03 22:27:42 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-03 22:27:42 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-05-03 22:27:50 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country)), args=Country(id=null, name=Германия, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cities=[], nations=null)
2025-05-03 22:27:50 | WARN  | o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 23502
2025-05-03 22:27:50 | ERROR | o.h.e.jdbc.spi.SqlExceptionHelper - ERROR: null value in column "id" of relation "country" violates not-null constraint
  Подробности: Failing row contains (null, Германия, 4130431, Berlin, 60.23, 45321033).
2025-05-03 22:27:50 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country)), exception: could not execute statement [ERROR: null value in column "id" of relation "country" violates not-null constraint
  Подробности: Failing row contains (null, Германия, 4130431, Berlin, 60.23, 45321033).] [insert into country (area,capital,gdp,name,population) values (?,?,?,?,?)]; SQL [insert into country (area,capital,gdp,name,population) values (?,?,?,?,?)]; constraint [id" of relation "country]
2025-05-03 22:27:50 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-03 22:27:50 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-05-03 22:28:01 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country)), args=Country(id=null, name=Германия, capital=Berlin, population=null, areaSquareKm=null, gdp=null, cities=[], nations=null)
2025-05-03 22:28:01 | WARN  | o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 23502
2025-05-03 22:28:01 | ERROR | o.h.e.jdbc.spi.SqlExceptionHelper - ERROR: null value in column "id" of relation "country" violates not-null constraint
  Подробности: Failing row contains (null, Германия, null, Berlin, null, null).
2025-05-03 22:28:01 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country)), exception: could not execute statement [ERROR: null value in column "id" of relation "country" violates not-null constraint
  Подробности: Failing row contains (null, Германия, null, Berlin, null, null).] [insert into country (area,capital,gdp,name,population) values (?,?,?,?,?)]; SQL [insert into country (area,capital,gdp,name,population) values (?,?,?,?,?)]; constraint [id" of relation "country]
2025-05-03 22:28:01 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-03 22:28:01 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-05-03 22:28:02 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country)), args=Country(id=null, name=Германия, capital=Berlin, population=null, areaSquareKm=null, gdp=null, cities=[], nations=null)
2025-05-03 22:28:02 | WARN  | o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 23502
2025-05-03 22:28:02 | ERROR | o.h.e.jdbc.spi.SqlExceptionHelper - ERROR: null value in column "id" of relation "country" violates not-null constraint
  Подробности: Failing row contains (null, Германия, null, Berlin, null, null).
2025-05-03 22:28:02 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country)), exception: could not execute statement [ERROR: null value in column "id" of relation "country" violates not-null constraint
  Подробности: Failing row contains (null, Германия, null, Berlin, null, null).] [insert into country (area,capital,gdp,name,population) values (?,?,?,?,?)]; SQL [insert into country (area,capital,gdp,name,population) values (?,?,?,?,?)]; constraint [id" of relation "country]
2025-05-03 22:28:02 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-03 22:28:02 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-05-03 22:28:11 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country)), args=Country(id=null, name=Германия, capital=null, population=null, areaSquareKm=null, gdp=null, cities=[], nations=null)
2025-05-03 22:28:11 | WARN  | o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 23502
2025-05-03 22:28:11 | ERROR | o.h.e.jdbc.spi.SqlExceptionHelper - ERROR: null value in column "id" of relation "country" violates not-null constraint
  Подробности: Failing row contains (null, Германия, null, null, null, null).
2025-05-03 22:28:11 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country)), exception: could not execute statement [ERROR: null value in column "id" of relation "country" violates not-null constraint
  Подробности: Failing row contains (null, Германия, null, null, null, null).] [insert into country (area,capital,gdp,name,population) values (?,?,?,?,?)]; SQL [insert into country (area,capital,gdp,name,population) values (?,?,?,?,?)]; constraint [id" of relation "country]
2025-05-03 22:28:11 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-03 22:28:11 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 7
2025-05-03 22:29:31 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-03 22:29:31 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-03 22:29:31 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-03 22:29:31 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-03 22:29:32 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 22:29:32 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 35046 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 22:29:32 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 22:29:32 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 22:29:32 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 23 ms. Found 3 JPA repository interfaces.
2025-05-03 22:29:33 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 22:29:33 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 22:29:33 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 22:29:33 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 22:29:33 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 22:29:33 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 855 ms
2025-05-03 22:29:33 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 22:29:33 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@3e03046d
2025-05-03 22:29:33 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-03 22:29:33 | WARN  | o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #6 of class path resource [db/init.sql]: INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9.5E6, 2.07E5, 6.5E10)
2025-05-03 22:29:33 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-03 22:29:33 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-03 22:29:33 | INFO  | o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-05-03 22:29:33 | INFO  | o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-05-03 22:29:33 | ERROR | o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #6 of class path resource [db/init.sql]: INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9.5E6, 2.07E5, 6.5E10)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #6 of class path resource [db/init.sql]: INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9.5E6, 2.07E5, 6.5E10)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 18 common frames omitted
Caused by: org.postgresql.util.PSQLException: ERROR: column "capital" of relation "country" does not exist
  Позиция: 28
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2713)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2401)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:368)
	at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:498)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:415)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:335)
	at org.postgresql.jdbc.PgStatement.executeCachedSql(PgStatement.java:321)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:297)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:292)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 28 common frames omitted
2025-05-03 22:32:22 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 22:32:22 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 35128 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 22:32:22 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 22:32:22 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 22:32:22 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 23 ms. Found 3 JPA repository interfaces.
2025-05-03 22:32:23 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 22:32:23 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 22:32:23 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 22:32:23 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 22:32:23 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 22:32:23 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 930 ms
2025-05-03 22:32:23 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 22:32:24 | ERROR | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Exception during pool initialization.
org.postgresql.util.PSQLException: Подсоединение по адресу localhost:5432 отклонено. Проверьте что хост и порт указаны правильно и что postmaster принимает TCP/IP-подсоединения.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:342)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:54)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:263)
	at org.postgresql.Driver.makeConnection(Driver.java:443)
	at org.postgresql.Driver.connect(Driver.java:297)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:160)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:118)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:81)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:52)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
Caused by: java.net.ConnectException: Connection refused
	at java.base/sun.nio.ch.Net.pollConnect(Native Method)
	at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:682)
	at java.base/sun.nio.ch.NioSocketImpl.timedFinishConnect(NioSocketImpl.java:542)
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:592)
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:327)
	at java.base/java.net.Socket.connect(Socket.java:760)
	at org.postgresql.core.PGStream.createSocket(PGStream.java:243)
	at org.postgresql.core.PGStream.<init>(PGStream.java:98)
	at org.postgresql.core.v3.ConnectionFactoryImpl.tryConnect(ConnectionFactoryImpl.java:132)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:258)
	... 41 common frames omitted
2025-05-03 22:32:24 | WARN  | o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute database script
2025-05-03 22:32:24 | INFO  | o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-05-03 22:32:24 | INFO  | o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-05-03 22:32:24 | ERROR | o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute database script
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
Caused by: org.springframework.jdbc.datasource.init.UncategorizedScriptException: Failed to execute database script
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:67)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 18 common frames omitted
Caused by: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:84)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:52)
	... 26 common frames omitted
Caused by: org.postgresql.util.PSQLException: Подсоединение по адресу localhost:5432 отклонено. Проверьте что хост и порт указаны правильно и что postmaster принимает TCP/IP-подсоединения.
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:342)
	at org.postgresql.core.ConnectionFactory.openConnection(ConnectionFactory.java:54)
	at org.postgresql.jdbc.PgConnection.<init>(PgConnection.java:263)
	at org.postgresql.Driver.makeConnection(Driver.java:443)
	at org.postgresql.Driver.connect(Driver.java:297)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:160)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:118)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:81)
	... 27 common frames omitted
Caused by: java.net.ConnectException: Connection refused
	at java.base/sun.nio.ch.Net.pollConnect(Native Method)
	at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:682)
	at java.base/sun.nio.ch.NioSocketImpl.timedFinishConnect(NioSocketImpl.java:542)
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:592)
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:327)
	at java.base/java.net.Socket.connect(Socket.java:760)
	at org.postgresql.core.PGStream.createSocket(PGStream.java:243)
	at org.postgresql.core.PGStream.<init>(PGStream.java:98)
	at org.postgresql.core.v3.ConnectionFactoryImpl.tryConnect(ConnectionFactoryImpl.java:132)
	at org.postgresql.core.v3.ConnectionFactoryImpl.openConnectionImpl(ConnectionFactoryImpl.java:258)
	... 41 common frames omitted
2025-05-03 22:32:29 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 22:32:29 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 35149 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 22:32:29 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 22:32:29 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 22:32:29 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 27 ms. Found 3 JPA repository interfaces.
2025-05-03 22:32:30 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 22:32:30 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 22:32:30 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 22:32:30 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 22:32:30 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 22:32:30 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 980 ms
2025-05-03 22:32:30 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 22:32:30 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@35fa450f
2025-05-03 22:32:30 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-03 22:32:30 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-03 22:32:30 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-03 22:32:30 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-03 22:32:30 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-03 22:32:30 | WARN  | org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-05-03 22:32:31 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-03 22:32:31 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-03 22:32:31 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-03 22:32:31 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-03 22:32:32 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-03 22:32:32 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-03 22:32:32 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.936 seconds (process running for 4.396)
2025-05-03 22:32:54 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-03 22:32:54 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-03 22:32:54 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 11 ms
2025-05-03 22:32:54 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-03 22:32:54 | INFO  | org.example.service.CountryService - 🔄 Fetched 1 countries from DB and cached
2025-05-03 22:32:54 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 22:32:54 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 22:32:54 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-03 22:33:53 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-03 22:33:53 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-03 22:33:53 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 22:33:53 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 22:33:53 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-03 22:34:36 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), args=9
2025-05-03 22:34:36 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 9
2025-05-03 22:34:36 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), exception: Country not found with ID: 9
2025-05-03 22:34:36 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-03 22:34:36 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-05-03 22:34:38 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), args=1
2025-05-03 22:34:39 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-03 22:34:39 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-03 22:34:39 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-03 22:34:39 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-03 22:34:39 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-05-03 22:34:41 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-03 22:34:41 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-03 22:34:41 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 22:34:41 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 22:34:41 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-05-03 22:34:44 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-03 22:34:44 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-03 22:34:44 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 22:34:44 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 22:34:44 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-05-03 22:34:58 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-03 22:34:58 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-03 22:34:58 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-03 22:34:58 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-03 22:34:59 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 22:34:59 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 35225 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 22:34:59 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 22:34:59 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 22:35:00 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19 ms. Found 3 JPA repository interfaces.
2025-05-03 22:35:00 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 22:35:00 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 22:35:00 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 22:35:00 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 22:35:00 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 22:35:00 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 825 ms
2025-05-03 22:35:00 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 22:35:00 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@74e497ae
2025-05-03 22:35:00 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-03 22:35:00 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-03 22:35:00 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-03 22:35:00 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-03 22:35:00 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-03 22:35:00 | WARN  | org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-05-03 22:35:01 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-03 22:35:01 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-03 22:35:01 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-03 22:35:01 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-03 22:35:02 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-03 22:35:02 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-03 22:35:02 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.364 seconds (process running for 3.764)
2025-05-03 22:35:05 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-03 22:35:05 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-03 22:35:05 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-03 22:35:05 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-03 22:35:05 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-03 22:35:05 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 22:35:05 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 22:35:05 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-03 22:35:13 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-03 22:35:13 | INFO  | org.example.service.CountryService - 🔄 Fetched 1 countries from DB and cached
2025-05-03 22:35:13 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 22:35:13 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 22:35:13 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-03 22:35:19 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-03 22:35:19 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-03 22:35:19 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 22:35:19 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 22:35:19 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-05-03 22:44:15 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-03 22:44:15 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-03 22:44:15 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-03 22:44:15 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-03 22:44:17 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 22:44:17 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 35590 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 22:44:17 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 22:44:17 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 22:44:17 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 24 ms. Found 3 JPA repository interfaces.
2025-05-03 22:44:18 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 22:44:18 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 22:44:18 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 22:44:18 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 22:44:18 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 22:44:18 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 756 ms
2025-05-03 22:44:18 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 22:44:18 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@5f0f70c7
2025-05-03 22:44:18 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-03 22:44:18 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-03 22:44:18 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-03 22:44:18 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-03 22:44:18 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-03 22:44:18 | WARN  | org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-05-03 22:44:19 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-03 22:44:19 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-03 22:44:19 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-03 22:44:19 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-03 22:44:20 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-03 22:44:20 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-03 22:44:20 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.334 seconds (process running for 3.7)
2025-05-03 22:44:30 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-03 22:44:30 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-03 22:44:30 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-03 22:44:30 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-03 22:44:30 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-03 22:44:30 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 22:44:30 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 22:44:30 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-03 22:44:39 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-03 22:44:39 | INFO  | org.example.service.CountryService - 🔄 Fetched 1 countries from DB and cached
2025-05-03 22:44:39 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 22:44:39 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 22:44:39 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-03 22:44:43 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), args=1
2025-05-03 22:44:43 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-03 22:44:43 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-03 22:44:43 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-03 22:44:43 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-03 22:44:43 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-05-03 22:44:46 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-03 22:44:46 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-03 22:44:46 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 22:44:46 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 22:44:46 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-05-03 22:44:48 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-03 22:44:48 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-03 22:44:48 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 22:44:48 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 22:44:48 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-05-03 22:44:53 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-03 22:44:53 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-03 22:44:53 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-03 22:44:53 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-03 22:44:54 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 22:44:54 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 35624 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 22:44:54 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 22:44:55 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 22:44:55 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 21 ms. Found 3 JPA repository interfaces.
2025-05-03 22:44:55 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 22:44:55 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 22:44:55 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 22:44:55 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 22:44:55 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 22:44:55 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 824 ms
2025-05-03 22:44:55 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 22:44:55 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@283ab206
2025-05-03 22:44:55 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-03 22:44:55 | WARN  | o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #6 of class path resource [db/init.sql]: INSERT INTO city (name, population, area, country_id) VALUES ('Minsk', 2000000, 348.84, 1), ('Gomel', 500000, 121.0, 1) ON CONFLICT DO NOTHING
2025-05-03 22:44:55 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-03 22:44:55 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-03 22:44:55 | INFO  | o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-05-03 22:44:55 | INFO  | o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-05-03 22:44:55 | ERROR | o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #6 of class path resource [db/init.sql]: INSERT INTO city (name, population, area, country_id) VALUES ('Minsk', 2000000, 348.84, 1), ('Gomel', 500000, 121.0, 1) ON CONFLICT DO NOTHING
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #6 of class path resource [db/init.sql]: INSERT INTO city (name, population, area, country_id) VALUES ('Minsk', 2000000, 348.84, 1), ('Gomel', 500000, 121.0, 1) ON CONFLICT DO NOTHING
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 18 common frames omitted
Caused by: org.postgresql.util.PSQLException: ERROR: insert or update on table "city" violates foreign key constraint "city_country_id_fkey"
  Подробности: Key (country_id)=(1) is not present in table "country".
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2713)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2401)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:368)
	at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:498)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:415)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:335)
	at org.postgresql.jdbc.PgStatement.executeCachedSql(PgStatement.java:321)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:297)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:292)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 28 common frames omitted
2025-05-03 22:45:06 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 22:45:06 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 35639 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 22:45:06 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 22:45:06 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 22:45:06 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19 ms. Found 3 JPA repository interfaces.
2025-05-03 22:45:07 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 22:45:07 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 22:45:07 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 22:45:07 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 22:45:07 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 22:45:07 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 744 ms
2025-05-03 22:45:07 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 22:45:07 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@175581eb
2025-05-03 22:45:07 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-03 22:45:07 | WARN  | o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #6 of class path resource [db/init.sql]: INSERT INTO city (name, population, area, country_id) VALUES ('Minsk', 2000000, 348.84, 1), ('Gomel', 500000, 121.0, 1) ON CONFLICT DO NOTHING
2025-05-03 22:45:07 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-03 22:45:07 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-03 22:45:07 | INFO  | o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-05-03 22:45:07 | INFO  | o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-05-03 22:45:07 | ERROR | o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #6 of class path resource [db/init.sql]: INSERT INTO city (name, population, area, country_id) VALUES ('Minsk', 2000000, 348.84, 1), ('Gomel', 500000, 121.0, 1) ON CONFLICT DO NOTHING
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #6 of class path resource [db/init.sql]: INSERT INTO city (name, population, area, country_id) VALUES ('Minsk', 2000000, 348.84, 1), ('Gomel', 500000, 121.0, 1) ON CONFLICT DO NOTHING
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 18 common frames omitted
Caused by: org.postgresql.util.PSQLException: ERROR: insert or update on table "city" violates foreign key constraint "city_country_id_fkey"
  Подробности: Key (country_id)=(1) is not present in table "country".
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2713)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2401)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:368)
	at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:498)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:415)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:335)
	at org.postgresql.jdbc.PgStatement.executeCachedSql(PgStatement.java:321)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:297)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:292)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 28 common frames omitted
2025-05-03 22:48:56 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 22:48:56 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 35761 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 22:48:56 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 22:48:57 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 22:48:57 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 20 ms. Found 3 JPA repository interfaces.
2025-05-03 22:48:57 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 22:48:57 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 22:48:57 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 22:48:57 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 22:48:57 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 22:48:57 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 843 ms
2025-05-03 22:48:57 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 22:48:57 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@5d14e99e
2025-05-03 22:48:57 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-03 22:48:57 | WARN  | o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000)
2025-05-03 22:48:57 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-03 22:48:57 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-03 22:48:57 | INFO  | o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-05-03 22:48:57 | INFO  | o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-05-03 22:48:57 | ERROR | o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 18 common frames omitted
Caused by: org.postgresql.util.PSQLException: Unterminated dollar quote started at position 3 in SQL DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000). Expected terminating $$
	at org.postgresql.core.Parser.checkParsePosition(Parser.java:1443)
	at org.postgresql.core.Parser.parseSql(Parser.java:1342)
	at org.postgresql.core.Parser.replaceProcessing(Parser.java:1294)
	at org.postgresql.core.CachedQueryCreateAction.create(CachedQueryCreateAction.java:43)
	at org.postgresql.core.QueryExecutorBase.createQueryByKey(QueryExecutorBase.java:369)
	at org.postgresql.jdbc.PgStatement.executeCachedSql(PgStatement.java:313)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:297)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:292)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 28 common frames omitted
2025-05-03 22:49:00 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 22:49:00 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 35772 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 22:49:00 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 22:49:01 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 22:49:01 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 18 ms. Found 3 JPA repository interfaces.
2025-05-03 22:49:01 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 22:49:01 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 22:49:01 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 22:49:01 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 22:49:01 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 22:49:01 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 722 ms
2025-05-03 22:49:01 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 22:49:01 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@6206b4a7
2025-05-03 22:49:01 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-03 22:49:01 | WARN  | o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000)
2025-05-03 22:49:01 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-03 22:49:01 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-03 22:49:01 | INFO  | o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-05-03 22:49:01 | INFO  | o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-05-03 22:49:01 | ERROR | o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 18 common frames omitted
Caused by: org.postgresql.util.PSQLException: Unterminated dollar quote started at position 3 in SQL DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000). Expected terminating $$
	at org.postgresql.core.Parser.checkParsePosition(Parser.java:1443)
	at org.postgresql.core.Parser.parseSql(Parser.java:1342)
	at org.postgresql.core.Parser.replaceProcessing(Parser.java:1294)
	at org.postgresql.core.CachedQueryCreateAction.create(CachedQueryCreateAction.java:43)
	at org.postgresql.core.QueryExecutorBase.createQueryByKey(QueryExecutorBase.java:369)
	at org.postgresql.jdbc.PgStatement.executeCachedSql(PgStatement.java:313)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:297)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:292)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 28 common frames omitted
2025-05-03 22:50:31 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 22:50:31 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 35838 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 22:50:31 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 22:50:31 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 22:50:31 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 18 ms. Found 3 JPA repository interfaces.
2025-05-03 22:50:31 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 22:50:31 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 22:50:31 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 22:50:31 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 22:50:31 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 22:50:31 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 767 ms
2025-05-03 22:50:32 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 22:50:32 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@5c1b89ac
2025-05-03 22:50:32 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-03 22:50:32 | WARN  | o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000)
2025-05-03 22:50:32 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-03 22:50:32 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-03 22:50:32 | INFO  | o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-05-03 22:50:32 | INFO  | o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-05-03 22:50:32 | ERROR | o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 18 common frames omitted
Caused by: org.postgresql.util.PSQLException: Unterminated dollar quote started at position 3 in SQL DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000). Expected terminating $$
	at org.postgresql.core.Parser.checkParsePosition(Parser.java:1443)
	at org.postgresql.core.Parser.parseSql(Parser.java:1342)
	at org.postgresql.core.Parser.replaceProcessing(Parser.java:1294)
	at org.postgresql.core.CachedQueryCreateAction.create(CachedQueryCreateAction.java:43)
	at org.postgresql.core.QueryExecutorBase.createQueryByKey(QueryExecutorBase.java:369)
	at org.postgresql.jdbc.PgStatement.executeCachedSql(PgStatement.java:313)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:297)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:292)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 28 common frames omitted
2025-05-03 22:52:13 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 22:52:13 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 35914 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 22:52:13 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 22:52:13 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 22:52:13 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 26 ms. Found 3 JPA repository interfaces.
2025-05-03 22:52:14 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 22:52:14 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 22:52:14 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 22:52:14 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 22:52:14 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 22:52:14 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 789 ms
2025-05-03 22:52:14 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 22:52:14 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@38cfecf3
2025-05-03 22:52:14 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-03 22:52:14 | WARN  | o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000)
2025-05-03 22:52:14 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-03 22:52:14 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-03 22:52:14 | INFO  | o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-05-03 22:52:14 | INFO  | o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-05-03 22:52:14 | ERROR | o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 18 common frames omitted
Caused by: org.postgresql.util.PSQLException: Unterminated dollar quote started at position 3 in SQL DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000). Expected terminating $$
	at org.postgresql.core.Parser.checkParsePosition(Parser.java:1443)
	at org.postgresql.core.Parser.parseSql(Parser.java:1342)
	at org.postgresql.core.Parser.replaceProcessing(Parser.java:1294)
	at org.postgresql.core.CachedQueryCreateAction.create(CachedQueryCreateAction.java:43)
	at org.postgresql.core.QueryExecutorBase.createQueryByKey(QueryExecutorBase.java:369)
	at org.postgresql.jdbc.PgStatement.executeCachedSql(PgStatement.java:313)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:297)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:292)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 28 common frames omitted
2025-05-03 22:53:02 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 22:53:02 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 35954 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 22:53:02 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 22:53:03 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 22:53:03 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 23 ms. Found 3 JPA repository interfaces.
2025-05-03 22:53:03 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 22:53:03 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 22:53:03 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 22:53:03 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 22:53:03 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 22:53:03 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 863 ms
2025-05-03 22:53:03 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 22:53:03 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@c14e5a5
2025-05-03 22:53:03 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-03 22:53:03 | WARN  | o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000)
2025-05-03 22:53:03 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-03 22:53:03 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-03 22:53:03 | INFO  | o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-05-03 22:53:03 | INFO  | o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-05-03 22:53:03 | ERROR | o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 18 common frames omitted
Caused by: org.postgresql.util.PSQLException: Unterminated dollar quote started at position 3 in SQL DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000). Expected terminating $$
	at org.postgresql.core.Parser.checkParsePosition(Parser.java:1443)
	at org.postgresql.core.Parser.parseSql(Parser.java:1342)
	at org.postgresql.core.Parser.replaceProcessing(Parser.java:1294)
	at org.postgresql.core.CachedQueryCreateAction.create(CachedQueryCreateAction.java:43)
	at org.postgresql.core.QueryExecutorBase.createQueryByKey(QueryExecutorBase.java:369)
	at org.postgresql.jdbc.PgStatement.executeCachedSql(PgStatement.java:313)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:297)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:292)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 28 common frames omitted
2025-05-03 22:53:24 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 22:53:24 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 35996 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 22:53:24 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 22:53:25 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 22:53:25 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19 ms. Found 3 JPA repository interfaces.
2025-05-03 22:53:25 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 22:53:25 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 22:53:25 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 22:53:25 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 22:53:25 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 22:53:25 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 762 ms
2025-05-03 22:53:25 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 22:53:25 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@9b3be1c
2025-05-03 22:53:25 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-03 22:53:25 | WARN  | o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000)
2025-05-03 22:53:25 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-03 22:53:25 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-03 22:53:25 | INFO  | o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-05-03 22:53:25 | INFO  | o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-05-03 22:53:25 | ERROR | o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 18 common frames omitted
Caused by: org.postgresql.util.PSQLException: Unterminated dollar quote started at position 3 in SQL DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000). Expected terminating $$
	at org.postgresql.core.Parser.checkParsePosition(Parser.java:1443)
	at org.postgresql.core.Parser.parseSql(Parser.java:1342)
	at org.postgresql.core.Parser.replaceProcessing(Parser.java:1294)
	at org.postgresql.core.CachedQueryCreateAction.create(CachedQueryCreateAction.java:43)
	at org.postgresql.core.QueryExecutorBase.createQueryByKey(QueryExecutorBase.java:369)
	at org.postgresql.jdbc.PgStatement.executeCachedSql(PgStatement.java:313)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:297)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:292)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 28 common frames omitted
2025-05-03 22:56:08 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 22:56:08 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 36105 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 22:56:08 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 22:56:08 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 22:56:08 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 25 ms. Found 3 JPA repository interfaces.
2025-05-03 22:56:09 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 22:56:09 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 22:56:09 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 22:56:09 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 22:56:09 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 22:56:09 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 862 ms
2025-05-03 22:56:09 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 22:56:09 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@175581eb
2025-05-03 22:56:09 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-03 22:56:09 | WARN  | o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000)
2025-05-03 22:56:09 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-03 22:56:09 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-03 22:56:09 | INFO  | o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-05-03 22:56:09 | INFO  | o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-05-03 22:56:09 | ERROR | o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 18 common frames omitted
Caused by: org.postgresql.util.PSQLException: Unterminated dollar quote started at position 3 in SQL DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000). Expected terminating $$
	at org.postgresql.core.Parser.checkParsePosition(Parser.java:1443)
	at org.postgresql.core.Parser.parseSql(Parser.java:1342)
	at org.postgresql.core.Parser.replaceProcessing(Parser.java:1294)
	at org.postgresql.core.CachedQueryCreateAction.create(CachedQueryCreateAction.java:43)
	at org.postgresql.core.QueryExecutorBase.createQueryByKey(QueryExecutorBase.java:369)
	at org.postgresql.jdbc.PgStatement.executeCachedSql(PgStatement.java:313)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:297)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:292)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 28 common frames omitted
2025-05-03 22:59:14 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 22:59:14 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 36238 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 22:59:14 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 22:59:14 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 22:59:14 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 18 ms. Found 3 JPA repository interfaces.
2025-05-03 22:59:14 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 22:59:14 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 22:59:14 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 22:59:14 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 22:59:14 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 22:59:14 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 801 ms
2025-05-03 22:59:15 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 22:59:15 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@25ad25f5
2025-05-03 22:59:15 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-03 22:59:15 | WARN  | o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000)
2025-05-03 22:59:15 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-03 22:59:15 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-03 22:59:15 | INFO  | o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-05-03 22:59:15 | INFO  | o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-05-03 22:59:15 | ERROR | o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 18 common frames omitted
Caused by: org.postgresql.util.PSQLException: Unterminated dollar quote started at position 3 in SQL DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000). Expected terminating $$
	at org.postgresql.core.Parser.checkParsePosition(Parser.java:1443)
	at org.postgresql.core.Parser.parseSql(Parser.java:1342)
	at org.postgresql.core.Parser.replaceProcessing(Parser.java:1294)
	at org.postgresql.core.CachedQueryCreateAction.create(CachedQueryCreateAction.java:43)
	at org.postgresql.core.QueryExecutorBase.createQueryByKey(QueryExecutorBase.java:369)
	at org.postgresql.jdbc.PgStatement.executeCachedSql(PgStatement.java:313)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:297)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:292)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 28 common frames omitted
2025-05-03 22:59:21 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 22:59:21 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 36254 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 22:59:21 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 22:59:21 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 22:59:21 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 20 ms. Found 3 JPA repository interfaces.
2025-05-03 22:59:21 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 22:59:21 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 22:59:21 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 22:59:21 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 22:59:21 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 22:59:21 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 752 ms
2025-05-03 22:59:21 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 22:59:22 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@40a1b6d4
2025-05-03 22:59:22 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-03 22:59:22 | WARN  | o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000)
2025-05-03 22:59:22 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-03 22:59:22 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-03 22:59:22 | INFO  | o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-05-03 22:59:22 | INFO  | o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-05-03 22:59:22 | ERROR | o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 18 common frames omitted
Caused by: org.postgresql.util.PSQLException: Unterminated dollar quote started at position 3 in SQL DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000). Expected terminating $$
	at org.postgresql.core.Parser.checkParsePosition(Parser.java:1443)
	at org.postgresql.core.Parser.parseSql(Parser.java:1342)
	at org.postgresql.core.Parser.replaceProcessing(Parser.java:1294)
	at org.postgresql.core.CachedQueryCreateAction.create(CachedQueryCreateAction.java:43)
	at org.postgresql.core.QueryExecutorBase.createQueryByKey(QueryExecutorBase.java:369)
	at org.postgresql.jdbc.PgStatement.executeCachedSql(PgStatement.java:313)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:297)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:292)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 28 common frames omitted
2025-05-03 23:00:34 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 23:00:34 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 36294 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 23:00:34 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 23:00:35 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 23:00:35 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 23 ms. Found 3 JPA repository interfaces.
2025-05-03 23:00:35 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 23:00:35 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 23:00:35 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 23:00:35 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 23:00:35 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 23:00:35 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 886 ms
2025-05-03 23:00:35 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 23:00:35 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@103c97ff
2025-05-03 23:00:35 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-03 23:00:35 | WARN  | o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000)
2025-05-03 23:00:35 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-03 23:00:35 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-03 23:00:35 | INFO  | o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-05-03 23:00:35 | INFO  | o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-05-03 23:00:35 | ERROR | o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 18 common frames omitted
Caused by: org.postgresql.util.PSQLException: Unterminated dollar quote started at position 3 in SQL DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM country) THEN INSERT INTO country (name, capital, population, area, gdp) VALUES ('Belarus', 'Minsk', 9500000, 207000, 65000000000). Expected terminating $$
	at org.postgresql.core.Parser.checkParsePosition(Parser.java:1443)
	at org.postgresql.core.Parser.parseSql(Parser.java:1342)
	at org.postgresql.core.Parser.replaceProcessing(Parser.java:1294)
	at org.postgresql.core.CachedQueryCreateAction.create(CachedQueryCreateAction.java:43)
	at org.postgresql.core.QueryExecutorBase.createQueryByKey(QueryExecutorBase.java:369)
	at org.postgresql.jdbc.PgStatement.executeCachedSql(PgStatement.java:313)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:297)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:292)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 28 common frames omitted
2025-05-03 23:01:19 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 23:01:19 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 36321 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 23:01:19 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 23:01:19 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 23:01:19 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 25 ms. Found 3 JPA repository interfaces.
2025-05-03 23:01:20 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 23:01:20 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 23:01:20 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 23:01:20 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 23:01:20 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 23:01:20 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 924 ms
2025-05-03 23:01:20 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 23:01:20 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@5c1b89ac
2025-05-03 23:01:20 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-03 23:01:20 | WARN  | o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #6 of class path resource [db/init.sql]: INSERT INTO city (name, population, area, country_id) SELECT 'Minsk', 2000000, 348.84, id FROM country WHERE name = 'Belarus' WHERE NOT EXISTS (SELECT 1 FROM city)
2025-05-03 23:01:20 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-03 23:01:20 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-03 23:01:20 | INFO  | o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-05-03 23:01:20 | INFO  | o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-05-03 23:01:20 | ERROR | o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #6 of class path resource [db/init.sql]: INSERT INTO city (name, population, area, country_id) SELECT 'Minsk', 2000000, 348.84, id FROM country WHERE name = 'Belarus' WHERE NOT EXISTS (SELECT 1 FROM city)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #6 of class path resource [db/init.sql]: INSERT INTO city (name, population, area, country_id) SELECT 'Minsk', 2000000, 348.84, id FROM country WHERE name = 'Belarus' WHERE NOT EXISTS (SELECT 1 FROM city)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 18 common frames omitted
Caused by: org.postgresql.util.PSQLException: ERROR: syntax error at or near "WHERE"
  Позиция: 127
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2713)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2401)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:368)
	at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:498)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:415)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:335)
	at org.postgresql.jdbc.PgStatement.executeCachedSql(PgStatement.java:321)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:297)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:292)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 28 common frames omitted
2025-05-03 23:01:46 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 23:01:46 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 36380 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 23:01:46 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 23:01:47 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 23:01:47 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 20 ms. Found 3 JPA repository interfaces.
2025-05-03 23:01:47 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 23:01:47 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 23:01:47 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 23:01:47 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 23:01:47 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 23:01:47 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 793 ms
2025-05-03 23:01:47 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 23:01:47 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@40a1b6d4
2025-05-03 23:01:47 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-03 23:01:47 | WARN  | o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #6 of class path resource [db/init.sql]: INSERT INTO city (name, population, area, country_id) SELECT 'Minsk', 2000000, 348.84, id FROM country WHERE name = 'Belarus' WHERE NOT EXISTS (SELECT 1 FROM city)
2025-05-03 23:01:47 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-03 23:01:47 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-03 23:01:47 | INFO  | o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-05-03 23:01:47 | INFO  | o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-05-03 23:01:47 | ERROR | o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #6 of class path resource [db/init.sql]: INSERT INTO city (name, population, area, country_id) SELECT 'Minsk', 2000000, 348.84, id FROM country WHERE name = 'Belarus' WHERE NOT EXISTS (SELECT 1 FROM city)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #6 of class path resource [db/init.sql]: INSERT INTO city (name, population, area, country_id) SELECT 'Minsk', 2000000, 348.84, id FROM country WHERE name = 'Belarus' WHERE NOT EXISTS (SELECT 1 FROM city)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 18 common frames omitted
Caused by: org.postgresql.util.PSQLException: ERROR: syntax error at or near "WHERE"
  Позиция: 127
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2713)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2401)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:368)
	at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:498)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:415)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:335)
	at org.postgresql.jdbc.PgStatement.executeCachedSql(PgStatement.java:321)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:297)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:292)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 28 common frames omitted
2025-05-03 23:02:29 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 23:02:29 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 36412 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 23:02:29 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 23:02:30 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 23:02:30 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19 ms. Found 3 JPA repository interfaces.
2025-05-03 23:02:30 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 23:02:30 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 23:02:30 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 23:02:30 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 23:02:30 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 23:02:30 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 772 ms
2025-05-03 23:02:30 | WARN  | o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: No data scripts found at location 'classpath:db/schema.sql'
2025-05-03 23:02:30 | INFO  | o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-05-03 23:02:30 | INFO  | o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-05-03 23:02:30 | ERROR | o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: No data scripts found at location 'classpath:db/schema.sql'
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
Caused by: java.lang.IllegalStateException: No data scripts found at location 'classpath:db/schema.sql'
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.getScripts(AbstractScriptDatabaseInitializer.java:129)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:106)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 18 common frames omitted
2025-05-03 23:04:02 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 23:04:02 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 36451 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 23:04:02 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 23:04:02 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 23:04:02 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 22 ms. Found 3 JPA repository interfaces.
2025-05-03 23:04:03 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 23:04:03 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 23:04:03 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 23:04:03 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 23:04:03 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 23:04:03 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 905 ms
2025-05-03 23:04:03 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 23:04:03 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@682618e5
2025-05-03 23:04:03 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-03 23:04:03 | WARN  | o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #6 of class path resource [db/init.sql]: INSERT INTO city (name, population, area, country_id) SELECT 'Minsk', 2000000, 348.84, id FROM country WHERE name = 'Belarus' WHERE NOT EXISTS (SELECT 1 FROM city)
2025-05-03 23:04:03 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-03 23:04:03 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-03 23:04:03 | INFO  | o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-05-03 23:04:03 | INFO  | o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-05-03 23:04:03 | ERROR | o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #6 of class path resource [db/init.sql]: INSERT INTO city (name, population, area, country_id) SELECT 'Minsk', 2000000, 348.84, id FROM country WHERE name = 'Belarus' WHERE NOT EXISTS (SELECT 1 FROM city)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #6 of class path resource [db/init.sql]: INSERT INTO city (name, population, area, country_id) SELECT 'Minsk', 2000000, 348.84, id FROM country WHERE name = 'Belarus' WHERE NOT EXISTS (SELECT 1 FROM city)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 18 common frames omitted
Caused by: org.postgresql.util.PSQLException: ERROR: syntax error at or near "WHERE"
  Позиция: 127
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2713)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2401)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:368)
	at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:498)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:415)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:335)
	at org.postgresql.jdbc.PgStatement.executeCachedSql(PgStatement.java:321)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:297)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:292)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 28 common frames omitted
2025-05-03 23:04:57 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 23:04:57 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 36500 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 23:04:57 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 23:04:57 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 23:04:57 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 26 ms. Found 3 JPA repository interfaces.
2025-05-03 23:04:58 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 23:04:58 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 23:04:58 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 23:04:58 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 23:04:58 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 23:04:58 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 942 ms
2025-05-03 23:04:58 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 23:04:58 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@3e03046d
2025-05-03 23:04:58 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-03 23:04:58 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-03 23:04:58 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-03 23:04:58 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-03 23:04:58 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-03 23:04:58 | WARN  | org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-05-03 23:04:59 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-03 23:04:59 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-03 23:04:59 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-03 23:04:59 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-03 23:05:00 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-03 23:05:00 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-03 23:05:00 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.685 seconds (process running for 4.142)
2025-05-03 23:05:05 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-03 23:05:05 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-03 23:05:05 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-03 23:05:05 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-03 23:05:05 | INFO  | org.example.service.CountryService - 🔄 Fetched 1 countries from DB and cached
2025-05-03 23:05:05 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 23:05:05 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 23:05:05 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-03 23:05:10 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=1
2025-05-03 23:05:10 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-03 23:05:10 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-03 23:05:10 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-03 23:05:10 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-03 23:05:13 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-03 23:05:13 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-03 23:05:13 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:05:13 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:05:13 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-05-03 23:05:22 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.NationController.getNationsByCountryId(Long)), args=1
2025-05-03 23:05:22 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.NationController.getNationsByCountryId(Long))
2025-05-03 23:05:22 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.NationController.getNationsByCountryId(Long))
2025-05-03 23:05:22 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-05-03 23:05:32 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), args=1
2025-05-03 23:05:32 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-03 23:05:32 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-03 23:05:32 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-03 23:05:32 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-03 23:05:32 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-05-03 23:05:35 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-03 23:05:35 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-03 23:05:35 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:05:35 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:05:35 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-05-03 23:05:39 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-03 23:05:39 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-03 23:05:39 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 23:05:39 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 23:05:39 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 7
2025-05-03 23:05:42 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-03 23:05:42 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-03 23:05:42 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-03 23:05:42 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-03 23:05:43 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 23:05:43 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 36524 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 23:05:43 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 23:05:44 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 23:05:44 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 29 ms. Found 3 JPA repository interfaces.
2025-05-03 23:05:44 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 23:05:44 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 23:05:44 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 23:05:44 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 23:05:44 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 23:05:44 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 915 ms
2025-05-03 23:05:44 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 23:05:44 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@718989fa
2025-05-03 23:05:44 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-03 23:05:44 | WARN  | o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #8 of class path resource [db/init.sql]: ALTER TABLE country ADD CONSTRAINT uk_country_name UNIQUE (name)
2025-05-03 23:05:44 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-03 23:05:44 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-03 23:05:44 | INFO  | o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-05-03 23:05:44 | INFO  | o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-05-03 23:05:44 | ERROR | o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #8 of class path resource [db/init.sql]: ALTER TABLE country ADD CONSTRAINT uk_country_name UNIQUE (name)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #8 of class path resource [db/init.sql]: ALTER TABLE country ADD CONSTRAINT uk_country_name UNIQUE (name)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 18 common frames omitted
Caused by: org.postgresql.util.PSQLException: ERROR: relation "uk_country_name" already exists
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2713)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2401)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:368)
	at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:498)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:415)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:335)
	at org.postgresql.jdbc.PgStatement.executeCachedSql(PgStatement.java:321)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:297)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:292)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 28 common frames omitted
2025-05-03 23:07:11 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 23:07:11 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 36581 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 23:07:11 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 23:07:12 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 23:07:12 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 25 ms. Found 3 JPA repository interfaces.
2025-05-03 23:07:12 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 23:07:12 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 23:07:12 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 23:07:12 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 23:07:12 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 23:07:12 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 879 ms
2025-05-03 23:07:12 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 23:07:12 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@5d14e99e
2025-05-03 23:07:12 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-03 23:07:12 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-03 23:07:12 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-03 23:07:13 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-03 23:07:13 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-03 23:07:13 | WARN  | org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-05-03 23:07:13 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-03 23:07:13 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-03 23:07:13 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-03 23:07:13 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-03 23:07:15 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-03 23:07:15 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-03 23:07:15 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.518 seconds (process running for 3.937)
2025-05-03 23:07:17 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-03 23:07:17 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-03 23:07:17 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-03 23:07:17 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-03 23:07:18 | INFO  | org.example.service.CountryService - 🔄 Fetched 1 countries from DB and cached
2025-05-03 23:07:18 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 23:07:18 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 23:07:18 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-03 23:07:22 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-03 23:07:22 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-03 23:07:22 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:07:22 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:07:22 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-03 23:07:30 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), args=2
2025-05-03 23:07:30 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 2
2025-05-03 23:07:30 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 2
2025-05-03 23:07:30 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-03 23:07:30 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-03 23:07:30 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-05-03 23:07:33 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-03 23:07:33 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-03 23:07:33 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:07:33 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:07:33 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-05-03 23:07:38 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-03 23:07:38 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-03 23:07:38 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-03 23:07:38 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-03 23:07:39 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 23:07:39 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 36601 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 23:07:39 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 23:07:40 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 23:07:40 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 20 ms. Found 3 JPA repository interfaces.
2025-05-03 23:07:40 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 23:07:40 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 23:07:40 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 23:07:40 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 23:07:40 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 23:07:40 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 801 ms
2025-05-03 23:07:40 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 23:07:40 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@2baf72d5
2025-05-03 23:07:40 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-03 23:07:40 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-03 23:07:40 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-03 23:07:40 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-03 23:07:40 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-03 23:07:41 | WARN  | org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-05-03 23:07:41 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-03 23:07:41 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-03 23:07:41 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-03 23:07:41 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-03 23:07:43 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-03 23:07:43 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-03 23:07:43 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.495 seconds (process running for 3.864)
2025-05-03 23:07:43 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-03 23:07:43 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-03 23:07:43 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-03 23:07:43 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-03 23:07:43 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-03 23:07:43 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:07:43 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:07:43 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-03 23:07:49 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-03 23:07:49 | INFO  | org.example.service.CountryService - 🔄 Fetched 1 countries from DB and cached
2025-05-03 23:07:49 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 23:07:49 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 23:07:49 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-03 23:08:34 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-03 23:08:34 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-03 23:08:34 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-03 23:08:34 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-03 23:08:36 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 23:08:36 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 36645 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 23:08:36 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 23:08:36 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 23:08:36 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 23 ms. Found 3 JPA repository interfaces.
2025-05-03 23:08:37 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 23:08:37 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 23:08:37 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 23:08:37 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 23:08:37 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 23:08:37 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 865 ms
2025-05-03 23:08:37 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 23:08:37 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@2baf72d5
2025-05-03 23:08:37 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-03 23:08:37 | WARN  | o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: ALTER TABLE country ADD CONSTRAINT uk_country_name UNIQUE (name)
2025-05-03 23:08:37 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-03 23:08:37 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-03 23:08:37 | INFO  | o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-05-03 23:08:37 | INFO  | o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-05-03 23:08:37 | ERROR | o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: ALTER TABLE country ADD CONSTRAINT uk_country_name UNIQUE (name)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: ALTER TABLE country ADD CONSTRAINT uk_country_name UNIQUE (name)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 18 common frames omitted
Caused by: org.postgresql.util.PSQLException: ERROR: relation "uk_country_name" already exists
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2713)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2401)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:368)
	at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:498)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:415)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:335)
	at org.postgresql.jdbc.PgStatement.executeCachedSql(PgStatement.java:321)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:297)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:292)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 28 common frames omitted
2025-05-03 23:09:07 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 23:09:07 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 36693 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 23:09:07 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 23:09:07 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 23:09:07 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 24 ms. Found 3 JPA repository interfaces.
2025-05-03 23:09:07 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 23:09:08 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 23:09:08 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 23:09:08 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 23:09:08 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 23:09:08 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 960 ms
2025-05-03 23:09:08 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 23:09:08 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@38cfecf3
2025-05-03 23:09:08 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-03 23:09:08 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-03 23:09:08 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-03 23:09:08 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-03 23:09:08 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-03 23:09:08 | WARN  | org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-05-03 23:09:08 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-03 23:09:09 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-03 23:09:09 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-03 23:09:09 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-03 23:09:10 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-03 23:09:10 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-03 23:09:10 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.773 seconds (process running for 4.222)
2025-05-03 23:09:11 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-03 23:09:11 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-03 23:09:11 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-03 23:09:11 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-03 23:09:11 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-03 23:09:11 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 23:09:11 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 23:09:11 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-03 23:09:14 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-03 23:09:14 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-03 23:09:14 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 23:09:14 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 23:09:14 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-03 23:09:18 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=1
2025-05-03 23:09:18 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-03 23:09:18 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), exception: Country not found
2025-05-03 23:09:18 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-03 23:09:18 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-05-03 23:09:26 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country)), args=Country(id=null, name=Germany, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cities=[], nations=null)
2025-05-03 23:09:26 | INFO  | org.example.service.CountryService - ✨ Created country: Germany (ID: 1)
2025-05-03 23:09:26 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-03 23:09:26 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-03 23:09:26 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-05-03 23:09:29 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-03 23:09:29 | INFO  | org.example.service.CountryService - 🔄 Fetched 1 countries from DB and cached
2025-05-03 23:09:29 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 23:09:29 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 23:09:29 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-05-03 23:09:35 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List)), args=1,[City(id=null, name=Minsk, population=2000000.0, areaSquareKm=409.5, country=null), City(id=null, name=Grodno, population=370000.0, areaSquareKm=142.1, country=null)]
2025-05-03 23:09:35 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'Germany' (ID: 1)
2025-05-03 23:09:35 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 1). Action: ADD
2025-05-03 23:09:35 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 2) to country 'Germany' (ID: 1)
2025-05-03 23:09:35 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 1). Action: ADD
2025-05-03 23:09:35 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-03 23:09:35 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-03 23:09:35 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-05-03 23:09:38 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-03 23:09:38 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-03 23:09:38 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:09:38 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:09:38 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 7
2025-05-03 23:09:45 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), args=1
2025-05-03 23:09:45 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-03 23:09:45 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-03 23:09:45 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-03 23:09:45 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-03 23:09:45 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 8
2025-05-03 23:09:47 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-03 23:09:47 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-03 23:09:47 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:09:47 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:09:47 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 9
2025-05-03 23:09:51 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-03 23:09:51 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-03 23:09:51 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-03 23:09:51 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-03 23:09:52 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 23:09:52 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 36731 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 23:09:52 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 23:09:52 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 23:09:52 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 25 ms. Found 3 JPA repository interfaces.
2025-05-03 23:09:53 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 23:09:53 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 23:09:53 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 23:09:53 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 23:09:53 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 23:09:53 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 815 ms
2025-05-03 23:09:53 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 23:09:53 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@35fa450f
2025-05-03 23:09:53 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-03 23:09:53 | WARN  | o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: ALTER TABLE country ADD CONSTRAINT uk_country_name UNIQUE (name)
2025-05-03 23:09:53 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-03 23:09:53 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-03 23:09:53 | INFO  | o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-05-03 23:09:53 | INFO  | o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-05-03 23:09:53 | ERROR | o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: ALTER TABLE country ADD CONSTRAINT uk_country_name UNIQUE (name)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: ALTER TABLE country ADD CONSTRAINT uk_country_name UNIQUE (name)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 18 common frames omitted
Caused by: org.postgresql.util.PSQLException: ERROR: relation "uk_country_name" already exists
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2713)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2401)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:368)
	at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:498)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:415)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:335)
	at org.postgresql.jdbc.PgStatement.executeCachedSql(PgStatement.java:321)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:297)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:292)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 28 common frames omitted
2025-05-03 23:11:52 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 23:11:52 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 36815 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 23:11:52 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 23:11:53 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 23:11:53 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 26 ms. Found 3 JPA repository interfaces.
2025-05-03 23:11:53 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 23:11:53 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 23:11:53 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 23:11:53 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 23:11:53 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 23:11:53 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 902 ms
2025-05-03 23:11:53 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 23:11:53 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@9b3be1c
2025-05-03 23:11:53 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-03 23:11:53 | WARN  | o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: ALTER TABLE country ADD CONSTRAINT IF NOT EXISTS uk_country_name UNIQUE (name)
2025-05-03 23:11:53 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-03 23:11:53 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-03 23:11:53 | INFO  | o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-05-03 23:11:53 | INFO  | o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-05-03 23:11:53 | ERROR | o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: ALTER TABLE country ADD CONSTRAINT IF NOT EXISTS uk_country_name UNIQUE (name)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: ALTER TABLE country ADD CONSTRAINT IF NOT EXISTS uk_country_name UNIQUE (name)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 18 common frames omitted
Caused by: org.postgresql.util.PSQLException: ERROR: syntax error at or near "NOT"
  Позиция: 39
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2713)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2401)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:368)
	at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:498)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:415)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:335)
	at org.postgresql.jdbc.PgStatement.executeCachedSql(PgStatement.java:321)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:297)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:292)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 28 common frames omitted
2025-05-03 23:12:17 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 23:12:17 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 36849 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 23:12:17 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 23:12:17 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 23:12:18 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 39 ms. Found 3 JPA repository interfaces.
2025-05-03 23:12:18 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 23:12:18 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 23:12:18 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 23:12:18 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 23:12:18 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 23:12:18 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 999 ms
2025-05-03 23:12:18 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 23:12:18 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@2baf72d5
2025-05-03 23:12:18 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-03 23:12:18 | WARN  | o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: ALTER TABLE country ADD CONSTRAINT IF NOT EXISTS uk_country_name UNIQUE (name)
2025-05-03 23:12:18 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-03 23:12:18 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-03 23:12:18 | INFO  | o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-05-03 23:12:18 | INFO  | o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-05-03 23:12:18 | ERROR | o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: ALTER TABLE country ADD CONSTRAINT IF NOT EXISTS uk_country_name UNIQUE (name)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: ALTER TABLE country ADD CONSTRAINT IF NOT EXISTS uk_country_name UNIQUE (name)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 18 common frames omitted
Caused by: org.postgresql.util.PSQLException: ERROR: syntax error at or near "NOT"
  Позиция: 39
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2713)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2401)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:368)
	at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:498)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:415)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:335)
	at org.postgresql.jdbc.PgStatement.executeCachedSql(PgStatement.java:321)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:297)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:292)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 28 common frames omitted
2025-05-03 23:25:31 | DEBUG | org.jboss.logging - Logging Provider: org.jboss.logging.Slf4jLoggerProvider found via system property
2025-05-03 23:25:31 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 23:25:31 | DEBUG | o.h.v.i.x.config.ValidationXmlParser - Trying to load META-INF/validation.xml for XML based Validator configuration.
2025-05-03 23:25:31 | DEBUG | o.h.v.i.x.c.ResourceLoaderHelper - Trying to load META-INF/validation.xml via TCCL
2025-05-03 23:25:31 | DEBUG | o.h.v.i.x.c.ResourceLoaderHelper - Trying to load META-INF/validation.xml via Hibernate Validator's class loader
2025-05-03 23:25:31 | DEBUG | o.h.v.i.x.config.ValidationXmlParser - No META-INF/validation.xml found. Using annotation based configuration only.
2025-05-03 23:25:31 | DEBUG | o.h.v.i.e.r.TraversableResolvers - Found jakarta.persistence.Persistence on classpath containing 'getPersistenceUtil'. Assuming JPA 2 environment. Trying to instantiate JPA aware TraversableResolver
2025-05-03 23:25:31 | DEBUG | o.h.v.i.e.r.TraversableResolvers - Instantiated JPA aware TraversableResolver of type org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.
2025-05-03 23:25:31 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 37295 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 23:25:31 | DEBUG | o.example.CountrySearchApplication - Running with Spring Boot v3.2.2, Spring v6.1.3
2025-05-03 23:25:31 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 23:25:31 | DEBUG | o.s.boot.SpringApplication - Loading source class org.example.CountrySearchApplication
2025-05-03 23:25:32 | DEBUG | o.h.v.m.ResourceBundleMessageInterpolator - Loaded expression factory via original TCCL
2025-05-03 23:25:32 | DEBUG | o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@376a312c
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory'
2025-05-03 23:25:32 | DEBUG | o.h.v.i.e.ValidatorFactoryConfigurationHelper - HV000252: Using org.hibernate.validator.internal.engine.DefaultPropertyNodeNameProvider as property node name provider.
2025-05-03 23:25:32 | DEBUG | o.h.v.i.e.ValidatorFactoryConfigurationHelper - HV000234: Using org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator as ValidatorFactory-scoped message interpolator.
2025-05-03 23:25:32 | DEBUG | o.h.v.i.e.ValidatorFactoryConfigurationHelper - HV000234: Using org.hibernate.validator.internal.engine.resolver.JPATraversableResolver as ValidatorFactory-scoped traversable resolver.
2025-05-03 23:25:32 | DEBUG | o.h.v.i.e.ValidatorFactoryConfigurationHelper - HV000234: Using org.hibernate.validator.internal.util.ExecutableParameterNameProvider as ValidatorFactory-scoped parameter name provider.
2025-05-03 23:25:32 | DEBUG | o.h.v.i.e.ValidatorFactoryConfigurationHelper - HV000234: Using org.hibernate.validator.internal.engine.DefaultClockProvider as ValidatorFactory-scoped clock provider.
2025-05-03 23:25:32 | DEBUG | o.h.v.i.e.ValidatorFactoryConfigurationHelper - HV000234: Using org.hibernate.validator.internal.engine.scripting.DefaultScriptEvaluatorFactory as ValidatorFactory-scoped script evaluator factory.
2025-05-03 23:25:32 | DEBUG | o.s.c.a.ClassPathBeanDefinitionScanner - Identified candidate component class: file [/Users/snrteftelya/Desktop/CountrySearch/target/classes/org/example/aspect/CountrySearchAspect.class]
2025-05-03 23:25:32 | DEBUG | o.s.c.a.ClassPathBeanDefinitionScanner - Identified candidate component class: file [/Users/snrteftelya/Desktop/CountrySearch/target/classes/org/example/cache/SearchCache.class]
2025-05-03 23:25:32 | DEBUG | o.s.c.a.ClassPathBeanDefinitionScanner - Identified candidate component class: file [/Users/snrteftelya/Desktop/CountrySearch/target/classes/org/example/config/SwaggerConfig.class]
2025-05-03 23:25:32 | DEBUG | o.s.c.a.ClassPathBeanDefinitionScanner - Identified candidate component class: file [/Users/snrteftelya/Desktop/CountrySearch/target/classes/org/example/controller/CityController.class]
2025-05-03 23:25:32 | DEBUG | o.s.c.a.ClassPathBeanDefinitionScanner - Identified candidate component class: file [/Users/snrteftelya/Desktop/CountrySearch/target/classes/org/example/controller/CountryController.class]
2025-05-03 23:25:32 | DEBUG | o.s.c.a.ClassPathBeanDefinitionScanner - Identified candidate component class: file [/Users/snrteftelya/Desktop/CountrySearch/target/classes/org/example/controller/LogsController.class]
2025-05-03 23:25:32 | DEBUG | o.s.c.a.ClassPathBeanDefinitionScanner - Identified candidate component class: file [/Users/snrteftelya/Desktop/CountrySearch/target/classes/org/example/controller/NationController.class]
2025-05-03 23:25:32 | DEBUG | o.s.c.a.ClassPathBeanDefinitionScanner - Identified candidate component class: file [/Users/snrteftelya/Desktop/CountrySearch/target/classes/org/example/controller/SearchController.class]
2025-05-03 23:25:32 | DEBUG | o.s.c.a.ClassPathBeanDefinitionScanner - Identified candidate component class: file [/Users/snrteftelya/Desktop/CountrySearch/target/classes/org/example/counter/ServiceCounter.class]
2025-05-03 23:25:32 | DEBUG | o.s.c.a.ClassPathBeanDefinitionScanner - Identified candidate component class: file [/Users/snrteftelya/Desktop/CountrySearch/target/classes/org/example/exception/ExceptionManager.class]
2025-05-03 23:25:32 | DEBUG | o.s.c.a.ClassPathBeanDefinitionScanner - Ignored because not a concrete top-level class: file [/Users/snrteftelya/Desktop/CountrySearch/target/classes/org/example/repository/CityRepository.class]
2025-05-03 23:25:32 | DEBUG | o.s.c.a.ClassPathBeanDefinitionScanner - Ignored because not a concrete top-level class: file [/Users/snrteftelya/Desktop/CountrySearch/target/classes/org/example/repository/CountryRepository.class]
2025-05-03 23:25:32 | DEBUG | o.s.c.a.ClassPathBeanDefinitionScanner - Ignored because not a concrete top-level class: file [/Users/snrteftelya/Desktop/CountrySearch/target/classes/org/example/repository/NationRepository.class]
2025-05-03 23:25:32 | DEBUG | o.s.c.a.ClassPathBeanDefinitionScanner - Identified candidate component class: file [/Users/snrteftelya/Desktop/CountrySearch/target/classes/org/example/service/CityService.class]
2025-05-03 23:25:32 | DEBUG | o.s.c.a.ClassPathBeanDefinitionScanner - Identified candidate component class: file [/Users/snrteftelya/Desktop/CountrySearch/target/classes/org/example/service/CountryService.class]
2025-05-03 23:25:32 | DEBUG | o.s.c.a.ClassPathBeanDefinitionScanner - Identified candidate component class: file [/Users/snrteftelya/Desktop/CountrySearch/target/classes/org/example/service/NationService.class]
2025-05-03 23:25:32 | DEBUG | o.s.b.c.p.s.ConfigurationPropertySourcesPropertyResolver$DefaultResolver - Found key 'DATABASE_URL' in PropertySource 'systemProperties' with value of type String
2025-05-03 23:25:32 | DEBUG | sun.rmi.transport.tcp - RMI TCP Connection(1)-127.0.0.1: (port 50528) op = 82
2025-05-03 23:25:32 | DEBUG | sun.rmi.transport.tcp - RMI TCP Connection(1)-127.0.0.1: (port 50528) op = 80
2025-05-03 23:25:32 | DEBUG | sun.rmi.transport.tcp - RMI TCP Connection(1)-127.0.0.1: (port 50528) op = 80
2025-05-03 23:25:32 | DEBUG | sun.rmi.loader - RMI TCP Connection(1)-127.0.0.1: name = "[Ljava.rmi.server.ObjID;", codebase = "", defaultLoader = jdk.internal.loader.ClassLoaders$PlatformClassLoader@246b45b9
2025-05-03 23:25:32 | DEBUG | sun.rmi.loader - RMI TCP Connection(1)-127.0.0.1: name = "java.rmi.server.ObjID", codebase = "", defaultLoader = jdk.internal.loader.ClassLoaders$PlatformClassLoader@246b45b9
2025-05-03 23:25:32 | DEBUG | sun.rmi.loader - RMI TCP Connection(1)-127.0.0.1: name = "java.rmi.server.UID", codebase = "", defaultLoader = jdk.internal.loader.ClassLoaders$PlatformClassLoader@246b45b9
2025-05-03 23:25:32 | DEBUG | sun.rmi.loader - RMI TCP Connection(1)-127.0.0.1: name = "java.rmi.dgc.Lease", codebase = "", defaultLoader = jdk.internal.loader.ClassLoaders$PlatformClassLoader@246b45b9
2025-05-03 23:25:32 | DEBUG | sun.rmi.loader - RMI TCP Connection(1)-127.0.0.1: name = "java.rmi.dgc.VMID", codebase = "", defaultLoader = jdk.internal.loader.ClassLoaders$PlatformClassLoader@246b45b9
2025-05-03 23:25:32 | DEBUG | sun.rmi.loader - RMI TCP Connection(1)-127.0.0.1: name = "[B", codebase = "", defaultLoader = jdk.internal.loader.ClassLoaders$PlatformClassLoader@246b45b9
2025-05-03 23:25:32 | DEBUG | sun.rmi.transport.tcp - RMI TCP Connection(1)-127.0.0.1: (port 50528) op = 84
2025-05-03 23:25:32 | DEBUG | sun.rmi.transport.tcp - RMI TCP Connection(1)-127.0.0.1: (port 50528) op = 80
2025-05-03 23:25:32 | DEBUG | sun.rmi.transport.tcp - RMI TCP Connection(1)-127.0.0.1: (port 50528) op = 80
2025-05-03 23:25:32 | DEBUG | sun.rmi.loader - RMI TCP Connection(1)-127.0.0.1: name = "javax.management.ObjectName", codebase = ""
2025-05-03 23:25:32 | DEBUG | javax.management.remote.rmi - connectionId=rmi://127.0.0.1  2, name=org.springframework.boot:type=Admin,name=SpringApplication, attribute=Ready
2025-05-03 23:25:32 | DEBUG | sun.rmi.server.call - RMI TCP Connection(1)-127.0.0.1: [127.0.0.1] exception: 
javax.management.InstanceNotFoundException: org.springframework.boot:type=Admin,name=SpringApplication
	at java.management/com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getMBean(DefaultMBeanServerInterceptor.java:1073)
	at java.management/com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getAttribute(DefaultMBeanServerInterceptor.java:632)
	at java.management/com.sun.jmx.mbeanserver.JmxMBeanServer.getAttribute(JmxMBeanServer.java:679)
	at java.management.rmi/javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1497)
	at java.management.rmi/javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1348)
	at java.management.rmi/javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1435)
	at java.management.rmi/javax.management.remote.rmi.RMIConnectionImpl.getAttribute(RMIConnectionImpl.java:647)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:360)
	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:200)
	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:197)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
	at java.rmi/sun.rmi.transport.Transport.serviceCall(Transport.java:196)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:598)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:844)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:721)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:400)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:720)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-05-03 23:25:32 | DEBUG | sun.rmi.transport.tcp - RMI TCP Connection(1)-127.0.0.1: (port 50528) op = 80
2025-05-03 23:25:32 | DEBUG | javax.management.remote.rmi - [javax.management.remote.rmi.RMIConnectionImpl@33cdd8f6: connectionId=rmi://127.0.0.1  2] closing.
2025-05-03 23:25:32 | DEBUG | javax.management.remote.rmi - [javax.management.remote.rmi.RMIConnectionImpl@33cdd8f6: connectionId=rmi://127.0.0.1  2] closed.
2025-05-03 23:25:32 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.AutoConfigurationPackages'
2025-05-03 23:25:32 | DEBUG | o.s.b.a.AutoConfigurationPackages - @EnableAutoConfiguration was declared on a class in the package 'org.example'. Automatic @Repository and @Entity scanning is enabled.
2025-05-03 23:25:32 | DEBUG | o.s.d.r.c.RepositoryConfigurationDelegate - Scanning for JPA repositories in packages org.example.
2025-05-03 23:25:32 | DEBUG | o.s.d.r.c.RepositoryComponentProvider - Identified candidate component class: file [/Users/snrteftelya/Desktop/CountrySearch/target/classes/org/example/repository/CityRepository.class]
2025-05-03 23:25:32 | DEBUG | o.s.d.r.c.RepositoryComponentProvider - Identified candidate component class: file [/Users/snrteftelya/Desktop/CountrySearch/target/classes/org/example/repository/CountryRepository.class]
2025-05-03 23:25:32 | DEBUG | o.s.d.r.c.RepositoryComponentProvider - Identified candidate component class: file [/Users/snrteftelya/Desktop/CountrySearch/target/classes/org/example/repository/NationRepository.class]
2025-05-03 23:25:32 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 21 ms. Found 3 JPA repository interfaces.
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'propertySourcesPlaceholderConfigurer'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'emBeanDefinitionRegistrarPostProcessor'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer$DependsOnDatabaseInitializationPostProcessor'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.event.internalEventListenerProcessor'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'preserveErrorControllerTargetClassPostProcessor'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.event.internalEventListenerFactory'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.transaction.config.internalTransactionalEventListenerFactory'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.context.internalConfigurationPropertiesBinder'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'jdbcConnectionDetailsHikariBeanPostProcessor'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.aop.config.internalAutoProxyCreator'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'methodValidationPostProcessor'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'methodValidationPostProcessor' via factory method to bean named 'environment'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.context.properties.EnableConfigurationPropertiesRegistrar.methodValidationExcludeFilter'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'persistenceExceptionTranslationPostProcessor'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'persistenceExceptionTranslationPostProcessor' via factory method to bean named 'environment'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'webServerFactoryCustomizerBeanPostProcessor'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'errorPageRegistrarBeanPostProcessor'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'projectingArgumentResolverBeanPostProcessor'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration'
2025-05-03 23:25:32 | DEBUG | o.s.a.a.a.ReflectiveAspectJAdvisorFactory - Found AspectJ method: public void org.example.aspect.CountrySearchAspect.beforeCallMethod(org.aspectj.lang.JoinPoint)
2025-05-03 23:25:32 | DEBUG | o.s.a.a.a.ReflectiveAspectJAdvisorFactory - Found AspectJ method: public void org.example.aspect.CountrySearchAspect.afterCallMethod(org.aspectj.lang.JoinPoint)
2025-05-03 23:25:32 | DEBUG | o.s.a.a.a.ReflectiveAspectJAdvisorFactory - Found AspectJ method: public void org.example.aspect.CountrySearchAspect.afterReturningCallMethod(org.aspectj.lang.JoinPoint)
2025-05-03 23:25:32 | DEBUG | o.s.a.a.a.ReflectiveAspectJAdvisorFactory - Found AspectJ method: public void org.example.aspect.CountrySearchAspect.afterThrowingCallMethod(org.aspectj.lang.JoinPoint,java.lang.Exception)
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'transactionAttributeSource'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'transactionInterceptor'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'transactionInterceptor' via factory method to bean named 'transactionAttributeSource'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.transaction.config.internalTransactionAdvisor' via factory method to bean named 'transactionAttributeSource'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.transaction.config.internalTransactionAdvisor' via factory method to bean named 'transactionInterceptor'
2025-05-03 23:25:32 | DEBUG | o.s.u.c.s.UiApplicationContextUtils - Unable to locate ThemeSource with name 'themeSource': using default [org.springframework.ui.context.support.ResourceBundleThemeSource@691500ab]
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'tomcatServletWebServerFactory'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration$EmbeddedTomcat'
2025-05-03 23:25:32 | DEBUG | o.a.c.core.AprLifecycleListener - The Apache Tomcat Native library could not be found using names [tcnative-2, libtcnative-2, tcnative-1, libtcnative-1] on the java.library.path [/Users/snrteftelya/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:.]. The errors reported were [Can't load library: /Users/snrteftelya/Desktop/CountrySearch/bin/libtcnative-2.dylib, Can't load library: /Users/snrteftelya/Desktop/CountrySearch/bin/liblibtcnative-2.dylib, Can't load library: /Users/snrteftelya/Desktop/CountrySearch/bin/libtcnative-1.dylib, Can't load library: /Users/snrteftelya/Desktop/CountrySearch/bin/liblibtcnative-1.dylib, no tcnative-2 in java.library.path: /Users/snrteftelya/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:., no libtcnative-2 in java.library.path: /Users/snrteftelya/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:., no tcnative-1 in java.library.path: /Users/snrteftelya/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:., no libtcnative-1 in java.library.path: /Users/snrteftelya/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:.]
org.apache.tomcat.jni.LibraryNotFoundError: Can't load library: /Users/snrteftelya/Desktop/CountrySearch/bin/libtcnative-2.dylib, Can't load library: /Users/snrteftelya/Desktop/CountrySearch/bin/liblibtcnative-2.dylib, Can't load library: /Users/snrteftelya/Desktop/CountrySearch/bin/libtcnative-1.dylib, Can't load library: /Users/snrteftelya/Desktop/CountrySearch/bin/liblibtcnative-1.dylib, no tcnative-2 in java.library.path: /Users/snrteftelya/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:., no libtcnative-2 in java.library.path: /Users/snrteftelya/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:., no tcnative-1 in java.library.path: /Users/snrteftelya/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:., no libtcnative-1 in java.library.path: /Users/snrteftelya/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:.
	at org.apache.tomcat.jni.Library.<init>(Library.java:91)
	at org.apache.tomcat.jni.Library.initialize(Library.java:146)
	at org.apache.catalina.core.AprLifecycleListener.init(AprLifecycleListener.java:193)
	at org.apache.catalina.core.AprLifecycleListener.isAprAvailable(AprLifecycleListener.java:107)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getDefaultServerLifecycleListeners(TomcatServletWebServerFactory.java:189)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.<init>(TomcatServletWebServerFactory.java:136)
	at org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration$EmbeddedTomcat.tomcatServletWebServerFactory(ServletWebServerFactoryConfiguration.java:73)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:140)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:647)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:639)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1334)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1164)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getWebServerFactory(ServletWebServerApplicationContext.java:223)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:186)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:618)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
2025-05-03 23:25:32 | DEBUG | sun.rmi.transport.tcp - RMI TCP Connection(1)-127.0.0.1: (port 50528) op = 82
2025-05-03 23:25:32 | DEBUG | sun.rmi.transport.tcp - RMI TCP Connection(1)-127.0.0.1: (port 50528) op = 80
2025-05-03 23:25:32 | DEBUG | sun.rmi.loader - RMI TCP Connection(1)-127.0.0.1: name = "javax.management.ObjectName", codebase = ""
2025-05-03 23:25:32 | DEBUG | javax.management.remote.rmi - connectionId=rmi://127.0.0.1  1, name=java.lang:type=OperatingSystem, attribute=ProcessCpuLoad
2025-05-03 23:25:32 | DEBUG | sun.rmi.transport.tcp - RMI TCP Connection(1)-127.0.0.1: (port 50528) op = 82
2025-05-03 23:25:32 | DEBUG | sun.rmi.transport.tcp - RMI TCP Connection(1)-127.0.0.1: (port 50528) op = 80
2025-05-03 23:25:32 | DEBUG | sun.rmi.loader - RMI TCP Connection(1)-127.0.0.1: name = "javax.management.ObjectName", codebase = ""
2025-05-03 23:25:32 | DEBUG | javax.management.remote.rmi - connectionId=rmi://127.0.0.1  1, name=java.lang:type=Memory, attribute=HeapMemoryUsage
2025-05-03 23:25:32 | DEBUG | sun.rmi.transport.tcp - RMI TCP Connection(1)-127.0.0.1: (port 50528) op = 82
2025-05-03 23:25:32 | DEBUG | sun.rmi.transport.tcp - RMI TCP Connection(1)-127.0.0.1: (port 50528) op = 80
2025-05-03 23:25:32 | DEBUG | sun.rmi.loader - RMI TCP Connection(1)-127.0.0.1: name = "javax.management.ObjectName", codebase = ""
2025-05-03 23:25:32 | DEBUG | javax.management.remote.rmi - connectionId=rmi://127.0.0.1  1, name=java.lang:type=Memory, attribute=HeapMemoryUsage
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'websocketServletWebServerCustomizer'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration$TomcatWebSocketConfiguration'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'servletWebServerFactoryCustomizer'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'server-org.springframework.boot.autoconfigure.web.ServerProperties'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.context.properties.BoundConfigurationProperties'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'servletWebServerFactoryCustomizer' via factory method to bean named 'server-org.springframework.boot.autoconfigure.web.ServerProperties'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'sslBundleRegistry'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.ssl.SslAutoConfiguration'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'spring.ssl-org.springframework.boot.autoconfigure.ssl.SslProperties'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.ssl.SslAutoConfiguration' via constructor to bean named 'spring.ssl-org.springframework.boot.autoconfigure.ssl.SslProperties'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'sslPropertiesSslBundleRegistrar'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'fileWatcher'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'sslPropertiesSslBundleRegistrar' via factory method to bean named 'fileWatcher'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'tomcatServletWebServerFactoryCustomizer'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'tomcatServletWebServerFactoryCustomizer' via factory method to bean named 'server-org.springframework.boot.autoconfigure.web.ServerProperties'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'tomcatWebServerFactoryCustomizer'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration$TomcatWebServerFactoryCustomizerConfiguration'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'tomcatWebServerFactoryCustomizer' via factory method to bean named 'environment'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'tomcatWebServerFactoryCustomizer' via factory method to bean named 'server-org.springframework.boot.autoconfigure.web.ServerProperties'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'localeCharsetMappingsCustomizer'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration' via constructor to bean named 'server-org.springframework.boot.autoconfigure.web.ServerProperties'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'errorPageCustomizer'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration' via constructor to bean named 'server-org.springframework.boot.autoconfigure.web.ServerProperties'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'dispatcherServletRegistration'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'dispatcherServlet'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'spring.mvc-org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'dispatcherServlet' via factory method to bean named 'spring.mvc-org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'dispatcherServletRegistration' via factory method to bean named 'dispatcherServlet'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'dispatcherServletRegistration' via factory method to bean named 'spring.mvc-org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'multipartConfigElement'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'spring.servlet.multipart-org.springframework.boot.autoconfigure.web.servlet.MultipartProperties'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration' via constructor to bean named 'spring.servlet.multipart-org.springframework.boot.autoconfigure.web.servlet.MultipartProperties'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'errorPageCustomizer' via factory method to bean named 'dispatcherServletRegistration'
2025-05-03 23:25:32 | DEBUG | o.a.tomcat.util.IntrospectionUtils - IntrospectionUtils: setProperty(class org.apache.coyote.http11.Http11NioProtocol port=8080)
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.core.ContainerBase - Add child StandardHost[localhost] StandardEngine[Tomcat]
2025-05-03 23:25:32 | DEBUG | o.s.b.w.e.t.TomcatServletWebServerFactory - Code archive: /Users/snrteftelya/.m2/repository/org/springframework/boot/spring-boot/3.2.2/spring-boot-3.2.2.jar
2025-05-03 23:25:32 | DEBUG | o.s.b.w.e.t.TomcatServletWebServerFactory - Code archive: /Users/snrteftelya/.m2/repository/org/springframework/boot/spring-boot/3.2.2/spring-boot-3.2.2.jar
2025-05-03 23:25:32 | DEBUG | o.s.b.w.e.t.TomcatServletWebServerFactory - None of the document roots [src/main/webapp, public, static] point to a directory and will be ignored.
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.core.ContainerBase - Add child TomcatEmbeddedContext[] StandardEngine[Tomcat].StandardHost[localhost]
2025-05-03 23:25:32 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 23:25:32 | DEBUG | o.a.tomcat.util.IntrospectionUtils - IntrospectionUtils: setProperty(class org.apache.coyote.http11.Http11NioProtocol bindOnInit=false)
2025-05-03 23:25:32 | DEBUG | o.a.tomcat.util.IntrospectionUtils - IntrospectionUtils: setProperty(class org.apache.tomcat.util.net.NioEndpoint bindOnInit=false)
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardServer[-1]] to [INITIALIZING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.deploy.NamingResourcesImpl@11f23203] to [INITIALIZING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.deploy.NamingResourcesImpl@11f23203] to [INITIALIZED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardService[Tomcat]] to [INITIALIZING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat]] to [INITIALIZING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat]] to [INITIALIZED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.mapper.MapperListener@6221b13b] to [INITIALIZING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.mapper.MapperListener@6221b13b] to [INITIALIZED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [Connector["http-nio-8080"]] to [INITIALIZING]
2025-05-03 23:25:32 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [Connector["http-nio-8080"]] to [INITIALIZED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardService[Tomcat]] to [INITIALIZED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardServer[-1]] to [INITIALIZED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardServer[-1]] to [STARTING_PREP]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardServer[-1]] to [STARTING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.deploy.NamingResourcesImpl@11f23203] to [STARTING_PREP]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.deploy.NamingResourcesImpl@11f23203] to [STARTING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.deploy.NamingResourcesImpl@11f23203] to [STARTED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardService[Tomcat]] to [STARTING_PREP]
2025-05-03 23:25:32 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardService[Tomcat]] to [STARTING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat]] to [STARTING_PREP]
2025-05-03 23:25:32 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [SimpleRealm[StandardEngine[Tomcat]]] to [INITIALIZING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [SimpleRealm[StandardEngine[Tomcat]]] to [INITIALIZED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [SimpleRealm[StandardEngine[Tomcat]]] to [STARTING_PREP]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [SimpleRealm[StandardEngine[Tomcat]]] to [STARTING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [SimpleRealm[StandardEngine[Tomcat]]] to [STARTED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat].StandardHost[localhost]] to [INITIALIZING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat].StandardHost[localhost]] to [INITIALIZED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat].StandardHost[localhost]] to [STARTING_PREP]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]] to [INITIALIZING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]] to [INITIALIZED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]] to [STARTING_PREP]
2025-05-03 23:25:32 | DEBUG | o.a.catalina.core.StandardContext - Starting ROOT
2025-05-03 23:25:32 | DEBUG | o.a.catalina.core.StandardContext - Configuring default Resources
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.webresources.StandardRoot@6070775e] to [INITIALIZING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.webresources.StandardRoot@6070775e] to [INITIALIZED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.webresources.StandardRoot@6070775e] to [STARTING_PREP]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.webresources.DirResourceSet@45d56062] to [INITIALIZING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.webresources.DirResourceSet@45d56062] to [INITIALIZED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.webresources.DirResourceSet@45d56062] to [STARTING_PREP]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.webresources.DirResourceSet@45d56062] to [STARTING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.webresources.DirResourceSet@45d56062] to [STARTED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.webresources.StandardRoot@6070775e] to [STARTING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.webresources.StandardRoot@6070775e] to [STARTED]
2025-05-03 23:25:32 | DEBUG | o.a.catalina.core.StandardContext - Processing standard container startup
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [WebappLoader[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [INITIALIZING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [WebappLoader[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [INITIALIZED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [WebappLoader[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [STARTING_PREP]
2025-05-03 23:25:32 | DEBUG | o.a.catalina.loader.WebappLoader - Starting this Loader
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [WebappLoader[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [STARTING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [WebappLoader[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [STARTED]
2025-05-03 23:25:32 | DEBUG | sun.rmi.transport.tcp - RMI TCP Connection(1)-127.0.0.1: (port 50528) op = 82
2025-05-03 23:25:32 | DEBUG | sun.rmi.transport.tcp - RMI TCP Connection(1)-127.0.0.1: (port 50528) op = 80
2025-05-03 23:25:32 | DEBUG | sun.rmi.transport.tcp - RMI TCP Connection(1)-127.0.0.1: (port 50528) op = 80
2025-05-03 23:25:32 | DEBUG | sun.rmi.loader - RMI TCP Connection(1)-127.0.0.1: name = "[Ljava.rmi.server.ObjID;", codebase = "", defaultLoader = jdk.internal.loader.ClassLoaders$PlatformClassLoader@246b45b9
2025-05-03 23:25:32 | DEBUG | sun.rmi.loader - RMI TCP Connection(1)-127.0.0.1: name = "java.rmi.server.ObjID", codebase = "", defaultLoader = jdk.internal.loader.ClassLoaders$PlatformClassLoader@246b45b9
2025-05-03 23:25:32 | DEBUG | sun.rmi.loader - RMI TCP Connection(1)-127.0.0.1: name = "java.rmi.server.UID", codebase = "", defaultLoader = jdk.internal.loader.ClassLoaders$PlatformClassLoader@246b45b9
2025-05-03 23:25:32 | DEBUG | sun.rmi.loader - RMI TCP Connection(1)-127.0.0.1: name = "java.rmi.dgc.Lease", codebase = "", defaultLoader = jdk.internal.loader.ClassLoaders$PlatformClassLoader@246b45b9
2025-05-03 23:25:32 | DEBUG | sun.rmi.loader - RMI TCP Connection(1)-127.0.0.1: name = "java.rmi.dgc.VMID", codebase = "", defaultLoader = jdk.internal.loader.ClassLoaders$PlatformClassLoader@246b45b9
2025-05-03 23:25:32 | DEBUG | sun.rmi.loader - RMI TCP Connection(1)-127.0.0.1: name = "[B", codebase = "", defaultLoader = jdk.internal.loader.ClassLoaders$PlatformClassLoader@246b45b9
2025-05-03 23:25:32 | DEBUG | sun.rmi.transport.tcp - RMI TCP Connection(1)-127.0.0.1: (port 50528) op = 84
2025-05-03 23:25:32 | DEBUG | sun.rmi.transport.tcp - RMI TCP Connection(1)-127.0.0.1: (port 50528) op = 80
2025-05-03 23:25:32 | DEBUG | sun.rmi.transport.tcp - RMI TCP Connection(1)-127.0.0.1: (port 50528) op = 80
2025-05-03 23:25:32 | DEBUG | sun.rmi.loader - RMI TCP Connection(1)-127.0.0.1: name = "javax.management.ObjectName", codebase = ""
2025-05-03 23:25:32 | DEBUG | javax.management.remote.rmi - connectionId=rmi://127.0.0.1  3, name=org.springframework.boot:type=Admin,name=SpringApplication, attribute=Ready
2025-05-03 23:25:32 | DEBUG | sun.rmi.server.call - RMI TCP Connection(1)-127.0.0.1: [127.0.0.1] exception: 
javax.management.InstanceNotFoundException: org.springframework.boot:type=Admin,name=SpringApplication
	at java.management/com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getMBean(DefaultMBeanServerInterceptor.java:1073)
	at java.management/com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getAttribute(DefaultMBeanServerInterceptor.java:632)
	at java.management/com.sun.jmx.mbeanserver.JmxMBeanServer.getAttribute(JmxMBeanServer.java:679)
	at java.management.rmi/javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1497)
	at java.management.rmi/javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1348)
	at java.management.rmi/javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1435)
	at java.management.rmi/javax.management.remote.rmi.RMIConnectionImpl.getAttribute(RMIConnectionImpl.java:647)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:360)
	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:200)
	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:197)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:714)
	at java.rmi/sun.rmi.transport.Transport.serviceCall(Transport.java:196)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:598)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:844)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:721)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:400)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:720)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.webresources.JarResourceSet@31aab981] to [INITIALIZING]
2025-05-03 23:25:32 | DEBUG | sun.rmi.transport.tcp - RMI TCP Connection(1)-127.0.0.1: (port 50528) op = 80
2025-05-03 23:25:32 | DEBUG | javax.management.remote.rmi - [javax.management.remote.rmi.RMIConnectionImpl@5724d2d6: connectionId=rmi://127.0.0.1  3] closing.
2025-05-03 23:25:32 | DEBUG | javax.management.remote.rmi - [javax.management.remote.rmi.RMIConnectionImpl@5724d2d6: connectionId=rmi://127.0.0.1  3] closed.
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.webresources.JarResourceSet@31aab981] to [INITIALIZED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.webresources.JarResourceSet@31aab981] to [STARTING_PREP]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.webresources.JarResourceSet@31aab981] to [STARTING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.webresources.JarResourceSet@31aab981] to [STARTED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [INITIALIZING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [INITIALIZED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [STARTING_PREP]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [NonLoginAuthenticator[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [INITIALIZING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [NonLoginAuthenticator[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [INITIALIZED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [NonLoginAuthenticator[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [STARTING_PREP]
2025-05-03 23:25:32 | DEBUG | o.a.c.a.AuthenticatorBase - No SingleSignOn Valve is present
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [NonLoginAuthenticator[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [STARTING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [NonLoginAuthenticator[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [STARTED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardContextValve[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [INITIALIZING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardContextValve[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [INITIALIZED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardContextValve[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [STARTING_PREP]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardContextValve[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [STARTING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardContextValve[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [STARTED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [STARTING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [STARTED]
2025-05-03 23:25:32 | DEBUG | o.a.catalina.core.StandardContext - No manager found. Checking if cluster manager should be used. Cluster configured: [false], Application distributable: [false]
2025-05-03 23:25:32 | DEBUG | o.a.catalina.core.StandardContext - Configured a manager of class [org.apache.catalina.session.StandardManager]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.deploy.NamingResourcesImpl@706f6d26] to [INITIALIZING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.deploy.NamingResourcesImpl@706f6d26] to [INITIALIZED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.deploy.NamingResourcesImpl@706f6d26] to [STARTING_PREP]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.deploy.NamingResourcesImpl@706f6d26] to [STARTING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.deploy.NamingResourcesImpl@706f6d26] to [STARTED]
2025-05-03 23:25:32 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 23:25:32 | DEBUG | o.s.b.w.s.c.ServletWebServerApplicationContext - Published root WebApplicationContext as ServletContext attribute with name [org.springframework.web.context.WebApplicationContext.ROOT]
2025-05-03 23:25:32 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 927 ms
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'requestContextFilter'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'formContentFilter'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'characterEncodingFilter'
2025-05-03 23:25:32 | DEBUG | o.s.b.w.s.ServletContextInitializerBeans - Mapping filters: characterEncodingFilter urls=[/*] order=-2147483648, formContentFilter urls=[/*] order=-9900, requestContextFilter urls=[/*] order=-105
2025-05-03 23:25:32 | DEBUG | o.s.b.w.s.ServletContextInitializerBeans - Mapping servlets: dispatcherServlet urls=[/]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.core.ContainerBase - Add child StandardWrapper[dispatcherServlet] StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[].StandardWrapper[dispatcherServlet]] to [INITIALIZING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[].StandardWrapper[dispatcherServlet]] to [INITIALIZED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[].StandardWrapper[dispatcherServlet]] to [STARTING_PREP]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[].StandardWrapper[dispatcherServlet]]] to [INITIALIZING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[].StandardWrapper[dispatcherServlet]]] to [INITIALIZED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[].StandardWrapper[dispatcherServlet]]] to [STARTING_PREP]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardWrapperValve[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[].StandardWrapper[dispatcherServlet]]] to [INITIALIZING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardWrapperValve[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[].StandardWrapper[dispatcherServlet]]] to [INITIALIZED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardWrapperValve[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[].StandardWrapper[dispatcherServlet]]] to [STARTING_PREP]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardWrapperValve[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[].StandardWrapper[dispatcherServlet]]] to [STARTING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardWrapperValve[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[].StandardWrapper[dispatcherServlet]]] to [STARTED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[].StandardWrapper[dispatcherServlet]]] to [STARTING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[].StandardWrapper[dispatcherServlet]]] to [STARTED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[].StandardWrapper[dispatcherServlet]] to [STARTING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[].StandardWrapper[dispatcherServlet]] to [STARTED]
2025-05-03 23:25:32 | DEBUG | o.a.catalina.core.StandardContext - Configuring application event listeners
2025-05-03 23:25:32 | DEBUG | o.a.c.c.C.[Tomcat].[localhost].[/] - Sending application start events
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardManager[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [INITIALIZING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardManager[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [INITIALIZED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardManager[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [STARTING_PREP]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.springframework.boot.web.embedded.tomcat.LazySessionIdGenerator@2589d787] to [INITIALIZING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.springframework.boot.web.embedded.tomcat.LazySessionIdGenerator@2589d787] to [INITIALIZED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.springframework.boot.web.embedded.tomcat.LazySessionIdGenerator@2589d787] to [STARTING_PREP]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.springframework.boot.web.embedded.tomcat.LazySessionIdGenerator@2589d787] to [STARTING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.springframework.boot.web.embedded.tomcat.LazySessionIdGenerator@2589d787] to [STARTED]
2025-05-03 23:25:32 | DEBUG | o.a.catalina.session.StandardManager - Start: Loading persisted sessions
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardManager[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [STARTING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardManager[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [STARTED]
2025-05-03 23:25:32 | DEBUG | o.a.c.c.C.[Tomcat].[localhost].[/] - Starting filters
2025-05-03 23:25:32 | DEBUG | o.a.c.c.C.[Tomcat].[localhost].[/] -  Starting filter 'requestContextFilter'
2025-05-03 23:25:32 | DEBUG | o.s.b.w.s.f.OrderedRequestContextFilter - Filter 'requestContextFilter' configured for use
2025-05-03 23:25:32 | DEBUG | o.a.c.c.C.[Tomcat].[localhost].[/] -  Starting filter 'Tomcat WebSocket (JSR356) Filter'
2025-05-03 23:25:32 | DEBUG | o.a.c.c.C.[Tomcat].[localhost].[/] -  Starting filter 'characterEncodingFilter'
2025-05-03 23:25:32 | DEBUG | o.s.b.w.s.f.OrderedCharacterEncodingFilter - Filter 'characterEncodingFilter' configured for use
2025-05-03 23:25:32 | DEBUG | o.a.c.c.C.[Tomcat].[localhost].[/] -  Starting filter 'formContentFilter'
2025-05-03 23:25:32 | DEBUG | o.s.b.w.s.f.OrderedFormContentFilter - Filter 'formContentFilter' configured for use
2025-05-03 23:25:32 | DEBUG | o.a.catalina.core.StandardContext - Starting completed
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]] to [STARTING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]] to [STARTED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat].StandardHost[localhost]]] to [INITIALIZING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat].StandardHost[localhost]]] to [INITIALIZED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat].StandardHost[localhost]]] to [STARTING_PREP]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [ErrorReportValve[StandardEngine[Tomcat].StandardHost[localhost]]] to [INITIALIZING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [ErrorReportValve[StandardEngine[Tomcat].StandardHost[localhost]]] to [INITIALIZED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [ErrorReportValve[StandardEngine[Tomcat].StandardHost[localhost]]] to [STARTING_PREP]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [ErrorReportValve[StandardEngine[Tomcat].StandardHost[localhost]]] to [STARTING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [ErrorReportValve[StandardEngine[Tomcat].StandardHost[localhost]]] to [STARTED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardHostValve[StandardEngine[Tomcat].StandardHost[localhost]]] to [INITIALIZING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardHostValve[StandardEngine[Tomcat].StandardHost[localhost]]] to [INITIALIZED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardHostValve[StandardEngine[Tomcat].StandardHost[localhost]]] to [STARTING_PREP]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardHostValve[StandardEngine[Tomcat].StandardHost[localhost]]] to [STARTING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardHostValve[StandardEngine[Tomcat].StandardHost[localhost]]] to [STARTED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat].StandardHost[localhost]]] to [STARTING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat].StandardHost[localhost]]] to [STARTED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat].StandardHost[localhost]] to [STARTING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat].StandardHost[localhost]] to [STARTED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat]]] to [INITIALIZING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat]]] to [INITIALIZED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat]]] to [STARTING_PREP]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngineValve[StandardEngine[Tomcat]]] to [INITIALIZING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngineValve[StandardEngine[Tomcat]]] to [INITIALIZED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngineValve[StandardEngine[Tomcat]]] to [STARTING_PREP]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngineValve[StandardEngine[Tomcat]]] to [STARTING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngineValve[StandardEngine[Tomcat]]] to [STARTED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat]]] to [STARTING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat]]] to [STARTED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat]] to [STARTING]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat]] to [STARTED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.mapper.MapperListener@6221b13b] to [STARTING_PREP]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.mapper.MapperListener@6221b13b] to [STARTING]
2025-05-03 23:25:32 | DEBUG | org.apache.catalina.mapper.Mapper - Registered host [localhost]
2025-05-03 23:25:32 | DEBUG | o.a.catalina.mapper.MapperListener - Register Wrapper [dispatcherServlet] in Context [] for service [StandardService[Tomcat]]
2025-05-03 23:25:32 | DEBUG | o.a.catalina.mapper.MapperListener - Register Context [] for service [StandardService[Tomcat]]
2025-05-03 23:25:32 | DEBUG | o.a.catalina.mapper.MapperListener - Register host [localhost] at domain [null] for service [StandardService[Tomcat]]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.mapper.MapperListener@6221b13b] to [STARTED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardService[Tomcat]] to [STARTED]
2025-05-03 23:25:32 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardServer[-1]] to [STARTED]
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'dataSourceScriptDatabaseInitializer'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.sql.init.DataSourceInitializationConfiguration'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'dataSource'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Hikari'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties'
2025-05-03 23:25:32 | DEBUG | o.s.b.c.p.s.ConfigurationPropertySourcesPropertyResolver$DefaultResolver - Found key 'DATABASE_PASSWORD' in PropertySource 'systemProperties' with value of type String
2025-05-03 23:25:32 | DEBUG | o.s.b.c.p.s.ConfigurationPropertySourcesPropertyResolver$DefaultResolver - Found key 'DATABASE_URL' in PropertySource 'systemProperties' with value of type String
2025-05-03 23:25:32 | DEBUG | o.s.b.c.p.s.ConfigurationPropertySourcesPropertyResolver$DefaultResolver - Found key 'DATABASE_USERNAME' in PropertySource 'systemProperties' with value of type String
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'jdbcConnectionDetails'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration$PooledDataSourceConfiguration'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'jdbcConnectionDetails' via factory method to bean named 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'dataSource' via factory method to bean named 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties'
2025-05-03 23:25:32 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'dataSource' via factory method to bean named 'jdbcConnectionDetails'
2025-05-03 23:25:32 | DEBUG | com.zaxxer.hikari.HikariConfig - Driver class org.postgresql.Driver found in Thread context class loader jdk.internal.loader.ClassLoaders$AppClassLoader@5a07e868
2025-05-03 23:25:33 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Creating shared instance of singleton bean 'spring.sql.init-org.springframework.boot.autoconfigure.sql.init.SqlInitializationProperties'
2025-05-03 23:25:33 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'dataSourceScriptDatabaseInitializer' via factory method to bean named 'dataSource'
2025-05-03 23:25:33 | DEBUG | o.s.b.f.s.DefaultListableBeanFactory - Autowiring by type from bean name 'dataSourceScriptDatabaseInitializer' via factory method to bean named 'spring.sql.init-org.springframework.boot.autoconfigure.sql.init.SqlInitializationProperties'
2025-05-03 23:25:33 | DEBUG | o.s.jdbc.datasource.DataSourceUtils - Fetching JDBC Connection from DataSource
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.HikariConfig - HikariPool-1 - configuration:
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.HikariConfig - autoCommit......................true
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.HikariConfig - catalog.........................none
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.HikariConfig - connectionInitSql...............none
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.HikariConfig - connectionTestQuery.............none
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.HikariConfig - connectionTimeout...............30000
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.HikariConfig - dataSource......................none
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.HikariConfig - dataSourceClassName.............none
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................none
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.HikariConfig - dataSourceProperties............{password=<masked>}
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.HikariConfig - driverClassName................."org.postgresql.Driver"
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.HikariConfig - exceptionOverrideClassName......none
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.HikariConfig - healthCheckProperties...........{}
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............none
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.HikariConfig - idleTimeout.....................600000
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.HikariConfig - initializationFailTimeout.......1
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:postgresql://localhost:5432/mydatabase
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.HikariConfig - keepaliveTime...................0
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.HikariConfig - maxLifetime.....................1800000
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.HikariConfig - metricRegistry..................none
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.HikariConfig - metricsTrackerFactory...........none
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.HikariConfig - minimumIdle.....................10
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.HikariConfig - password........................<masked>
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.HikariConfig - poolName........................"HikariPool-1"
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.HikariConfig - readOnly........................false
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.HikariConfig - registerMbeans..................false
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.HikariConfig - scheduledExecutor...............none
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.HikariConfig - schema..........................none
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.HikariConfig - threadFactory...................internal
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.HikariConfig - transactionIsolation............default
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.HikariConfig - username........................"user"
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.HikariConfig - validationTimeout...............5000
2025-05-03 23:25:33 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 23:25:33 | DEBUG | org.postgresql.Driver - Loading driver configuration via classloader jdk.internal.loader.ClassLoaders$AppClassLoader@5a07e868
2025-05-03 23:25:33 | DEBUG | org.postgresql.Driver - Connecting with URL: jdbc:postgresql://localhost:5432/mydatabase
2025-05-03 23:25:33 | DEBUG | org.postgresql.jdbc.PgConnection - PostgreSQL JDBC Driver 42.6.0
2025-05-03 23:25:33 | DEBUG | org.postgresql.jdbc.PgConnection -   setDefaultFetchSize = 0
2025-05-03 23:25:33 | DEBUG | org.postgresql.jdbc.PgConnection -   setPrepareThreshold = 5
2025-05-03 23:25:33 | DEBUG | o.p.core.v3.ConnectionFactoryImpl - Trying to establish a protocol version 3 connection to localhost:5432
2025-05-03 23:25:33 | DEBUG | o.p.core.v3.ConnectionFactoryImpl - Receive Buffer Size is 408 300
2025-05-03 23:25:33 | DEBUG | o.p.core.v3.ConnectionFactoryImpl - Send Buffer Size is 146 988
2025-05-03 23:25:33 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@230232b0
2025-05-03 23:25:33 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-03 23:25:33 | DEBUG | o.s.jdbc.datasource.init.ScriptUtils - Executing SQL script from class path resource [db/init.sql]
2025-05-03 23:25:33 | DEBUG | o.s.jdbc.datasource.init.ScriptUtils - 0 returned as update count for SQL: CREATE TABLE IF NOT EXISTS country ( id BIGSERIAL PRIMARY KEY, name VARCHAR(255) NOT NULL, capital VARCHAR(255), population DOUBLE PRECISION, area DOUBLE PRECISION, gdp DOUBLE PRECISION )
2025-05-03 23:25:33 | DEBUG | o.s.jdbc.datasource.init.ScriptUtils - 0 returned as update count for SQL: CREATE TABLE IF NOT EXISTS city ( id BIGSERIAL PRIMARY KEY, name VARCHAR(255), population DOUBLE PRECISION, area DOUBLE PRECISION, country_id BIGINT, FOREIGN KEY (country_id) REFERENCES country(id) ON DELETE SET NULL )
2025-05-03 23:25:33 | DEBUG | o.s.jdbc.datasource.init.ScriptUtils - 0 returned as update count for SQL: CREATE TABLE IF NOT EXISTS nation ( id SERIAL PRIMARY KEY, name VARCHAR(255) NOT NULL, language VARCHAR(255), religion VARCHAR(255) )
2025-05-03 23:25:33 | DEBUG | o.s.jdbc.datasource.init.ScriptUtils - 0 returned as update count for SQL: CREATE TABLE IF NOT EXISTS country_nations ( country_id BIGINT, nation_id INTEGER, PRIMARY KEY (country_id, nation_id), FOREIGN KEY (country_id) REFERENCES country(id) ON DELETE CASCADE, FOREIGN KEY (nation_id) REFERENCES nation(id) ON DELETE CASCADE )
2025-05-03 23:25:33 | WARN  | o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'uk_country_name') THEN ALTER TABLE country ADD CONSTRAINT uk_country_name UNIQUE (name)
2025-05-03 23:25:33 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Before shutdown stats (total=1, active=0, idle=1, waiting=0)
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.pool.PoolBase - HikariPool-1 - Closing connection org.postgresql.jdbc.PgConnection@230232b0: (connection evicted)
2025-05-03 23:25:33 | DEBUG | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - After shutdown stats (total=0, active=0, idle=0, waiting=0)
2025-05-03 23:25:33 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardServer[-1]] to [STOPPING_PREP]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardServer[-1]] to [STOPPING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardService[Tomcat]] to [STOPPING_PREP]
2025-05-03 23:25:33 | INFO  | o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardService[Tomcat]] to [STOPPING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat]] to [STOPPING_PREP]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat]] to [STOPPING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat]]] to [STOPPING_PREP]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat]]] to [STOPPING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngineValve[StandardEngine[Tomcat]]] to [STOPPING_PREP]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngineValve[StandardEngine[Tomcat]]] to [STOPPING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngineValve[StandardEngine[Tomcat]]] to [STOPPED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat]]] to [STOPPED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat].StandardHost[localhost]] to [STOPPING_PREP]
2025-05-03 23:25:33 | DEBUG | o.a.catalina.mapper.MapperListener - Unregister host [localhost] at domain [null] for service [StandardService[Tomcat]]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat].StandardHost[localhost]] to [STOPPING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat].StandardHost[localhost]]] to [STOPPING_PREP]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat].StandardHost[localhost]]] to [STOPPING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [ErrorReportValve[StandardEngine[Tomcat].StandardHost[localhost]]] to [STOPPING_PREP]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [ErrorReportValve[StandardEngine[Tomcat].StandardHost[localhost]]] to [STOPPING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [ErrorReportValve[StandardEngine[Tomcat].StandardHost[localhost]]] to [STOPPED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardHostValve[StandardEngine[Tomcat].StandardHost[localhost]]] to [STOPPING_PREP]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardHostValve[StandardEngine[Tomcat].StandardHost[localhost]]] to [STOPPING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardHostValve[StandardEngine[Tomcat].StandardHost[localhost]]] to [STOPPED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat].StandardHost[localhost]]] to [STOPPED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]] to [STOPPING_PREP]
2025-05-03 23:25:33 | DEBUG | o.a.catalina.mapper.MapperListener - Unregister Context [] for service [StandardService[Tomcat]]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]] to [STOPPING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[].StandardWrapper[dispatcherServlet]] to [STOPPING_PREP]
2025-05-03 23:25:33 | DEBUG | o.a.catalina.mapper.MapperListener - Unregister Wrapper [dispatcherServlet] in Context [] for service [StandardService[Tomcat]]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[].StandardWrapper[dispatcherServlet]] to [STOPPING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[].StandardWrapper[dispatcherServlet]]] to [STOPPING_PREP]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[].StandardWrapper[dispatcherServlet]]] to [STOPPING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardWrapperValve[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[].StandardWrapper[dispatcherServlet]]] to [STOPPING_PREP]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardWrapperValve[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[].StandardWrapper[dispatcherServlet]]] to [STOPPING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardWrapperValve[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[].StandardWrapper[dispatcherServlet]]] to [STOPPED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[].StandardWrapper[dispatcherServlet]]] to [STOPPED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[].StandardWrapper[dispatcherServlet]] to [STOPPED]
2025-05-03 23:25:33 | DEBUG | o.a.c.c.C.[Tomcat].[localhost].[/] - Stopping filters
2025-05-03 23:25:33 | DEBUG | o.a.c.c.C.[Tomcat].[localhost].[/] -  Stopping filter 'requestContextFilter'
2025-05-03 23:25:33 | DEBUG | o.a.c.core.ApplicationFilterConfig - JMX de-registration complete for filter of type [org.springframework.boot.web.servlet.filter.OrderedRequestContextFilter] and name [requestContextFilter]
2025-05-03 23:25:33 | DEBUG | o.a.c.c.C.[Tomcat].[localhost].[/] -  Stopping filter 'Tomcat WebSocket (JSR356) Filter'
2025-05-03 23:25:33 | DEBUG | o.a.c.core.ApplicationFilterConfig - JMX de-registration complete for filter of type [org.apache.tomcat.websocket.server.WsFilter] and name [Tomcat WebSocket (JSR356) Filter]
2025-05-03 23:25:33 | DEBUG | o.a.c.c.C.[Tomcat].[localhost].[/] -  Stopping filter 'characterEncodingFilter'
2025-05-03 23:25:33 | DEBUG | o.a.c.core.ApplicationFilterConfig - JMX de-registration complete for filter of type [org.springframework.boot.web.servlet.filter.OrderedCharacterEncodingFilter] and name [characterEncodingFilter]
2025-05-03 23:25:33 | DEBUG | o.a.c.c.C.[Tomcat].[localhost].[/] -  Stopping filter 'formContentFilter'
2025-05-03 23:25:33 | DEBUG | o.a.c.core.ApplicationFilterConfig - JMX de-registration complete for filter of type [org.springframework.boot.web.servlet.filter.OrderedFormContentFilter] and name [formContentFilter]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardManager[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [STOPPING_PREP]
2025-05-03 23:25:33 | DEBUG | o.a.catalina.session.StandardManager - Stopping
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardManager[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [STOPPING]
2025-05-03 23:25:33 | DEBUG | o.a.catalina.session.StandardManager - Unloading persisted sessions
2025-05-03 23:25:33 | DEBUG | o.a.catalina.session.StandardManager - No persisted sessions to unload
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.springframework.boot.web.embedded.tomcat.LazySessionIdGenerator@2589d787] to [STOPPING_PREP]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.springframework.boot.web.embedded.tomcat.LazySessionIdGenerator@2589d787] to [STOPPING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.springframework.boot.web.embedded.tomcat.LazySessionIdGenerator@2589d787] to [STOPPED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardManager[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [STOPPED]
2025-05-03 23:25:33 | DEBUG | o.a.catalina.core.StandardContext - Sending application stop events
2025-05-03 23:25:33 | DEBUG | o.a.catalina.core.StandardContext - Processing standard container shutdown
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.deploy.NamingResourcesImpl@706f6d26] to [STOPPING_PREP]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.deploy.NamingResourcesImpl@706f6d26] to [STOPPING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.deploy.NamingResourcesImpl@706f6d26] to [STOPPED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [STOPPING_PREP]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [STOPPING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [NonLoginAuthenticator[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [STOPPING_PREP]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [NonLoginAuthenticator[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [STOPPING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [NonLoginAuthenticator[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [STOPPED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardContextValve[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [STOPPING_PREP]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardContextValve[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [STOPPING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardContextValve[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [STOPPED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [STOPPED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [WebappLoader[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [STOPPING_PREP]
2025-05-03 23:25:33 | DEBUG | o.a.catalina.loader.WebappLoader - Stopping this Loader
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [WebappLoader[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [STOPPING]
2025-05-03 23:25:33 | DEBUG | o.a.c.loader.WebappClassLoaderBase - getResourceAsStream(org/apache/catalina/loader/JdbcLeakPrevention.class)
2025-05-03 23:25:33 | DEBUG | o.a.c.loader.WebappClassLoaderBase -   Delegating to parent classloader jdk.internal.loader.ClassLoaders$AppClassLoader@5a07e868
2025-05-03 23:25:33 | DEBUG | o.a.c.loader.WebappClassLoaderBase -   --> Returning stream from parent
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [WebappLoader[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [STOPPED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.webresources.StandardRoot@6070775e] to [STOPPING_PREP]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.webresources.DirResourceSet@45d56062] to [STOPPING_PREP]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.webresources.DirResourceSet@45d56062] to [STOPPING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.webresources.DirResourceSet@45d56062] to [STOPPED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.webresources.JarResourceSet@31aab981] to [STOPPING_PREP]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.webresources.JarResourceSet@31aab981] to [STOPPING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.webresources.JarResourceSet@31aab981] to [STOPPED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.webresources.DirResourceSet@45d56062] to [DESTROYING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.webresources.DirResourceSet@45d56062] to [DESTROYED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.webresources.JarResourceSet@31aab981] to [DESTROYING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.webresources.JarResourceSet@31aab981] to [DESTROYED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.webresources.StandardRoot@6070775e] to [STOPPING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.webresources.StandardRoot@6070775e] to [STOPPED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[].StandardWrapper[dispatcherServlet]] to [DESTROYING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[].StandardWrapper[dispatcherServlet]]] to [DESTROYING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardWrapperValve[Container is null]] to [DESTROYING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardWrapperValve[Container is null]] to [DESTROYED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[].StandardWrapper[dispatcherServlet]]] to [DESTROYED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[].StandardWrapper[dispatcherServlet]] to [DESTROYED]
2025-05-03 23:25:33 | DEBUG | o.a.catalina.core.StandardContext - resetContext Tomcat:j2eeType=WebModule,name=//localhost/,J2EEApplication=none,J2EEServer=none
2025-05-03 23:25:33 | DEBUG | o.a.catalina.core.StandardContext - Stopping complete
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]] to [STOPPED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat].StandardHost[localhost]] to [STOPPED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [SimpleRealm[StandardEngine[Tomcat]]] to [STOPPING_PREP]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [SimpleRealm[StandardEngine[Tomcat]]] to [STOPPING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [SimpleRealm[StandardEngine[Tomcat]]] to [STOPPED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat]] to [STOPPED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.mapper.MapperListener@6221b13b] to [STOPPING_PREP]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.mapper.MapperListener@6221b13b] to [STOPPING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.mapper.MapperListener@6221b13b] to [STOPPED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardService[Tomcat]] to [STOPPED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.deploy.NamingResourcesImpl@11f23203] to [STOPPING_PREP]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.deploy.NamingResourcesImpl@11f23203] to [STOPPING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.deploy.NamingResourcesImpl@11f23203] to [STOPPED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardServer[-1]] to [STOPPED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardServer[-1]] to [DESTROYING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardService[Tomcat]] to [DESTROYING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.mapper.MapperListener@6221b13b] to [DESTROYING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.mapper.MapperListener@6221b13b] to [DESTROYED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat]] to [DESTROYING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [SimpleRealm[StandardEngine[Tomcat]]] to [DESTROYING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [SimpleRealm[StandardEngine[Tomcat]]] to [DESTROYED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat]]] to [DESTROYING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngineValve[Container is null]] to [DESTROYING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngineValve[Container is null]] to [DESTROYED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat]]] to [DESTROYED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat].StandardHost[localhost]] to [DESTROYING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat].StandardHost[localhost]]] to [DESTROYING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [ErrorReportValve[Container is null]] to [DESTROYING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [ErrorReportValve[Container is null]] to [DESTROYED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardHostValve[Container is null]] to [DESTROYING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardHostValve[Container is null]] to [DESTROYED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat].StandardHost[localhost]]] to [DESTROYED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]] to [DESTROYING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.deploy.NamingResourcesImpl@706f6d26] to [DESTROYING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.deploy.NamingResourcesImpl@706f6d26] to [DESTROYED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [WebappLoader[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [DESTROYING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [WebappLoader[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [DESTROYED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardManager[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [DESTROYING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardManager[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [DESTROYED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.webresources.StandardRoot@6070775e] to [DESTROYING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.webresources.StandardRoot@6070775e] to [DESTROYED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [DESTROYING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [NonLoginAuthenticator[Container is null]] to [DESTROYING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [NonLoginAuthenticator[Container is null]] to [DESTROYED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardContextValve[Container is null]] to [DESTROYING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardContextValve[Container is null]] to [DESTROYED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardPipeline[StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]]] to [DESTROYED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat].StandardHost[localhost].TomcatEmbeddedContext[]] to [DESTROYED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat].StandardHost[localhost]] to [DESTROYED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardEngine[Tomcat]] to [DESTROYED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardService[Tomcat]] to [DESTROYED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.deploy.NamingResourcesImpl@11f23203] to [DESTROYING]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [org.apache.catalina.deploy.NamingResourcesImpl@11f23203] to [DESTROYED]
2025-05-03 23:25:33 | DEBUG | o.apache.catalina.util.LifecycleBase - Setting state for [StandardServer[-1]] to [DESTROYED]
2025-05-03 23:25:33 | DEBUG | o.s.b.a.l.ConditionEvaluationReportLogger - 


============================
CONDITIONS EVALUATION REPORT
============================


Positive matches:
-----------------

   AopAutoConfiguration matched:
      - @ConditionalOnProperty (spring.aop.auto=true) matched (OnPropertyCondition)

   AopAutoConfiguration.AspectJAutoProxyingConfiguration matched:
      - @ConditionalOnClass found required class 'org.aspectj.weaver.Advice' (OnClassCondition)

   AopAutoConfiguration.AspectJAutoProxyingConfiguration.CglibAutoProxyConfiguration matched:
      - @ConditionalOnProperty (spring.aop.proxy-target-class=true) matched (OnPropertyCondition)

   ApplicationAvailabilityAutoConfiguration#applicationAvailability matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.availability.ApplicationAvailability; SearchStrategy: all) did not find any beans (OnBeanCondition)

   DataSourceAutoConfiguration matched:
      - @ConditionalOnClass found required classes 'javax.sql.DataSource', 'org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType' (OnClassCondition)
      - @ConditionalOnMissingBean (types: io.r2dbc.spi.ConnectionFactory; SearchStrategy: all) did not find any beans (OnBeanCondition)

   DataSourceAutoConfiguration.PooledDataSourceConfiguration matched:
      - AnyNestedCondition 1 matched 1 did not; NestedCondition on DataSourceAutoConfiguration.PooledDataSourceCondition.PooledDataSourceAvailable PooledDataSource found supported DataSource; NestedCondition on DataSourceAutoConfiguration.PooledDataSourceCondition.ExplicitType @ConditionalOnProperty (spring.datasource.type) did not find property 'type' (DataSourceAutoConfiguration.PooledDataSourceCondition)
      - @ConditionalOnMissingBean (types: javax.sql.DataSource,javax.sql.XADataSource; SearchStrategy: all) did not find any beans (OnBeanCondition)

   DataSourceAutoConfiguration.PooledDataSourceConfiguration#jdbcConnectionDetails matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.jdbc.JdbcConnectionDetails; SearchStrategy: all) did not find any beans (OnBeanCondition)

   DataSourceConfiguration.Hikari matched:
      - @ConditionalOnClass found required class 'com.zaxxer.hikari.HikariDataSource' (OnClassCondition)
      - @ConditionalOnProperty (spring.datasource.type=com.zaxxer.hikari.HikariDataSource) matched (OnPropertyCondition)
      - @ConditionalOnMissingBean (types: javax.sql.DataSource; SearchStrategy: all) did not find any beans (OnBeanCondition)

   DataSourceInitializationConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.jdbc.datasource.init.DatabasePopulator' (OnClassCondition)
      - @ConditionalOnSingleCandidate (types: javax.sql.DataSource; SearchStrategy: all) found a single bean 'dataSource'; @ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.sql.init.SqlDataSourceScriptDatabaseInitializer,org.springframework.boot.autoconfigure.sql.init.SqlR2dbcScriptDatabaseInitializer; SearchStrategy: all) did not find any beans (OnBeanCondition)

   DataSourceJmxConfiguration matched:
      - @ConditionalOnProperty (spring.jmx.enabled=true) matched (OnPropertyCondition)

   DataSourceJmxConfiguration.Hikari matched:
      - @ConditionalOnClass found required class 'com.zaxxer.hikari.HikariDataSource' (OnClassCondition)
      - @ConditionalOnSingleCandidate (types: javax.sql.DataSource; SearchStrategy: all) found a single bean 'dataSource' (OnBeanCondition)

   DataSourcePoolMetadataProvidersConfiguration.HikariPoolDataSourceMetadataProviderConfiguration matched:
      - @ConditionalOnClass found required class 'com.zaxxer.hikari.HikariDataSource' (OnClassCondition)

   DataSourceTransactionManagerAutoConfiguration matched:
      - @ConditionalOnClass found required classes 'org.springframework.jdbc.core.JdbcTemplate', 'org.springframework.transaction.TransactionManager' (OnClassCondition)

   DataSourceTransactionManagerAutoConfiguration.JdbcTransactionManagerConfiguration matched:
      - @ConditionalOnSingleCandidate (types: javax.sql.DataSource; SearchStrategy: all) found a single bean 'dataSource' (OnBeanCondition)

   DispatcherServletAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet' (OnClassCondition)
      - found 'session' scope (OnWebApplicationCondition)

   DispatcherServletAutoConfiguration.DispatcherServletConfiguration matched:
      - @ConditionalOnClass found required class 'jakarta.servlet.ServletRegistration' (OnClassCondition)
      - Default DispatcherServlet did not find dispatcher servlet beans (DispatcherServletAutoConfiguration.DefaultDispatcherServletCondition)

   DispatcherServletAutoConfiguration.DispatcherServletRegistrationConfiguration matched:
      - @ConditionalOnClass found required class 'jakarta.servlet.ServletRegistration' (OnClassCondition)
      - DispatcherServlet Registration did not find servlet registration bean (DispatcherServletAutoConfiguration.DispatcherServletRegistrationCondition)

   DispatcherServletAutoConfiguration.DispatcherServletRegistrationConfiguration#dispatcherServletRegistration matched:
      - @ConditionalOnBean (names: dispatcherServlet types: org.springframework.web.servlet.DispatcherServlet; SearchStrategy: all) found bean 'dispatcherServlet' (OnBeanCondition)

   EmbeddedWebServerFactoryCustomizerAutoConfiguration matched:
      - @ConditionalOnWebApplication (required) found 'session' scope (OnWebApplicationCondition)
      - @ConditionalOnWarDeployment the application is not deployed as a WAR file. (OnWarDeploymentCondition)

   EmbeddedWebServerFactoryCustomizerAutoConfiguration.TomcatWebServerFactoryCustomizerConfiguration matched:
      - @ConditionalOnClass found required classes 'org.apache.catalina.startup.Tomcat', 'org.apache.coyote.UpgradeProtocol' (OnClassCondition)

   ErrorMvcAutoConfiguration matched:
      - @ConditionalOnClass found required classes 'jakarta.servlet.Servlet', 'org.springframework.web.servlet.DispatcherServlet' (OnClassCondition)
      - found 'session' scope (OnWebApplicationCondition)

   ErrorMvcAutoConfiguration#basicErrorController matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.web.servlet.error.ErrorController; SearchStrategy: current) did not find any beans (OnBeanCondition)

   ErrorMvcAutoConfiguration#errorAttributes matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.web.servlet.error.ErrorAttributes; SearchStrategy: current) did not find any beans (OnBeanCondition)

   ErrorMvcAutoConfiguration.DefaultErrorViewResolverConfiguration#conventionErrorViewResolver matched:
      - @ConditionalOnBean (types: org.springframework.web.servlet.DispatcherServlet; SearchStrategy: all) found bean 'dispatcherServlet'; @ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.web.servlet.error.ErrorViewResolver; SearchStrategy: all) did not find any beans (OnBeanCondition)

   ErrorMvcAutoConfiguration.WhitelabelErrorViewConfiguration matched:
      - @ConditionalOnProperty (server.error.whitelabel.enabled) matched (OnPropertyCondition)
      - ErrorTemplate Missing did not find error template view (ErrorMvcAutoConfiguration.ErrorTemplateMissingCondition)

   ErrorMvcAutoConfiguration.WhitelabelErrorViewConfiguration#beanNameViewResolver matched:
      - @ConditionalOnMissingBean (types: org.springframework.web.servlet.view.BeanNameViewResolver; SearchStrategy: all) did not find any beans (OnBeanCondition)

   ErrorMvcAutoConfiguration.WhitelabelErrorViewConfiguration#defaultErrorView matched:
      - @ConditionalOnMissingBean (names: error; SearchStrategy: all) did not find any beans (OnBeanCondition)

   GenericCacheConfiguration matched:
      - Cache org.springframework.boot.autoconfigure.cache.GenericCacheConfiguration automatic cache type (CacheCondition)

   HibernateJpaAutoConfiguration matched:
      - @ConditionalOnClass found required classes 'org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean', 'jakarta.persistence.EntityManager', 'org.hibernate.engine.spi.SessionImplementor' (OnClassCondition)

   HibernateJpaConfiguration matched:
      - @ConditionalOnSingleCandidate (types: javax.sql.DataSource; SearchStrategy: all) found a single bean 'dataSource' (OnBeanCondition)

   HttpEncodingAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.web.filter.CharacterEncodingFilter' (OnClassCondition)
      - found 'session' scope (OnWebApplicationCondition)
      - @ConditionalOnProperty (server.servlet.encoding.enabled) matched (OnPropertyCondition)

   HttpEncodingAutoConfiguration#characterEncodingFilter matched:
      - @ConditionalOnMissingBean (types: org.springframework.web.filter.CharacterEncodingFilter; SearchStrategy: all) did not find any beans (OnBeanCondition)

   HttpMessageConvertersAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.http.converter.HttpMessageConverter' (OnClassCondition)
      - NoneNestedConditions 0 matched 1 did not; NestedCondition on HttpMessageConvertersAutoConfiguration.NotReactiveWebApplicationCondition.ReactiveWebApplication did not find reactive web application classes (HttpMessageConvertersAutoConfiguration.NotReactiveWebApplicationCondition)

   HttpMessageConvertersAutoConfiguration#messageConverters matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.http.HttpMessageConverters; SearchStrategy: all) did not find any beans (OnBeanCondition)

   HttpMessageConvertersAutoConfiguration.StringHttpMessageConverterConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.http.converter.StringHttpMessageConverter' (OnClassCondition)

   HttpMessageConvertersAutoConfiguration.StringHttpMessageConverterConfiguration#stringHttpMessageConverter matched:
      - @ConditionalOnMissingBean (types: org.springframework.http.converter.StringHttpMessageConverter; SearchStrategy: all) did not find any beans (OnBeanCondition)

   JacksonAutoConfiguration matched:
      - @ConditionalOnClass found required class 'com.fasterxml.jackson.databind.ObjectMapper' (OnClassCondition)

   JacksonAutoConfiguration.Jackson2ObjectMapperBuilderCustomizerConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.http.converter.json.Jackson2ObjectMapperBuilder' (OnClassCondition)

   JacksonAutoConfiguration.JacksonObjectMapperBuilderConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.http.converter.json.Jackson2ObjectMapperBuilder' (OnClassCondition)

   JacksonAutoConfiguration.JacksonObjectMapperBuilderConfiguration#jacksonObjectMapperBuilder matched:
      - @ConditionalOnMissingBean (types: org.springframework.http.converter.json.Jackson2ObjectMapperBuilder; SearchStrategy: all) did not find any beans (OnBeanCondition)

   JacksonAutoConfiguration.JacksonObjectMapperConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.http.converter.json.Jackson2ObjectMapperBuilder' (OnClassCondition)

   JacksonAutoConfiguration.JacksonObjectMapperConfiguration#jacksonObjectMapper matched:
      - @ConditionalOnMissingBean (types: com.fasterxml.jackson.databind.ObjectMapper; SearchStrategy: all) did not find any beans (OnBeanCondition)

   JacksonAutoConfiguration.ParameterNamesModuleConfiguration matched:
      - @ConditionalOnClass found required class 'com.fasterxml.jackson.module.paramnames.ParameterNamesModule' (OnClassCondition)

   JacksonAutoConfiguration.ParameterNamesModuleConfiguration#parameterNamesModule matched:
      - @ConditionalOnMissingBean (types: com.fasterxml.jackson.module.paramnames.ParameterNamesModule; SearchStrategy: all) did not find any beans (OnBeanCondition)

   JacksonHttpMessageConvertersConfiguration.MappingJackson2HttpMessageConverterConfiguration matched:
      - @ConditionalOnClass found required class 'com.fasterxml.jackson.databind.ObjectMapper' (OnClassCondition)
      - @ConditionalOnProperty (spring.mvc.converters.preferred-json-mapper=jackson) matched (OnPropertyCondition)
      - @ConditionalOnBean (types: com.fasterxml.jackson.databind.ObjectMapper; SearchStrategy: all) found bean 'jacksonObjectMapper' (OnBeanCondition)

   JacksonHttpMessageConvertersConfiguration.MappingJackson2HttpMessageConverterConfiguration#mappingJackson2HttpMessageConverter matched:
      - @ConditionalOnMissingBean (types: org.springframework.http.converter.json.MappingJackson2HttpMessageConverter ignored: org.springframework.hateoas.server.mvc.TypeConstrainedMappingJackson2HttpMessageConverter,org.springframework.data.rest.webmvc.alps.AlpsJsonHttpMessageConverter; SearchStrategy: all) did not find any beans (OnBeanCondition)

   JdbcClientAutoConfiguration matched:
      - @ConditionalOnSingleCandidate (types: org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate; SearchStrategy: all) found a single bean 'namedParameterJdbcTemplate'; @ConditionalOnMissingBean (types: org.springframework.jdbc.core.simple.JdbcClient; SearchStrategy: all) did not find any beans (OnBeanCondition)

   JdbcTemplateAutoConfiguration matched:
      - @ConditionalOnClass found required classes 'javax.sql.DataSource', 'org.springframework.jdbc.core.JdbcTemplate' (OnClassCondition)
      - @ConditionalOnSingleCandidate (types: javax.sql.DataSource; SearchStrategy: all) found a single bean 'dataSource' (OnBeanCondition)

   JdbcTemplateConfiguration matched:
      - @ConditionalOnMissingBean (types: org.springframework.jdbc.core.JdbcOperations; SearchStrategy: all) did not find any beans (OnBeanCondition)

   JmxAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.jmx.export.MBeanExporter' (OnClassCondition)
      - @ConditionalOnProperty (spring.jmx.enabled=true) matched (OnPropertyCondition)

   JmxAutoConfiguration#mbeanExporter matched:
      - @ConditionalOnMissingBean (types: org.springframework.jmx.export.MBeanExporter; SearchStrategy: current) did not find any beans (OnBeanCondition)

   JmxAutoConfiguration#mbeanServer matched:
      - @ConditionalOnMissingBean (types: javax.management.MBeanServer; SearchStrategy: all) did not find any beans (OnBeanCondition)

   JmxAutoConfiguration#objectNamingStrategy matched:
      - @ConditionalOnMissingBean (types: org.springframework.jmx.export.naming.ObjectNamingStrategy; SearchStrategy: current) did not find any beans (OnBeanCondition)

   JpaBaseConfiguration#entityManagerFactory matched:
      - @ConditionalOnMissingBean (types: org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean,jakarta.persistence.EntityManagerFactory; SearchStrategy: all) did not find any beans (OnBeanCondition)

   JpaBaseConfiguration#entityManagerFactoryBuilder matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder; SearchStrategy: all) did not find any beans (OnBeanCondition)

   JpaBaseConfiguration#jpaVendorAdapter matched:
      - @ConditionalOnMissingBean (types: org.springframework.orm.jpa.JpaVendorAdapter; SearchStrategy: all) did not find any beans (OnBeanCondition)

   JpaBaseConfiguration#transactionManager matched:
      - @ConditionalOnMissingBean (types: org.springframework.transaction.TransactionManager; SearchStrategy: all) did not find any beans (OnBeanCondition)

   JpaBaseConfiguration.JpaWebConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.web.servlet.config.annotation.WebMvcConfigurer' (OnClassCondition)
      - found 'session' scope (OnWebApplicationCondition)
      - @ConditionalOnProperty (spring.jpa.open-in-view=true) matched (OnPropertyCondition)
      - @ConditionalOnMissingBean (types: org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor,org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter; SearchStrategy: all) did not find any beans (OnBeanCondition)

   JpaBaseConfiguration.PersistenceManagedTypesConfiguration matched:
      - @ConditionalOnMissingBean (types: org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean,jakarta.persistence.EntityManagerFactory; SearchStrategy: all) did not find any beans (OnBeanCondition)

   JpaBaseConfiguration.PersistenceManagedTypesConfiguration#persistenceManagedTypes matched:
      - @ConditionalOnMissingBean (types: org.springframework.orm.jpa.persistenceunit.PersistenceManagedTypes; SearchStrategy: all) did not find any beans (OnBeanCondition)

   JpaRepositoriesAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.data.jpa.repository.JpaRepository' (OnClassCondition)
      - @ConditionalOnProperty (spring.data.jpa.repositories.enabled=true) matched (OnPropertyCondition)
      - @ConditionalOnBean (types: javax.sql.DataSource; SearchStrategy: all) found bean 'dataSource'; @ConditionalOnMissingBean (types: org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean,org.springframework.data.jpa.repository.config.JpaRepositoryConfigExtension; SearchStrategy: all) did not find any beans (OnBeanCondition)

   JtaAutoConfiguration matched:
      - @ConditionalOnClass found required class 'jakarta.transaction.Transaction' (OnClassCondition)
      - @ConditionalOnProperty (spring.jta.enabled) matched (OnPropertyCondition)

   LifecycleAutoConfiguration#defaultLifecycleProcessor matched:
      - @ConditionalOnMissingBean (names: lifecycleProcessor; SearchStrategy: current) did not find any beans (OnBeanCondition)

   MultipartAutoConfiguration matched:
      - @ConditionalOnClass found required classes 'jakarta.servlet.Servlet', 'org.springframework.web.multipart.support.StandardServletMultipartResolver', 'jakarta.servlet.MultipartConfigElement' (OnClassCondition)
      - found 'session' scope (OnWebApplicationCondition)
      - @ConditionalOnProperty (spring.servlet.multipart.enabled) matched (OnPropertyCondition)

   MultipartAutoConfiguration#multipartConfigElement matched:
      - @ConditionalOnMissingBean (types: jakarta.servlet.MultipartConfigElement; SearchStrategy: all) did not find any beans (OnBeanCondition)

   MultipartAutoConfiguration#multipartResolver matched:
      - @ConditionalOnMissingBean (types: org.springframework.web.multipart.MultipartResolver; SearchStrategy: all) did not find any beans (OnBeanCondition)

   NamedParameterJdbcTemplateConfiguration matched:
      - @ConditionalOnSingleCandidate (types: org.springframework.jdbc.core.JdbcTemplate; SearchStrategy: all) found a single bean 'jdbcTemplate'; @ConditionalOnMissingBean (types: org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations; SearchStrategy: all) did not find any beans (OnBeanCondition)

   NoOpCacheConfiguration matched:
      - Cache org.springframework.boot.autoconfigure.cache.NoOpCacheConfiguration automatic cache type (CacheCondition)

   PersistenceExceptionTranslationAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor' (OnClassCondition)

   PersistenceExceptionTranslationAutoConfiguration#persistenceExceptionTranslationPostProcessor matched:
      - @ConditionalOnProperty (spring.dao.exceptiontranslation.enabled) matched (OnPropertyCondition)
      - @ConditionalOnMissingBean (types: org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor; SearchStrategy: all) did not find any beans (OnBeanCondition)

   PropertyPlaceholderAutoConfiguration#propertySourcesPlaceholderConfigurer matched:
      - @ConditionalOnMissingBean (types: org.springframework.context.support.PropertySourcesPlaceholderConfigurer; SearchStrategy: current) did not find any beans (OnBeanCondition)

   RestClientAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.web.client.RestClient' (OnClassCondition)
      - NoneNestedConditions 0 matched 1 did not; NestedCondition on NotReactiveWebApplicationCondition.ReactiveWebApplication did not find reactive web application classes (NotReactiveWebApplicationCondition)

   RestClientAutoConfiguration#httpMessageConvertersRestClientCustomizer matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.web.client.HttpMessageConvertersRestClientCustomizer; SearchStrategy: all) did not find any beans (OnBeanCondition)

   RestClientAutoConfiguration#restClientBuilder matched:
      - @ConditionalOnMissingBean (types: org.springframework.web.client.RestClient$Builder; SearchStrategy: all) did not find any beans (OnBeanCondition)

   RestClientAutoConfiguration#restClientBuilderConfigurer matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.web.client.RestClientBuilderConfigurer; SearchStrategy: all) did not find any beans (OnBeanCondition)

   RestClientAutoConfiguration#restClientSsl matched:
      - @ConditionalOnBean (types: org.springframework.boot.ssl.SslBundles; SearchStrategy: all) found bean 'sslBundleRegistry'; @ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.web.client.RestClientSsl; SearchStrategy: all) did not find any beans (OnBeanCondition)

   RestTemplateAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.web.client.RestTemplate' (OnClassCondition)
      - NoneNestedConditions 0 matched 1 did not; NestedCondition on NotReactiveWebApplicationCondition.ReactiveWebApplication did not find reactive web application classes (NotReactiveWebApplicationCondition)

   RestTemplateAutoConfiguration#restTemplateBuilder matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.web.client.RestTemplateBuilder; SearchStrategy: all) did not find any beans (OnBeanCondition)

   ServletWebServerFactoryAutoConfiguration matched:
      - @ConditionalOnClass found required class 'jakarta.servlet.ServletRequest' (OnClassCondition)
      - found 'session' scope (OnWebApplicationCondition)

   ServletWebServerFactoryAutoConfiguration#tomcatServletWebServerFactoryCustomizer matched:
      - @ConditionalOnClass found required class 'org.apache.catalina.startup.Tomcat' (OnClassCondition)

   ServletWebServerFactoryConfiguration.EmbeddedTomcat matched:
      - @ConditionalOnClass found required classes 'jakarta.servlet.Servlet', 'org.apache.catalina.startup.Tomcat', 'org.apache.coyote.UpgradeProtocol' (OnClassCondition)
      - @ConditionalOnMissingBean (types: org.springframework.boot.web.servlet.server.ServletWebServerFactory; SearchStrategy: current) did not find any beans (OnBeanCondition)

   SimpleCacheConfiguration matched:
      - Cache org.springframework.boot.autoconfigure.cache.SimpleCacheConfiguration automatic cache type (CacheCondition)

   SpringApplicationAdminJmxAutoConfiguration matched:
      - @ConditionalOnProperty (spring.application.admin.enabled=true) matched (OnPropertyCondition)

   SpringApplicationAdminJmxAutoConfiguration#springApplicationAdminRegistrar matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SpringDataWebAutoConfiguration matched:
      - @ConditionalOnClass found required classes 'org.springframework.data.web.PageableHandlerMethodArgumentResolver', 'org.springframework.web.servlet.config.annotation.WebMvcConfigurer' (OnClassCondition)
      - found 'session' scope (OnWebApplicationCondition)
      - @ConditionalOnMissingBean (types: org.springframework.data.web.PageableHandlerMethodArgumentResolver; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SpringDataWebAutoConfiguration#pageableCustomizer matched:
      - @ConditionalOnMissingBean (types: org.springframework.data.web.config.PageableHandlerMethodArgumentResolverCustomizer; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SpringDataWebAutoConfiguration#sortCustomizer matched:
      - @ConditionalOnMissingBean (types: org.springframework.data.web.config.SortHandlerMethodArgumentResolverCustomizer; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SpringDocConfigProperties matched:
      - @ConditionalOnProperty (springdoc.api-docs.enabled) matched (OnPropertyCondition)
      - @ConditionalOnBean (types: org.springdoc.core.configuration.SpringDocConfiguration; SearchStrategy: all) found bean 'org.springdoc.core.configuration.SpringDocConfiguration' (OnBeanCondition)

   SpringDocConfiguration matched:
      - @ConditionalOnWebApplication (required) found 'session' scope (OnWebApplicationCondition)
      - @ConditionalOnProperty (springdoc.api-docs.enabled) matched (OnPropertyCondition)

   SpringDocConfiguration#fileSupportConverter matched:
      - @ConditionalOnMissingBean (types: org.springdoc.core.converters.FileSupportConverter; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SpringDocConfiguration#objectMapperProvider matched:
      - @ConditionalOnMissingBean (types: org.springdoc.core.providers.ObjectMapperProvider; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SpringDocConfiguration#openAPIBuilder matched:
      - @ConditionalOnMissingBean (types: org.springdoc.core.service.OpenAPIService; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SpringDocConfiguration#operationBuilder matched:
      - @ConditionalOnMissingBean (types: org.springdoc.core.service.OperationService; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SpringDocConfiguration#parameterBuilder matched:
      - @ConditionalOnMissingBean (types: org.springdoc.core.service.GenericParameterService; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SpringDocConfiguration#polymorphicModelConverter matched:
      - @ConditionalOnProperty (springdoc.model-converters.polymorphic-converter.enabled) matched (OnPropertyCondition)
      - @ConditionalOnMissingBean (types: org.springdoc.core.converters.PolymorphicModelConverter; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SpringDocConfiguration#requestBodyBuilder matched:
      - @ConditionalOnMissingBean (types: org.springdoc.core.service.RequestBodyService; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SpringDocConfiguration#responseSupportConverter matched:
      - @ConditionalOnMissingBean (types: org.springdoc.core.converters.ResponseSupportConverter; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SpringDocConfiguration#schemaPropertyDeprecatingConverter matched:
      - @ConditionalOnProperty (springdoc.model-converters.deprecating-converter.enabled) matched (OnPropertyCondition)
      - @ConditionalOnMissingBean (types: org.springdoc.core.converters.SchemaPropertyDeprecatingConverter; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SpringDocConfiguration#securityParser matched:
      - @ConditionalOnMissingBean (types: org.springdoc.core.service.SecurityService; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SpringDocConfiguration#springDocProviders matched:
      - @ConditionalOnMissingBean (types: org.springdoc.core.providers.SpringDocProviders; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SpringDocConfiguration.SpringDocSpringDataWebPropertiesProvider matched:
      - @ConditionalOnClass found required class 'org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties' (OnClassCondition)

   SpringDocConfiguration.SpringDocSpringDataWebPropertiesProvider#springDataWebPropertiesProvider matched:
      - @ConditionalOnMissingBean (types: org.springdoc.core.providers.SpringDataWebPropertiesProvider; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SpringDocConfiguration.WebConversionServiceConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.boot.autoconfigure.web.format.WebConversionService' (OnClassCondition)

   SpringDocKotlinConfiguration matched:
      - @ConditionalOnClass found required class 'kotlin.coroutines.Continuation' (OnClassCondition)
      - @ConditionalOnWebApplication (required) found 'session' scope (OnWebApplicationCondition)
      - @ConditionalOnExpression (#{${springdoc.api-docs.enabled:true} and ${springdoc.enable-kotlin:true}}) resulted in true (OnExpressionCondition)
      - @ConditionalOnBean (types: org.springdoc.core.configuration.SpringDocConfiguration; SearchStrategy: all) found bean 'org.springdoc.core.configuration.SpringDocConfiguration' (OnBeanCondition)

   SpringDocKotlinConfiguration#kotlinCoroutinesReturnTypeParser matched:
      - @ConditionalOnMissingBean (types: org.springdoc.core.parsers.KotlinCoroutinesReturnTypeParser; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SpringDocPageableConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.data.domain.Pageable' (OnClassCondition)
      - @ConditionalOnWebApplication (required) found 'session' scope (OnWebApplicationCondition)
      - @ConditionalOnProperty (springdoc.api-docs.enabled) matched (OnPropertyCondition)
      - @ConditionalOnBean (types: org.springdoc.core.configuration.SpringDocConfiguration; SearchStrategy: all) found bean 'org.springdoc.core.configuration.SpringDocConfiguration' (OnBeanCondition)

   SpringDocPageableConfiguration#delegatingMethodParameterCustomizer matched:
      - @ConditionalOnMissingBean (types: org.springdoc.core.customizers.DelegatingMethodParameterCustomizer; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SpringDocPageableConfiguration#pageableOpenAPIConverter matched:
      - @ConditionalOnProperty (springdoc.model-converters.pageable-converter.enabled) matched (OnPropertyCondition)
      - @ConditionalOnMissingBean (types: org.springdoc.core.converters.PageableOpenAPIConverter; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SpringDocSortConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.data.domain.Sort' (OnClassCondition)
      - @ConditionalOnWebApplication (required) found 'session' scope (OnWebApplicationCondition)
      - @ConditionalOnProperty (springdoc.api-docs.enabled) matched (OnPropertyCondition)
      - @ConditionalOnBean (types: org.springdoc.core.configuration.SpringDocConfiguration; SearchStrategy: all) found bean 'org.springdoc.core.configuration.SpringDocConfiguration' (OnBeanCondition)

   SpringDocSortConfiguration#sortOpenAPIConverter matched:
      - @ConditionalOnProperty (springdoc.model-converters.sort-converter.enabled) matched (OnPropertyCondition)
      - @ConditionalOnMissingBean (types: org.springdoc.core.converters.SortOpenAPIConverter; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SpringDocWebMvcConfiguration matched:
      - found 'session' scope (OnWebApplicationCondition)
      - @ConditionalOnProperty (springdoc.api-docs.enabled) matched (OnPropertyCondition)
      - @ConditionalOnBean (types: org.springdoc.core.configuration.SpringDocConfiguration; SearchStrategy: all) found bean 'org.springdoc.core.configuration.SpringDocConfiguration' (OnBeanCondition)

   SpringDocWebMvcConfiguration#openApiResource matched:
      - @ConditionalOnProperty (springdoc.use-management-port=false) matched (OnPropertyCondition)
      - @ConditionalOnMissingBean (types: org.springdoc.webmvc.api.OpenApiWebMvcResource; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SpringDocWebMvcConfiguration#requestBuilder matched:
      - @ConditionalOnMissingBean (types: org.springdoc.webmvc.core.service.RequestService; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SpringDocWebMvcConfiguration#responseBuilder matched:
      - @ConditionalOnMissingBean (types: org.springdoc.core.service.GenericResponseService; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SpringDocWebMvcConfiguration#springWebProvider matched:
      - @ConditionalOnMissingBean (types: org.springdoc.core.providers.SpringWebProvider; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SpringDocWebMvcConfiguration.SpringDocWebMvcRouterConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.web.servlet.function.RouterFunction' (OnClassCondition)

   SpringDocWebMvcConfiguration.SpringDocWebMvcRouterConfiguration#routerFunctionProvider matched:
      - @ConditionalOnMissingBean (types: org.springdoc.webmvc.core.providers.RouterFunctionWebMvcProvider; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SqlInitializationAutoConfiguration matched:
      - @ConditionalOnProperty (spring.sql.init.enabled) matched (OnPropertyCondition)
      - NoneNestedConditions 0 matched 1 did not; NestedCondition on SqlInitializationAutoConfiguration.SqlInitializationModeCondition.ModeIsNever @ConditionalOnProperty (spring.sql.init.mode=never) found different value in property 'mode' (SqlInitializationAutoConfiguration.SqlInitializationModeCondition)

   SslAutoConfiguration#sslBundleRegistry matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.ssl.SslBundleRegistry,org.springframework.boot.ssl.SslBundles; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SwaggerConfig matched:
      - found 'session' scope (OnWebApplicationCondition)
      - @ConditionalOnProperty (springdoc.swagger-ui.enabled) matched (OnPropertyCondition)
      - @ConditionalOnBean (types: org.springdoc.core.configuration.SpringDocConfiguration; SearchStrategy: all) found bean 'org.springdoc.core.configuration.SpringDocConfiguration' (OnBeanCondition)

   SwaggerConfig#indexPageTransformer matched:
      - @ConditionalOnMissingBean (types: org.springdoc.webmvc.ui.SwaggerIndexTransformer; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SwaggerConfig#swaggerConfigResource matched:
      - @ConditionalOnProperty (springdoc.use-management-port=false) matched (OnPropertyCondition)
      - @ConditionalOnMissingBean (types: org.springdoc.webmvc.ui.SwaggerConfigResource; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SwaggerConfig#swaggerWebMvcConfigurer matched:
      - @ConditionalOnMissingBean (types: org.springdoc.webmvc.ui.SwaggerWebMvcConfigurer; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SwaggerConfig#swaggerWelcome matched:
      - @ConditionalOnProperty (springdoc.use-management-port=false) matched (OnPropertyCondition)
      - @ConditionalOnMissingBean (types: org.springdoc.webmvc.ui.SwaggerWelcomeWebMvc; SearchStrategy: all) did not find any beans (OnBeanCondition)

   SwaggerUiConfigParameters matched:
      - @ConditionalOnProperty (springdoc.swagger-ui.enabled) matched (OnPropertyCondition)
      - @ConditionalOnBean (types: org.springdoc.core.configuration.SpringDocConfiguration; SearchStrategy: all) found bean 'org.springdoc.core.configuration.SpringDocConfiguration' (OnBeanCondition)

   SwaggerUiConfigProperties matched:
      - @ConditionalOnProperty (springdoc.swagger-ui.enabled) matched (OnPropertyCondition)
      - @ConditionalOnBean (types: org.springdoc.core.configuration.SpringDocConfiguration; SearchStrategy: all) found bean 'org.springdoc.core.configuration.SpringDocConfiguration' (OnBeanCondition)

   SwaggerUiOAuthProperties matched:
      - @ConditionalOnProperty (springdoc.swagger-ui.enabled) matched (OnPropertyCondition)
      - @ConditionalOnBean (types: org.springdoc.core.configuration.SpringDocConfiguration; SearchStrategy: all) found bean 'org.springdoc.core.configuration.SpringDocConfiguration' (OnBeanCondition)

   TaskExecutionAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor' (OnClassCondition)

   TaskExecutorConfigurations.SimpleAsyncTaskExecutorBuilderConfiguration#simpleAsyncTaskExecutorBuilder matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.task.SimpleAsyncTaskExecutorBuilder; SearchStrategy: all) did not find any beans (OnBeanCondition)
      - @ConditionalOnThreading found PLATFORM (OnThreadingCondition)

   TaskExecutorConfigurations.TaskExecutorBuilderConfiguration#taskExecutorBuilder matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.task.TaskExecutorBuilder; SearchStrategy: all) did not find any beans (OnBeanCondition)

   TaskExecutorConfigurations.TaskExecutorConfiguration matched:
      - @ConditionalOnMissingBean (types: java.util.concurrent.Executor; SearchStrategy: all) did not find any beans (OnBeanCondition)

   TaskExecutorConfigurations.TaskExecutorConfiguration#applicationTaskExecutor matched:
      - @ConditionalOnThreading found PLATFORM (OnThreadingCondition)

   TaskExecutorConfigurations.ThreadPoolTaskExecutorBuilderConfiguration#threadPoolTaskExecutorBuilder matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.task.TaskExecutorBuilder,org.springframework.boot.task.ThreadPoolTaskExecutorBuilder; SearchStrategy: all) did not find any beans (OnBeanCondition)

   TaskSchedulingAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler' (OnClassCondition)

   TaskSchedulingConfigurations.SimpleAsyncTaskSchedulerBuilderConfiguration#simpleAsyncTaskSchedulerBuilder matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder; SearchStrategy: all) did not find any beans (OnBeanCondition)
      - @ConditionalOnThreading found PLATFORM (OnThreadingCondition)

   TaskSchedulingConfigurations.TaskSchedulerBuilderConfiguration#taskSchedulerBuilder matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.task.TaskSchedulerBuilder; SearchStrategy: all) did not find any beans (OnBeanCondition)

   TaskSchedulingConfigurations.ThreadPoolTaskSchedulerBuilderConfiguration#threadPoolTaskSchedulerBuilder matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.task.TaskSchedulerBuilder,org.springframework.boot.task.ThreadPoolTaskSchedulerBuilder; SearchStrategy: all) did not find any beans (OnBeanCondition)

   TransactionAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.transaction.PlatformTransactionManager' (OnClassCondition)

   TransactionAutoConfiguration.EnableTransactionManagementConfiguration matched:
      - @ConditionalOnBean (types: org.springframework.transaction.TransactionManager; SearchStrategy: all) found bean 'transactionManager'; @ConditionalOnMissingBean (types: org.springframework.transaction.annotation.AbstractTransactionManagementConfiguration; SearchStrategy: all) did not find any beans (OnBeanCondition)

   TransactionAutoConfiguration.EnableTransactionManagementConfiguration.CglibAutoProxyConfiguration matched:
      - @ConditionalOnProperty (spring.aop.proxy-target-class=true) matched (OnPropertyCondition)

   TransactionAutoConfiguration.TransactionTemplateConfiguration matched:
      - @ConditionalOnSingleCandidate (types: org.springframework.transaction.PlatformTransactionManager; SearchStrategy: all) found a single bean 'transactionManager' (OnBeanCondition)

   TransactionAutoConfiguration.TransactionTemplateConfiguration#transactionTemplate matched:
      - @ConditionalOnMissingBean (types: org.springframework.transaction.support.TransactionOperations; SearchStrategy: all) did not find any beans (OnBeanCondition)

   TransactionManagerCustomizationAutoConfiguration matched:
      - @ConditionalOnClass found required class 'org.springframework.transaction.PlatformTransactionManager' (OnClassCondition)

   TransactionManagerCustomizationAutoConfiguration#platformTransactionManagerCustomizers matched:
      - @ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizers; SearchStrategy: all) did not find any beans (OnBeanCondition)

   ValidationAutoConfiguration matched:
      - @ConditionalOnClass found required class 'jakarta.validation.executable.ExecutableValidator' (OnClassCondition)
      - @ConditionalOnResource found location classpath:META-INF/services/jakarta.validation.spi.ValidationProvider (OnResourceCondition)

   ValidationAutoConfiguration#defaultValidator matched:
      - @ConditionalOnMissingBean (types: jakarta.validation.Validator; SearchStrategy: all) did not find any beans (OnBeanCondition)

   ValidationAutoConfiguration#methodValidationPostProcessor matched:
      - @ConditionalOnMissingBean (types: org.springframework.validation.beanvalidation.MethodValidationPostProcessor; SearchStrategy: current) did not find any beans (OnBeanCondition)

   WebMvcAutoConfiguration matched:
      - @ConditionalOnClass found required classes 'jakarta.servlet.Servlet', 'org.springframework.web.servlet.DispatcherServlet', 'org.springframework.web.servlet.config.annotation.WebMvcConfigurer' (OnClassCondition)
      - found 'session' scope (OnWebApplicationCondition)
      - @ConditionalOnMissingBean (types: org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WebMvcAutoConfiguration#formContentFilter matched:
      - @ConditionalOnProperty (spring.mvc.formcontent.filter.enabled) matched (OnPropertyCondition)
      - @ConditionalOnMissingBean (types: org.springframework.web.filter.FormContentFilter; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WebMvcAutoConfiguration.EnableWebMvcConfiguration#flashMapManager matched:
      - @ConditionalOnMissingBean (names: flashMapManager; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WebMvcAutoConfiguration.EnableWebMvcConfiguration#localeResolver matched:
      - @ConditionalOnMissingBean (names: localeResolver; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WebMvcAutoConfiguration.EnableWebMvcConfiguration#themeResolver matched:
      - @ConditionalOnMissingBean (names: themeResolver; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WebMvcAutoConfiguration.ResourceChainCustomizerConfiguration matched:
      - @ConditionalOnEnabledResourceChain found class org.webjars.WebJarAssetLocator (OnEnabledResourceChainCondition)

   WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#defaultViewResolver matched:
      - @ConditionalOnMissingBean (types: org.springframework.web.servlet.view.InternalResourceViewResolver; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#requestContextFilter matched:
      - @ConditionalOnMissingBean (types: org.springframework.web.context.request.RequestContextListener,org.springframework.web.filter.RequestContextFilter; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#viewResolver matched:
      - @ConditionalOnBean (types: org.springframework.web.servlet.ViewResolver; SearchStrategy: all) found beans 'defaultViewResolver', 'beanNameViewResolver', 'mvcViewResolver'; @ConditionalOnMissingBean (names: viewResolver types: org.springframework.web.servlet.view.ContentNegotiatingViewResolver; SearchStrategy: all) did not find any beans (OnBeanCondition)

   WebSocketServletAutoConfiguration matched:
      - @ConditionalOnClass found required classes 'jakarta.servlet.Servlet', 'jakarta.websocket.server.ServerContainer' (OnClassCondition)
      - found 'session' scope (OnWebApplicationCondition)

   WebSocketServletAutoConfiguration.TomcatWebSocketConfiguration matched:
      - @ConditionalOnClass found required classes 'org.apache.catalina.startup.Tomcat', 'org.apache.tomcat.websocket.server.WsSci' (OnClassCondition)

   WebSocketServletAutoConfiguration.TomcatWebSocketConfiguration#websocketServletWebServerCustomizer matched:
      - @ConditionalOnMissingBean (names: websocketServletWebServerCustomizer; SearchStrategy: all) did not find any beans (OnBeanCondition)


Negative matches:
-----------------

   ActiveMQAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'jakarta.jms.ConnectionFactory' (OnClassCondition)

   AopAutoConfiguration.AspectJAutoProxyingConfiguration.JdkDynamicAutoProxyConfiguration:
      Did not match:
         - @ConditionalOnProperty (spring.aop.proxy-target-class=false) did not find property 'proxy-target-class' (OnPropertyCondition)

   AopAutoConfiguration.ClassProxyingConfiguration:
      Did not match:
         - @ConditionalOnMissingClass found unwanted class 'org.aspectj.weaver.Advice' (OnClassCondition)

   ArtemisAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'jakarta.jms.ConnectionFactory' (OnClassCondition)

   BatchAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.batch.core.launch.JobLauncher' (OnClassCondition)

   Cache2kCacheConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.cache2k.Cache2kBuilder' (OnClassCondition)

   CacheAutoConfiguration:
      Did not match:
         - @ConditionalOnBean (types: org.springframework.cache.interceptor.CacheAspectSupport; SearchStrategy: all) did not find any beans of type org.springframework.cache.interceptor.CacheAspectSupport (OnBeanCondition)
      Matched:
         - @ConditionalOnClass found required class 'org.springframework.cache.CacheManager' (OnClassCondition)

   CacheAutoConfiguration.CacheManagerEntityManagerFactoryDependsOnPostProcessor:
      Did not match:
         - Ancestor org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration did not match (ConditionEvaluationReport.AncestorsMatchedCondition)
      Matched:
         - @ConditionalOnClass found required class 'org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean' (OnClassCondition)

   CaffeineCacheConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.github.benmanes.caffeine.cache.Caffeine' (OnClassCondition)

   CassandraAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.datastax.oss.driver.api.core.CqlSession' (OnClassCondition)

   CassandraDataAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.datastax.oss.driver.api.core.CqlSession' (OnClassCondition)

   CassandraReactiveDataAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.datastax.oss.driver.api.core.CqlSession' (OnClassCondition)

   CassandraReactiveRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.cassandra.ReactiveSession' (OnClassCondition)

   CassandraRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.datastax.oss.driver.api.core.CqlSession' (OnClassCondition)

   ClientHttpConnectorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.web.reactive.function.client.WebClient' (OnClassCondition)

   CodecsAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.web.reactive.function.client.WebClient' (OnClassCondition)

   CouchbaseAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster' (OnClassCondition)

   CouchbaseCacheConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster' (OnClassCondition)

   CouchbaseDataAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.couchbase.client.java.Bucket' (OnClassCondition)

   CouchbaseReactiveDataAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster' (OnClassCondition)

   CouchbaseReactiveRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster' (OnClassCondition)

   CouchbaseRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.couchbase.client.java.Bucket' (OnClassCondition)

   DataSourceAutoConfiguration.EmbeddedDatabaseConfiguration:
      Did not match:
         - EmbeddedDataSource spring.datasource.url is set (DataSourceAutoConfiguration.EmbeddedDatabaseCondition)

   DataSourceCheckpointRestoreConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.crac.Resource' (OnClassCondition)

   DataSourceConfiguration.Dbcp2:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.apache.commons.dbcp2.BasicDataSource' (OnClassCondition)

   DataSourceConfiguration.Generic:
      Did not match:
         - @ConditionalOnProperty (spring.datasource.type) did not find property 'spring.datasource.type' (OnPropertyCondition)

   DataSourceConfiguration.OracleUcp:
      Did not match:
         - @ConditionalOnClass did not find required classes 'oracle.ucp.jdbc.PoolDataSourceImpl', 'oracle.jdbc.OracleConnection' (OnClassCondition)

   DataSourceConfiguration.Tomcat:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.apache.tomcat.jdbc.pool.DataSource' (OnClassCondition)

   DataSourceJmxConfiguration.TomcatDataSourceJmxConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.apache.tomcat.jdbc.pool.DataSourceProxy' (OnClassCondition)

   DataSourcePoolMetadataProvidersConfiguration.CommonsDbcp2PoolDataSourceMetadataProviderConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.apache.commons.dbcp2.BasicDataSource' (OnClassCondition)

   DataSourcePoolMetadataProvidersConfiguration.OracleUcpPoolDataSourceMetadataProviderConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required classes 'oracle.ucp.jdbc.PoolDataSource', 'oracle.jdbc.OracleConnection' (OnClassCondition)

   DataSourcePoolMetadataProvidersConfiguration.TomcatDataSourcePoolMetadataProviderConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.apache.tomcat.jdbc.pool.DataSource' (OnClassCondition)

   DataSourceTransactionManagerAutoConfiguration.JdbcTransactionManagerConfiguration#transactionManager:
      Did not match:
         - @ConditionalOnMissingBean (types: org.springframework.transaction.TransactionManager; SearchStrategy: all) found beans of type 'org.springframework.transaction.TransactionManager' transactionManager (OnBeanCondition)

   DispatcherServletAutoConfiguration.DispatcherServletConfiguration#multipartResolver:
      Did not match:
         - @ConditionalOnBean (types: org.springframework.web.multipart.MultipartResolver; SearchStrategy: all) did not find any beans of type org.springframework.web.multipart.MultipartResolver (OnBeanCondition)

   ElasticsearchClientAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'co.elastic.clients.elasticsearch.ElasticsearchClient' (OnClassCondition)

   ElasticsearchDataAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.elasticsearch.client.elc.ElasticsearchTemplate' (OnClassCondition)

   ElasticsearchRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.elasticsearch.repository.ElasticsearchRepository' (OnClassCondition)

   ElasticsearchRestClientAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.elasticsearch.client.RestClientBuilder' (OnClassCondition)

   EmbeddedLdapAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.unboundid.ldap.listener.InMemoryDirectoryServer' (OnClassCondition)

   EmbeddedWebServerFactoryCustomizerAutoConfiguration.JettyWebServerFactoryCustomizerConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required classes 'org.eclipse.jetty.server.Server', 'org.eclipse.jetty.util.Loader', 'org.eclipse.jetty.ee10.webapp.WebAppContext' (OnClassCondition)

   EmbeddedWebServerFactoryCustomizerAutoConfiguration.NettyWebServerFactoryCustomizerConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'reactor.netty.http.server.HttpServer' (OnClassCondition)

   EmbeddedWebServerFactoryCustomizerAutoConfiguration.TomcatWebServerFactoryCustomizerConfiguration#tomcatVirtualThreadsProtocolHandlerCustomizer:
      Did not match:
         - @ConditionalOnThreading did not find VIRTUAL (OnThreadingCondition)

   EmbeddedWebServerFactoryCustomizerAutoConfiguration.UndertowWebServerFactoryCustomizerConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required classes 'io.undertow.Undertow', 'org.xnio.SslClientAuthMode' (OnClassCondition)

   ErrorWebFluxAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.web.reactive.config.WebFluxConfigurer' (OnClassCondition)

   FlywayAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.flywaydb.core.Flyway' (OnClassCondition)

   FreeMarkerAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'freemarker.template.Configuration' (OnClassCondition)

   GraphQlAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'graphql.GraphQL' (OnClassCondition)

   GraphQlQueryByExampleAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'graphql.GraphQL' (OnClassCondition)

   GraphQlQuerydslAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.querydsl.core.Query' (OnClassCondition)

   GraphQlRSocketAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'graphql.GraphQL' (OnClassCondition)

   GraphQlReactiveQueryByExampleAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'graphql.GraphQL' (OnClassCondition)

   GraphQlReactiveQuerydslAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.querydsl.core.Query' (OnClassCondition)

   GraphQlWebFluxAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'graphql.GraphQL' (OnClassCondition)

   GraphQlWebFluxSecurityAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'graphql.GraphQL' (OnClassCondition)

   GraphQlWebMvcAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'graphql.GraphQL' (OnClassCondition)

   GraphQlWebMvcSecurityAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'graphql.GraphQL' (OnClassCondition)

   GroovyTemplateAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'groovy.text.markup.MarkupTemplateEngine' (OnClassCondition)

   GsonAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.google.gson.Gson' (OnClassCondition)

   GsonHttpMessageConvertersConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.google.gson.Gson' (OnClassCondition)

   H2ConsoleAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.h2.server.web.JakartaWebServlet' (OnClassCondition)

   HazelcastAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.hazelcast.core.HazelcastInstance' (OnClassCondition)

   HazelcastCacheConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.hazelcast.core.HazelcastInstance' (OnClassCondition)

   HazelcastJpaDependencyAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.hazelcast.core.HazelcastInstance' (OnClassCondition)

   HttpHandlerAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.web.reactive.DispatcherHandler' (OnClassCondition)

   HypermediaAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.hateoas.EntityModel' (OnClassCondition)

   InfinispanCacheConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.infinispan.spring.embedded.provider.SpringEmbeddedCacheManager' (OnClassCondition)

   InfluxDbAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.influxdb.InfluxDB' (OnClassCondition)

   IntegrationAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.integration.config.EnableIntegration' (OnClassCondition)

   JCacheCacheConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'javax.cache.Caching' (OnClassCondition)

   JacksonHttpMessageConvertersConfiguration.MappingJackson2XmlHttpMessageConverterConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.fasterxml.jackson.dataformat.xml.XmlMapper' (OnClassCondition)

   JdbcRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.jdbc.repository.config.AbstractJdbcConfiguration' (OnClassCondition)

   JerseyAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.glassfish.jersey.server.spring.SpringComponentProvider' (OnClassCondition)

   JmsAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'jakarta.jms.Message' (OnClassCondition)

   JndiConnectionFactoryAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.jms.core.JmsTemplate' (OnClassCondition)

   JndiDataSourceAutoConfiguration:
      Did not match:
         - @ConditionalOnProperty (spring.datasource.jndi-name) did not find property 'jndi-name' (OnPropertyCondition)
      Matched:
         - @ConditionalOnClass found required classes 'javax.sql.DataSource', 'org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType' (OnClassCondition)

   JndiJtaConfiguration:
      Did not match:
         - @ConditionalOnJndi JNDI environment is not available (OnJndiCondition)
      Matched:
         - @ConditionalOnClass found required class 'org.springframework.transaction.jta.JtaTransactionManager' (OnClassCondition)

   JooqAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.jooq.DSLContext' (OnClassCondition)

   JpaRepositoriesAutoConfiguration#entityManagerFactoryBootstrapExecutorCustomizer:
      Did not match:
         - AnyNestedCondition 0 matched 2 did not; NestedCondition on JpaRepositoriesAutoConfiguration.BootstrapExecutorCondition.LazyBootstrapMode @ConditionalOnProperty (spring.data.jpa.repositories.bootstrap-mode=lazy) did not find property 'bootstrap-mode'; NestedCondition on JpaRepositoriesAutoConfiguration.BootstrapExecutorCondition.DeferredBootstrapMode @ConditionalOnProperty (spring.data.jpa.repositories.bootstrap-mode=deferred) did not find property 'bootstrap-mode' (JpaRepositoriesAutoConfiguration.BootstrapExecutorCondition)

   JsonbAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'jakarta.json.bind.Jsonb' (OnClassCondition)

   JsonbHttpMessageConvertersConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'jakarta.json.bind.Jsonb' (OnClassCondition)

   KafkaAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.kafka.core.KafkaTemplate' (OnClassCondition)

   LdapAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.ldap.core.ContextSource' (OnClassCondition)

   LdapRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.ldap.repository.LdapRepository' (OnClassCondition)

   LiquibaseAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'liquibase.change.DatabaseChange' (OnClassCondition)

   MailSenderAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'jakarta.mail.internet.MimeMessage' (OnClassCondition)

   MailSenderValidatorAutoConfiguration:
      Did not match:
         - @ConditionalOnSingleCandidate did not find required type 'org.springframework.mail.javamail.JavaMailSenderImpl' (OnBeanCondition)

   MessageSourceAutoConfiguration:
      Did not match:
         - ResourceBundle did not find bundle with basename messages (MessageSourceAutoConfiguration.ResourceBundleCondition)

   MongoAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.mongodb.client.MongoClient' (OnClassCondition)

   MongoDataAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.mongodb.client.MongoClient' (OnClassCondition)

   MongoReactiveAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.mongodb.reactivestreams.client.MongoClient' (OnClassCondition)

   MongoReactiveDataAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.mongodb.reactivestreams.client.MongoClient' (OnClassCondition)

   MongoReactiveRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.mongodb.reactivestreams.client.MongoClient' (OnClassCondition)

   MongoRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.mongodb.client.MongoClient' (OnClassCondition)

   MultipleOpenApiSupportConfiguration:
      Did not match:
         - AnyNestedCondition 0 matched 2 did not; NestedCondition on MultipleOpenApiSupportCondition.OnActuatorDifferentPort @ConditionalOnProperty (springdoc.show-actuator) did not find property 'springdoc.show-actuator'; NestedCondition on MultipleOpenApiSupportCondition.OnMultipleOpenApiSupportCondition AnyNestedCondition 0 matched 2 did not; NestedCondition on MultipleOpenApiGroupsCondition.OnGroupConfigProperty @ConditionalOnProperty (springdoc.group-configs[0].group) did not find property 'springdoc.group-configs[0].group'; NestedCondition on MultipleOpenApiGroupsCondition.OnGroupedOpenApiBean @ConditionalOnBean (types: org.springdoc.core.models.GroupedOpenApi; SearchStrategy: all) did not find any beans of type org.springdoc.core.models.GroupedOpenApi (MultipleOpenApiSupportCondition)
      Matched:
         - found 'session' scope (OnWebApplicationCondition)
         - @ConditionalOnProperty (springdoc.api-docs.enabled) matched (OnPropertyCondition)

   MultipleOpenApiSupportConfiguration.SpringDocWebMvcActuatorDifferentConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.boot.actuate.endpoint.web.servlet.WebMvcEndpointHandlerMapping' (OnClassCondition)
         - Ancestor org.springdoc.webmvc.core.configuration.MultipleOpenApiSupportConfiguration did not match (ConditionEvaluationReport.AncestorsMatchedCondition)

   MustacheAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.samskivert.mustache.Mustache' (OnClassCondition)

   Neo4jAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.neo4j.driver.Driver' (OnClassCondition)

   Neo4jDataAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.neo4j.driver.Driver' (OnClassCondition)

   Neo4jReactiveDataAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.neo4j.driver.Driver' (OnClassCondition)

   Neo4jReactiveRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.neo4j.driver.Driver' (OnClassCondition)

   Neo4jRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.neo4j.driver.Driver' (OnClassCondition)

   NettyAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.netty.util.NettyRuntime' (OnClassCondition)

   OAuth2AuthorizationServerAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.oauth2.server.authorization.OAuth2Authorization' (OnClassCondition)

   OAuth2AuthorizationServerJwtAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.oauth2.server.authorization.OAuth2Authorization' (OnClassCondition)

   OAuth2ClientAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.config.annotation.web.configuration.EnableWebSecurity' (OnClassCondition)

   OAuth2ResourceServerAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.oauth2.server.resource.authentication.BearerTokenAuthenticationToken' (OnClassCondition)

   ProjectInfoAutoConfiguration#buildProperties:
      Did not match:
         - @ConditionalOnResource did not find resource '${spring.info.build.location:classpath:META-INF/build-info.properties}' (OnResourceCondition)

   ProjectInfoAutoConfiguration#gitProperties:
      Did not match:
         - GitResource did not find git info at classpath:git.properties (ProjectInfoAutoConfiguration.GitResourceAvailableCondition)

   PulsarAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.apache.pulsar.client.api.PulsarClient' (OnClassCondition)

   PulsarReactiveAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.apache.pulsar.client.api.PulsarClient' (OnClassCondition)

   QuartzAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.quartz.Scheduler' (OnClassCondition)

   R2dbcAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.r2dbc.spi.ConnectionFactory' (OnClassCondition)

   R2dbcDataAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.r2dbc.core.R2dbcEntityTemplate' (OnClassCondition)

   R2dbcInitializationConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required classes 'io.r2dbc.spi.ConnectionFactory', 'org.springframework.r2dbc.connection.init.DatabasePopulator' (OnClassCondition)

   R2dbcRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.r2dbc.spi.ConnectionFactory' (OnClassCondition)

   R2dbcTransactionManagerAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.r2dbc.connection.R2dbcTransactionManager' (OnClassCondition)

   RSocketGraphQlClientAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'graphql.GraphQL' (OnClassCondition)

   RSocketMessagingAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.rsocket.RSocket' (OnClassCondition)

   RSocketRequesterAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.rsocket.RSocket' (OnClassCondition)

   RSocketSecurityAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor' (OnClassCondition)

   RSocketServerAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.rsocket.core.RSocketServer' (OnClassCondition)

   RSocketStrategiesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.netty.buffer.PooledByteBufAllocator' (OnClassCondition)

   RabbitAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.rabbitmq.client.Channel' (OnClassCondition)

   ReactiveElasticsearchClientAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'co.elastic.clients.transport.ElasticsearchTransport' (OnClassCondition)

   ReactiveElasticsearchRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.elasticsearch.client.elc.ReactiveElasticsearchClient' (OnClassCondition)

   ReactiveMultipartAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.web.reactive.config.WebFluxConfigurer' (OnClassCondition)

   ReactiveOAuth2ClientAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'reactor.core.publisher.Flux' (OnClassCondition)

   ReactiveOAuth2ResourceServerAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity' (OnClassCondition)

   ReactiveSecurityAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'reactor.core.publisher.Flux' (OnClassCondition)

   ReactiveUserDetailsServiceAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.authentication.ReactiveAuthenticationManager' (OnClassCondition)

   ReactiveWebServerFactoryAutoConfiguration:
      Did not match:
         - @ConditionalOnWebApplication did not find reactive web application classes (OnWebApplicationCondition)

   ReactorAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'reactor.core.publisher.Hooks' (OnClassCondition)

   RedisAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.redis.core.RedisOperations' (OnClassCondition)

   RedisCacheConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.redis.connection.RedisConnectionFactory' (OnClassCondition)

   RedisReactiveAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'reactor.core.publisher.Flux' (OnClassCondition)

   RedisRepositoriesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.redis.repository.configuration.EnableRedisRepositories' (OnClassCondition)

   RepositoryRestMvcAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration' (OnClassCondition)

   Saml2RelyingPartyAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistrationRepository' (OnClassCondition)

   SecurityAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.authentication.DefaultAuthenticationEventPublisher' (OnClassCondition)

   SecurityFilterAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.config.http.SessionCreationPolicy' (OnClassCondition)

   SendGridAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.sendgrid.SendGrid' (OnClassCondition)

   ServletWebServerFactoryAutoConfiguration.ForwardedHeaderFilterConfiguration:
      Did not match:
         - @ConditionalOnProperty (server.forward-headers-strategy=framework) did not find property 'server.forward-headers-strategy' (OnPropertyCondition)

   ServletWebServerFactoryConfiguration.EmbeddedJetty:
      Did not match:
         - @ConditionalOnClass did not find required classes 'org.eclipse.jetty.server.Server', 'org.eclipse.jetty.util.Loader', 'org.eclipse.jetty.ee10.webapp.WebAppContext' (OnClassCondition)

   ServletWebServerFactoryConfiguration.EmbeddedUndertow:
      Did not match:
         - @ConditionalOnClass did not find required classes 'io.undertow.Undertow', 'org.xnio.SslClientAuthMode' (OnClassCondition)

   SessionAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.session.Session' (OnClassCondition)

   SpringDocConfiguration#propertiesResolverForSchema:
      Did not match:
         - @ConditionalOnProperty (springdoc.api-docs.resolve-schema-properties) did not find property 'springdoc.api-docs.resolve-schema-properties' (OnPropertyCondition)

   SpringDocConfiguration#propertyCustomizingConverter:
      Did not match:
         - @ConditionalOnBean (types: org.springdoc.core.customizers.PropertyCustomizer; SearchStrategy: all) did not find any beans of type org.springdoc.core.customizers.PropertyCustomizer (OnBeanCondition)

   SpringDocConfiguration#springdocBeanFactoryPostProcessor:
      Did not match:
         - AnyNestedCondition 0 matched 2 did not; NestedCondition on CacheOrGroupedOpenApiCondition.OnCacheDisabled found non-matching nested conditions @ConditionalOnProperty (springdoc.cache.disabled) did not find property 'springdoc.cache.disabled'; NestedCondition on CacheOrGroupedOpenApiCondition.OnMultipleOpenApiSupportCondition AnyNestedCondition 0 matched 2 did not; NestedCondition on MultipleOpenApiSupportCondition.OnActuatorDifferentPort @ConditionalOnProperty (springdoc.show-actuator) did not find property 'springdoc.show-actuator'; NestedCondition on MultipleOpenApiSupportCondition.OnMultipleOpenApiSupportCondition AnyNestedCondition 0 matched 2 did not; NestedCondition on MultipleOpenApiGroupsCondition.OnGroupConfigProperty @ConditionalOnProperty (springdoc.group-configs[0].group) did not find property 'springdoc.group-configs[0].group'; NestedCondition on MultipleOpenApiGroupsCondition.OnGroupedOpenApiBean @ConditionalOnBean (types: org.springdoc.core.models.GroupedOpenApi; SearchStrategy: all) did not find any beans of type org.springdoc.core.models.GroupedOpenApi (CacheOrGroupedOpenApiCondition)
      Matched:
         - @ConditionalOnClass found required class 'org.springframework.boot.context.properties.bind.BindResult' (OnClassCondition)

   SpringDocConfiguration#springdocBeanFactoryPostProcessor2:
      Did not match:
         - @ConditionalOnMissingClass found unwanted class 'org.springframework.boot.context.properties.bind.BindResult' (OnClassCondition)

   SpringDocConfiguration.SpringDocActuatorConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties' (OnClassCondition)

   SpringDocConfiguration.SpringDocRepositoryRestConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.rest.core.config.RepositoryRestConfiguration' (OnClassCondition)

   SpringDocConfiguration.SpringDocWebFluxSupportConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'reactor.core.publisher.Flux' (OnClassCondition)

   SpringDocDataRestConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.data.rest.core.config.RepositoryRestConfiguration' (OnClassCondition)

   SpringDocFunctionCatalogConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.cloud.function.web.function.FunctionEndpointInitializer' (OnClassCondition)

   SpringDocGroovyConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'groovy.lang.MetaClass' (OnClassCondition)

   SpringDocHateoasConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.hateoas.server.LinkRelationProvider' (OnClassCondition)

   SpringDocJavadocConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.github.therapi.runtimejavadoc.CommentFormatter' (OnClassCondition)

   SpringDocKotlinConfiguration.KotlinModuleConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'com.fasterxml.jackson.module.kotlin.KotlinModule' (OnClassCondition)

   SpringDocKotlinxConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'kotlinx.coroutines.flow.Flow' (OnClassCondition)

   SpringDocNativeConfiguration:
      Did not match:
         - @ConditionalOnExpression (#{${springdoc.api-docs.enabled:true} and ${springdoc.enable-native-support:false}}) resulted in false (OnExpressionCondition)
      Matched:
         - @ConditionalOnWebApplication (required) found 'session' scope (OnWebApplicationCondition)

   SpringDocSecurityConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.core.Authentication' (OnClassCondition)

   SpringDocSortConfiguration#delegatingMethodParameterCustomizer:
      Did not match:
         - @ConditionalOnMissingBean (types: org.springdoc.core.customizers.DelegatingMethodParameterCustomizer; SearchStrategy: all) found beans of type 'org.springdoc.core.customizers.DelegatingMethodParameterCustomizer' delegatingMethodParameterCustomizer (OnBeanCondition)

   SpringDocWebMvcConfiguration.SpringDocWebMvcActuatorConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.boot.actuate.endpoint.web.servlet.WebMvcEndpointHandlerMapping' (OnClassCondition)

   SwaggerConfig#springWebProvider:
      Did not match:
         - @ConditionalOnMissingBean (types: org.springdoc.core.providers.SpringWebProvider; SearchStrategy: all) found beans of type 'org.springdoc.core.providers.SpringWebProvider' springWebProvider (OnBeanCondition)

   SwaggerConfig#swaggerUiConfigParameters:
      Did not match:
         - @ConditionalOnMissingBean (types: org.springdoc.core.properties.SwaggerUiConfigParameters; SearchStrategy: all) found beans of type 'org.springdoc.core.properties.SwaggerUiConfigParameters' org.springdoc.core.properties.SwaggerUiConfigParameters (OnBeanCondition)

   SwaggerConfig#swaggerUiHome:
      Did not match:
         - @ConditionalOnProperty (springdoc.swagger-ui.use-root-path=true) did not find property 'springdoc.swagger-ui.use-root-path' (OnPropertyCondition)

   SwaggerConfig.SwaggerActuatorWelcomeConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.boot.actuate.endpoint.web.servlet.WebMvcEndpointHandlerMapping' (OnClassCondition)

   TaskExecutorConfigurations.SimpleAsyncTaskExecutorBuilderConfiguration#simpleAsyncTaskExecutorBuilderVirtualThreads:
      Did not match:
         - @ConditionalOnMissingBean (types: org.springframework.boot.task.SimpleAsyncTaskExecutorBuilder; SearchStrategy: all) found beans of type 'org.springframework.boot.task.SimpleAsyncTaskExecutorBuilder' simpleAsyncTaskExecutorBuilder (OnBeanCondition)

   TaskExecutorConfigurations.TaskExecutorConfiguration#applicationTaskExecutorVirtualThreads:
      Did not match:
         - @ConditionalOnThreading did not find VIRTUAL (OnThreadingCondition)

   TaskSchedulingAutoConfiguration#scheduledBeanLazyInitializationExcludeFilter:
      Did not match:
         - @ConditionalOnBean (names: org.springframework.context.annotation.internalScheduledAnnotationProcessor; SearchStrategy: all) did not find any beans named org.springframework.context.annotation.internalScheduledAnnotationProcessor (OnBeanCondition)

   TaskSchedulingConfigurations.SimpleAsyncTaskSchedulerBuilderConfiguration#simpleAsyncTaskSchedulerBuilderVirtualThreads:
      Did not match:
         - @ConditionalOnMissingBean (types: org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder; SearchStrategy: all) found beans of type 'org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder' simpleAsyncTaskSchedulerBuilder (OnBeanCondition)

   TaskSchedulingConfigurations.TaskSchedulerConfiguration:
      Did not match:
         - @ConditionalOnBean (names: org.springframework.context.annotation.internalScheduledAnnotationProcessor; SearchStrategy: all) did not find any beans named org.springframework.context.annotation.internalScheduledAnnotationProcessor (OnBeanCondition)

   ThymeleafAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.thymeleaf.spring6.SpringTemplateEngine' (OnClassCondition)

   TransactionAutoConfiguration#transactionalOperator:
      Did not match:
         - @ConditionalOnSingleCandidate (types: org.springframework.transaction.ReactiveTransactionManager; SearchStrategy: all) did not find any beans (OnBeanCondition)

   TransactionAutoConfiguration.AspectJTransactionManagementConfiguration:
      Did not match:
         - @ConditionalOnBean (types: org.springframework.transaction.aspectj.AbstractTransactionAspect; SearchStrategy: all) did not find any beans of type org.springframework.transaction.aspectj.AbstractTransactionAspect (OnBeanCondition)

   TransactionAutoConfiguration.EnableTransactionManagementConfiguration.JdkDynamicAutoProxyConfiguration:
      Did not match:
         - @ConditionalOnProperty (spring.aop.proxy-target-class=false) did not find property 'proxy-target-class' (OnPropertyCondition)

   UserDetailsServiceAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.security.authentication.AuthenticationManager' (OnClassCondition)

   WebClientAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.web.reactive.function.client.WebClient' (OnClassCondition)

   WebFluxAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.web.reactive.config.WebFluxConfigurer' (OnClassCondition)

   WebMvcAutoConfiguration#hiddenHttpMethodFilter:
      Did not match:
         - @ConditionalOnProperty (spring.mvc.hiddenmethod.filter.enabled) did not find property 'enabled' (OnPropertyCondition)

   WebMvcAutoConfiguration.ProblemDetailsErrorHandlingConfiguration:
      Did not match:
         - @ConditionalOnProperty (spring.mvc.problemdetails.enabled=true) did not find property 'enabled' (OnPropertyCondition)

   WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#beanNameViewResolver:
      Did not match:
         - @ConditionalOnMissingBean (types: org.springframework.web.servlet.view.BeanNameViewResolver; SearchStrategy: all) found beans of type 'org.springframework.web.servlet.view.BeanNameViewResolver' beanNameViewResolver (OnBeanCondition)

   WebServiceTemplateAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.oxm.Marshaller' (OnClassCondition)

   WebServicesAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.ws.transport.http.MessageDispatcherServlet' (OnClassCondition)

   WebSessionIdResolverAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'reactor.core.publisher.Mono' (OnClassCondition)

   WebSocketMessagingAutoConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer' (OnClassCondition)

   WebSocketReactiveAutoConfiguration:
      Did not match:
         - @ConditionalOnWebApplication did not find reactive web application classes (OnWebApplicationCondition)

   WebSocketServletAutoConfiguration.JettyWebSocketConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'org.eclipse.jetty.ee10.websocket.jakarta.server.config.JakartaWebSocketServletContainerInitializer' (OnClassCondition)

   WebSocketServletAutoConfiguration.UndertowWebSocketConfiguration:
      Did not match:
         - @ConditionalOnClass did not find required class 'io.undertow.websockets.jsr.Bootstrap' (OnClassCondition)

   XADataSourceAutoConfiguration:
      Did not match:
         - @ConditionalOnBean (types: org.springframework.boot.jdbc.XADataSourceWrapper; SearchStrategy: all) did not find any beans of type org.springframework.boot.jdbc.XADataSourceWrapper (OnBeanCondition)
      Matched:
         - @ConditionalOnClass found required classes 'javax.sql.DataSource', 'jakarta.transaction.TransactionManager', 'org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType' (OnClassCondition)


Exclusions:
-----------

    None


Unconditional classes:
----------------------

    org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration

    org.springframework.boot.autoconfigure.ssl.SslAutoConfiguration

    org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration

    org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration

    org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration

    org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration



2025-05-03 23:25:33 | ERROR | o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'uk_country_name') THEN ALTER TABLE country ADD CONSTRAINT uk_country_name UNIQUE (name)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'uk_country_name') THEN ALTER TABLE country ADD CONSTRAINT uk_country_name UNIQUE (name)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 18 common frames omitted
Caused by: org.postgresql.util.PSQLException: Unterminated dollar quote started at position 3 in SQL DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'uk_country_name') THEN ALTER TABLE country ADD CONSTRAINT uk_country_name UNIQUE (name). Expected terminating $$
	at org.postgresql.core.Parser.checkParsePosition(Parser.java:1443)
	at org.postgresql.core.Parser.parseSql(Parser.java:1342)
	at org.postgresql.core.Parser.replaceProcessing(Parser.java:1294)
	at org.postgresql.core.CachedQueryCreateAction.create(CachedQueryCreateAction.java:43)
	at org.postgresql.core.QueryExecutorBase.createQueryByKey(QueryExecutorBase.java:369)
	at org.postgresql.jdbc.PgStatement.executeCachedSql(PgStatement.java:313)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:297)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:292)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 28 common frames omitted
2025-05-03 23:26:04 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 23:26:04 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 37320 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 23:26:04 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 23:26:05 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 23:26:05 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 22 ms. Found 3 JPA repository interfaces.
2025-05-03 23:26:05 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 23:26:05 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 23:26:05 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 23:26:05 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 23:26:05 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 23:26:05 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 816 ms
2025-05-03 23:26:05 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 23:26:05 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@2f04993d
2025-05-03 23:26:05 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-03 23:26:05 | WARN  | o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'uk_country_name') THEN ALTER TABLE country ADD CONSTRAINT uk_country_name UNIQUE (name)
2025-05-03 23:26:05 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-03 23:26:05 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-03 23:26:05 | INFO  | o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-05-03 23:26:05 | INFO  | o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-05-03 23:26:05 | ERROR | o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'uk_country_name') THEN ALTER TABLE country ADD CONSTRAINT uk_country_name UNIQUE (name)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'uk_country_name') THEN ALTER TABLE country ADD CONSTRAINT uk_country_name UNIQUE (name)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 18 common frames omitted
Caused by: org.postgresql.util.PSQLException: Unterminated dollar quote started at position 3 in SQL DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'uk_country_name') THEN ALTER TABLE country ADD CONSTRAINT uk_country_name UNIQUE (name). Expected terminating $$
	at org.postgresql.core.Parser.checkParsePosition(Parser.java:1443)
	at org.postgresql.core.Parser.parseSql(Parser.java:1342)
	at org.postgresql.core.Parser.replaceProcessing(Parser.java:1294)
	at org.postgresql.core.CachedQueryCreateAction.create(CachedQueryCreateAction.java:43)
	at org.postgresql.core.QueryExecutorBase.createQueryByKey(QueryExecutorBase.java:369)
	at org.postgresql.jdbc.PgStatement.executeCachedSql(PgStatement.java:313)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:297)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:292)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 28 common frames omitted
2025-05-03 23:28:46 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 23:28:46 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 37412 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 23:28:46 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 23:28:46 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 23:28:46 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 25 ms. Found 3 JPA repository interfaces.
2025-05-03 23:28:47 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 23:28:47 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 23:28:47 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 23:28:47 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 23:28:47 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 23:28:47 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 957 ms
2025-05-03 23:28:47 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 23:28:47 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@103c97ff
2025-05-03 23:28:47 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-03 23:28:47 | WARN  | o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'uk_country_name') THEN ALTER TABLE country ADD CONSTRAINT uk_country_name UNIQUE (name)
2025-05-03 23:28:47 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-03 23:28:47 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-03 23:28:47 | INFO  | o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-05-03 23:28:47 | INFO  | o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-05-03 23:28:47 | ERROR | o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'uk_country_name') THEN ALTER TABLE country ADD CONSTRAINT uk_country_name UNIQUE (name)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:949)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.example.CountrySearchApplication.main(CountrySearchApplication.java:17)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #5 of class path resource [db/init.sql]: DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'uk_country_name') THEN ALTER TABLE country ADD CONSTRAINT uk_country_name UNIQUE (name)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 18 common frames omitted
Caused by: org.postgresql.util.PSQLException: Unterminated dollar quote started at position 3 in SQL DO $$ BEGIN IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'uk_country_name') THEN ALTER TABLE country ADD CONSTRAINT uk_country_name UNIQUE (name). Expected terminating $$
	at org.postgresql.core.Parser.checkParsePosition(Parser.java:1443)
	at org.postgresql.core.Parser.parseSql(Parser.java:1342)
	at org.postgresql.core.Parser.replaceProcessing(Parser.java:1294)
	at org.postgresql.core.CachedQueryCreateAction.create(CachedQueryCreateAction.java:43)
	at org.postgresql.core.QueryExecutorBase.createQueryByKey(QueryExecutorBase.java:369)
	at org.postgresql.jdbc.PgStatement.executeCachedSql(PgStatement.java:313)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:297)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:292)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 28 common frames omitted
2025-05-03 23:29:54 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 23:29:54 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 37451 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 23:29:54 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 23:29:54 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 23:29:54 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 23 ms. Found 3 JPA repository interfaces.
2025-05-03 23:29:54 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 23:29:54 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 23:29:54 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 23:29:54 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 23:29:54 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 23:29:54 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 804 ms
2025-05-03 23:29:55 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 23:29:55 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@5d14e99e
2025-05-03 23:29:55 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-03 23:29:55 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-03 23:29:55 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-03 23:29:55 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-03 23:29:55 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-03 23:29:55 | WARN  | org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-05-03 23:29:55 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-03 23:29:55 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-03 23:29:55 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-03 23:29:56 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-03 23:29:57 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-03 23:29:57 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-03 23:29:57 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.415 seconds (process running for 3.836)
2025-05-03 23:30:05 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-03 23:30:05 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-03 23:30:05 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-03 23:30:05 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-03 23:30:05 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-03 23:30:05 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:30:05 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:30:05 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-03 23:30:09 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-03 23:30:09 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-03 23:30:09 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 23:30:09 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 23:30:09 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-03 23:30:11 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country)), args=Country(id=null, name=Germany, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cities=[], nations=null)
2025-05-03 23:30:11 | INFO  | org.example.service.CountryService - ✨ Created country: Germany (ID: 1)
2025-05-03 23:30:11 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-03 23:30:11 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-03 23:30:11 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-05-03 23:30:15 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List)), args=1,[City(id=null, name=Minsk, population=2000000.0, areaSquareKm=409.5, country=null), City(id=null, name=Grodno, population=370000.0, areaSquareKm=142.1, country=null)]
2025-05-03 23:30:15 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'Germany' (ID: 1)
2025-05-03 23:30:15 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 1). Action: ADD
2025-05-03 23:30:15 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 2) to country 'Germany' (ID: 1)
2025-05-03 23:30:15 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 1). Action: ADD
2025-05-03 23:30:15 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-03 23:30:15 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-03 23:30:15 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-05-03 23:30:17 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-03 23:30:17 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-03 23:30:17 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:30:17 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:30:17 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-05-03 23:30:22 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), args=1
2025-05-03 23:30:22 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-03 23:30:22 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-03 23:30:22 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-03 23:30:22 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-03 23:30:22 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-05-03 23:30:24 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-03 23:30:24 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-03 23:30:24 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 23:30:24 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 23:30:24 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 7
2025-05-03 23:30:26 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-03 23:30:26 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-03 23:30:26 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:30:26 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:30:26 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 8
2025-05-03 23:30:29 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-03 23:30:29 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-03 23:30:29 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-03 23:30:29 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-03 23:30:30 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 23:30:30 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 37479 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 23:30:30 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 23:30:31 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 23:30:31 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 21 ms. Found 3 JPA repository interfaces.
2025-05-03 23:30:31 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 23:30:31 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 23:30:31 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 23:30:31 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 23:30:31 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 23:30:31 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 746 ms
2025-05-03 23:30:31 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 23:30:31 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@5c1b89ac
2025-05-03 23:30:31 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-03 23:30:31 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-03 23:30:31 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-03 23:30:31 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-03 23:30:31 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-03 23:30:31 | WARN  | org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-05-03 23:30:32 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-03 23:30:32 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-03 23:30:32 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-03 23:30:32 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-03 23:30:33 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-03 23:30:33 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-03 23:30:33 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.346 seconds (process running for 3.698)
2025-05-03 23:30:34 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-03 23:30:34 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-03 23:30:34 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-03 23:30:34 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-03 23:30:34 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-03 23:30:34 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:30:34 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:30:34 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-03 23:30:38 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-03 23:30:38 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-03 23:30:38 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 23:30:38 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 23:30:38 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-03 23:34:14 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country)), args=Country(id=null, name=Germany, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cities=[], nations=null)
2025-05-03 23:34:14 | INFO  | org.example.service.CountryService - ✨ Created country: Germany (ID: 2)
2025-05-03 23:34:15 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-03 23:34:15 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-03 23:34:15 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-05-03 23:34:16 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-03 23:34:16 | INFO  | org.example.service.CountryService - 🔄 Fetched 1 countries from DB and cached
2025-05-03 23:34:16 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 23:34:16 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 23:34:16 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-05-03 23:34:19 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=9
2025-05-03 23:34:19 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-03 23:34:19 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-03 23:34:19 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-05-03 23:34:26 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List)), args=2,[City(id=null, name=Minsk, population=2000000.0, areaSquareKm=409.5, country=null), City(id=null, name=Grodno, population=370000.0, areaSquareKm=142.1, country=null)]
2025-05-03 23:34:26 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 3) to country 'Germany' (ID: 2)
2025-05-03 23:34:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 2). Action: ADD
2025-05-03 23:34:26 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 4) to country 'Germany' (ID: 2)
2025-05-03 23:34:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 2). Action: ADD
2025-05-03 23:34:26 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-03 23:34:26 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-03 23:34:26 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-05-03 23:34:29 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-03 23:34:29 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-03 23:34:29 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:34:29 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:34:29 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 7
2025-05-03 23:40:25 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-03 23:40:25 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-03 23:40:25 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-03 23:40:25 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-03 23:40:28 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 23:40:28 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 37861 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 23:40:28 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 23:40:28 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 23:40:28 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 23 ms. Found 3 JPA repository interfaces.
2025-05-03 23:40:29 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 23:40:29 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 23:40:29 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 23:40:29 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 23:40:29 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 23:40:29 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 759 ms
2025-05-03 23:40:29 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 23:40:29 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@40a1b6d4
2025-05-03 23:40:29 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-03 23:40:29 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-03 23:40:29 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-03 23:40:29 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-03 23:40:29 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-03 23:40:29 | WARN  | org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-05-03 23:40:30 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-03 23:40:30 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-03 23:40:30 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-03 23:40:30 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-03 23:40:31 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-03 23:40:31 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-03 23:40:31 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.382 seconds (process running for 3.901)
2025-05-03 23:40:46 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-03 23:40:46 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-03 23:40:46 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-05-03 23:40:47 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-03 23:40:47 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-03 23:40:47 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:40:47 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:40:47 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-03 23:40:56 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), args=2
2025-05-03 23:40:56 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 2
2025-05-03 23:40:56 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 2
2025-05-03 23:40:56 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-03 23:40:56 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-03 23:40:56 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-03 23:40:59 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-03 23:40:59 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-03 23:40:59 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 23:40:59 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 23:40:59 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-05-03 23:41:02 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-03 23:41:02 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-03 23:41:02 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:41:02 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:41:02 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-05-03 23:41:07 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-03 23:41:07 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-03 23:41:07 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-03 23:41:07 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-03 23:41:09 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 23:41:09 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 37928 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 23:41:09 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 23:41:10 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 23:41:10 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 23 ms. Found 3 JPA repository interfaces.
2025-05-03 23:41:10 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 23:41:10 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 23:41:10 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 23:41:10 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 23:41:10 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 23:41:10 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 964 ms
2025-05-03 23:41:10 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 23:41:10 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@38cfecf3
2025-05-03 23:41:10 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-03 23:41:10 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-03 23:41:10 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-03 23:41:10 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-03 23:41:10 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-03 23:41:10 | WARN  | org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-05-03 23:41:11 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-03 23:41:11 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-03 23:41:11 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-03 23:41:11 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-03 23:41:13 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-03 23:41:13 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-03 23:41:13 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.735 seconds (process running for 4.177)
2025-05-03 23:41:14 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-03 23:41:14 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-03 23:41:14 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-03 23:41:14 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-03 23:41:14 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-03 23:41:14 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:41:14 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:41:14 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-03 23:41:21 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-03 23:41:21 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-03 23:41:21 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 23:41:21 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 23:41:21 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-03 23:41:38 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country)), args=Country(id=null, name=Germany, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cities=[], nations=null)
2025-05-03 23:41:38 | INFO  | org.example.service.CountryService - ✨ Created country: Germany (ID: 3)
2025-05-03 23:41:38 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-03 23:41:38 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-03 23:41:38 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-05-03 23:41:43 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-03 23:41:43 | INFO  | org.example.service.CountryService - 🔄 Fetched 1 countries from DB and cached
2025-05-03 23:41:43 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 23:41:43 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 23:41:43 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-05-03 23:42:12 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List)), args=3,[City(id=null, name=Minsk, population=2000000.0, areaSquareKm=409.5, country=null), City(id=null, name=Grodno, population=370000.0, areaSquareKm=142.1, country=null)]
2025-05-03 23:42:12 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 5) to country 'Germany' (ID: 3)
2025-05-03 23:42:12 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 3). Action: ADD
2025-05-03 23:42:12 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 6) to country 'Germany' (ID: 3)
2025-05-03 23:42:12 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 3). Action: ADD
2025-05-03 23:42:12 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-03 23:42:12 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-03 23:42:12 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-05-03 23:42:15 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-03 23:42:15 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-03 23:42:15 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:42:15 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:42:15 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-05-03 23:43:09 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=3
2025-05-03 23:43:09 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-03 23:43:09 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-03 23:43:09 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 7
2025-05-03 23:43:14 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-03 23:43:14 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-03 23:43:14 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:43:14 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:43:14 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 8
2025-05-03 23:43:47 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), args=2
2025-05-03 23:43:47 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 2
2025-05-03 23:43:47 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), exception: Country not found with ID: 2
2025-05-03 23:43:47 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-03 23:43:47 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 9
2025-05-03 23:43:50 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), args=3
2025-05-03 23:43:50 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 3
2025-05-03 23:43:50 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 3
2025-05-03 23:43:50 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-03 23:43:50 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-03 23:43:50 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 10
2025-05-03 23:44:01 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-03 23:44:01 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-03 23:44:01 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:44:01 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:44:01 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 11
2025-05-03 23:44:40 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=3
2025-05-03 23:44:40 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-03 23:44:40 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-03 23:44:40 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 12
2025-05-03 23:49:50 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-03 23:49:50 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-03 23:49:50 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-03 23:49:50 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-03 23:49:52 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-03 23:49:52 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 38154 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-03 23:49:52 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-03 23:49:53 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-03 23:49:53 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 21 ms. Found 3 JPA repository interfaces.
2025-05-03 23:49:53 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-03 23:49:53 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-03 23:49:53 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-03 23:49:53 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-03 23:49:53 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-03 23:49:53 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 783 ms
2025-05-03 23:49:53 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-03 23:49:53 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@35fa450f
2025-05-03 23:49:53 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-03 23:49:53 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-03 23:49:53 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-03 23:49:53 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-03 23:49:54 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-03 23:49:54 | WARN  | org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-05-03 23:49:54 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-03 23:49:54 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-03 23:49:54 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-03 23:49:54 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-03 23:49:56 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-03 23:49:56 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-03 23:49:56 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.35 seconds (process running for 3.726)
2025-05-03 23:49:58 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-03 23:49:58 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-03 23:49:58 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-03 23:49:58 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-03 23:49:58 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-03 23:49:58 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:49:58 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:49:58 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-03 23:50:12 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-03 23:50:12 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-03 23:50:12 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 23:50:12 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-03 23:50:12 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-03 23:50:14 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country)), args=Country(id=null, name=Germany, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cities=[], nations=null)
2025-05-03 23:50:14 | INFO  | org.example.service.CountryService - ✨ Created country: Germany (ID: 4)
2025-05-03 23:50:14 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-03 23:50:14 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-03 23:50:14 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-05-03 23:50:20 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List)), args=4,[City(id=null, name=Minsk, population=2000000.0, areaSquareKm=409.5, country=null), City(id=null, name=Grodno, population=370000.0, areaSquareKm=142.1, country=null)]
2025-05-03 23:50:20 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 7) to country 'Germany' (ID: 4)
2025-05-03 23:50:20 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 4). Action: ADD
2025-05-03 23:50:20 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 8) to country 'Germany' (ID: 4)
2025-05-03 23:50:20 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 4). Action: ADD
2025-05-03 23:50:20 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-03 23:50:20 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-03 23:50:20 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-05-03 23:50:22 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-03 23:50:22 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-03 23:50:22 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:50:22 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:50:22 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-05-03 23:50:28 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=4
2025-05-03 23:50:28 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-03 23:50:28 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-03 23:50:28 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-05-03 23:50:34 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=4
2025-05-03 23:50:34 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-03 23:50:34 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-03 23:50:34 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 7
2025-05-03 23:50:45 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-03 23:50:45 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-03 23:50:45 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:50:45 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:50:45 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 8
2025-05-03 23:50:57 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=4
2025-05-03 23:50:57 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-03 23:50:57 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-03 23:50:57 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 9
2025-05-03 23:51:45 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), args=4
2025-05-03 23:51:45 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 4
2025-05-03 23:51:45 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 4
2025-05-03 23:51:45 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-03 23:51:45 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-03 23:51:45 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 10
2025-05-03 23:51:48 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-03 23:51:48 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-03 23:51:48 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:51:48 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:51:48 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 11
2025-05-03 23:51:48 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-03 23:51:48 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-03 23:51:48 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:51:48 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-03 23:51:48 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 12
2025-05-03 23:51:53 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=4
2025-05-03 23:51:53 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-03 23:51:53 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-03 23:51:53 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 13
2025-05-04 00:18:48 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-04 00:18:48 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-04 00:18:48 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-04 00:18:48 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-04 00:18:50 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-04 00:18:50 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 39007 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-04 00:18:50 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-04 00:18:50 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-04 00:18:51 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 21 ms. Found 3 JPA repository interfaces.
2025-05-04 00:18:51 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-04 00:18:51 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-04 00:18:51 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-04 00:18:51 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-04 00:18:51 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-04 00:18:51 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 777 ms
2025-05-04 00:18:51 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-04 00:18:51 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@50122012
2025-05-04 00:18:51 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-04 00:18:51 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-04 00:18:51 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-04 00:18:51 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-04 00:18:51 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-04 00:18:51 | WARN  | org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-05-04 00:18:52 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-04 00:18:52 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-04 00:18:52 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-04 00:18:52 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-04 00:18:53 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-04 00:18:53 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-04 00:18:53 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.467 seconds (process running for 3.842)
2025-05-04 00:18:53 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-04 00:18:53 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-04 00:18:53 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-04 00:18:53 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-04 00:18:54 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 00:18:54 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 00:18:54 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 00:18:54 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-04 00:18:56 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country)), args=Country(id=null, name=Germany, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cities=[], nations=null)
2025-05-04 00:18:56 | INFO  | org.example.service.CountryService - ✨ Created country: Germany (ID: 5)
2025-05-04 00:18:56 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-04 00:18:56 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-04 00:18:56 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-04 00:19:00 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 00:19:00 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 00:19:00 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 00:19:00 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 00:19:00 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-05-04 00:19:10 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=5
2025-05-04 00:19:10 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 00:19:10 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 00:19:10 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-05-04 00:19:14 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-04 00:19:14 | INFO  | org.example.service.CountryService - 🔄 Fetched 1 countries from DB and cached
2025-05-04 00:19:14 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 00:19:14 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 00:19:14 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-05-04 00:19:19 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List)), args=5,[City(id=null, name=Minsk, population=2000000.0, areaSquareKm=409.5, country=null), City(id=null, name=Grodno, population=370000.0, areaSquareKm=142.1, country=null)]
2025-05-04 00:19:19 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 9) to country 'Germany' (ID: 5)
2025-05-04 00:19:19 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 5). Action: ADD
2025-05-04 00:19:19 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 10) to country 'Germany' (ID: 5)
2025-05-04 00:19:19 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 5). Action: ADD
2025-05-04 00:19:19 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-04 00:19:19 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-04 00:19:19 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-05-04 00:19:22 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=5
2025-05-04 00:19:22 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 00:19:22 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 00:19:22 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 7
2025-05-04 00:19:28 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=5
2025-05-04 00:19:28 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 00:19:28 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 00:19:28 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 8
2025-05-04 00:19:36 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 00:19:36 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 00:19:36 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 00:19:36 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 00:19:36 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 9
2025-05-04 00:19:41 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=5
2025-05-04 00:19:41 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 00:19:41 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 00:19:41 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 10
2025-05-04 00:19:45 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=5
2025-05-04 00:19:45 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 00:19:45 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 00:19:45 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 11
2025-05-04 00:19:46 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=5
2025-05-04 00:19:46 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 00:19:46 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 00:19:46 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 12
2025-05-04 00:19:49 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-04 00:19:49 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-04 00:19:49 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-04 00:19:49 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-04 00:19:51 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-04 00:19:51 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 39055 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-04 00:19:51 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-04 00:19:51 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-04 00:19:51 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 21 ms. Found 3 JPA repository interfaces.
2025-05-04 00:19:52 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-04 00:19:52 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-04 00:19:52 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-04 00:19:52 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-04 00:19:52 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-04 00:19:52 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 840 ms
2025-05-04 00:19:52 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-04 00:19:52 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@283ab206
2025-05-04 00:19:52 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-04 00:19:52 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-04 00:19:52 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-04 00:19:52 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-04 00:19:52 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-04 00:19:52 | WARN  | org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-05-04 00:19:52 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-04 00:19:52 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-04 00:19:52 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-04 00:19:53 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-04 00:19:54 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-04 00:19:54 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-04 00:19:54 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.52 seconds (process running for 3.926)
2025-05-04 00:19:54 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-04 00:19:54 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-04 00:19:54 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-04 00:19:54 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=5
2025-05-04 00:19:54 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 00:19:54 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 00:19:54 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-04 00:19:57 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=5
2025-05-04 00:19:57 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 00:19:57 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 00:19:57 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-04 00:19:58 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=5
2025-05-04 00:19:58 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 00:19:58 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 00:19:58 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-05-04 00:19:59 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=5
2025-05-04 00:19:59 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 00:19:59 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 00:19:59 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-05-04 00:20:30 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-04 00:20:30 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-04 00:20:30 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-04 00:20:30 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-04 00:20:32 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-04 00:20:32 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 39077 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-04 00:20:32 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-04 00:20:32 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-04 00:20:32 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 22 ms. Found 3 JPA repository interfaces.
2025-05-04 00:20:33 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-04 00:20:33 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-04 00:20:33 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-04 00:20:33 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-04 00:20:33 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-04 00:20:33 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 772 ms
2025-05-04 00:20:33 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-04 00:20:33 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@7d25913
2025-05-04 00:20:33 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-04 00:20:33 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-04 00:20:33 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-04 00:20:33 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-04 00:20:33 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-04 00:20:33 | WARN  | org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-05-04 00:20:34 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-04 00:20:34 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-04 00:20:34 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-04 00:20:34 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-04 00:20:35 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-04 00:20:35 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-04 00:20:35 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.477 seconds (process running for 3.827)
2025-05-04 00:20:38 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-04 00:20:38 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-04 00:20:38 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-04 00:20:38 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), args=5
2025-05-04 00:20:38 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 5
2025-05-04 00:20:38 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 5
2025-05-04 00:20:38 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-04 00:20:38 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-04 00:20:38 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-04 00:20:41 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=5
2025-05-04 00:20:41 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 00:20:41 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 00:20:41 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-04 00:20:44 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 00:20:44 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 00:20:44 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 00:20:44 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 00:20:44 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-05-04 00:20:46 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 00:20:46 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 00:20:46 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 00:20:46 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 00:20:46 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-05-04 00:20:48 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 00:20:48 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 00:20:48 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 00:20:48 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 00:20:48 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-05-04 00:20:48 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 00:20:48 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 00:20:48 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 00:20:48 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 00:20:48 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-05-04 00:20:53 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=5
2025-05-04 00:20:53 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 00:20:53 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 00:20:53 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 7
2025-05-04 00:20:53 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=5
2025-05-04 00:20:53 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 00:20:53 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 00:20:53 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 8
2025-05-04 00:20:54 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=5
2025-05-04 00:20:54 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 00:20:54 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 00:20:54 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 9
2025-05-04 00:44:40 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-04 00:44:40 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-04 00:44:40 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-04 00:44:40 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-04 00:44:42 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-04 00:44:42 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 39729 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-04 00:44:42 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-04 00:44:42 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-04 00:44:43 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 24 ms. Found 3 JPA repository interfaces.
2025-05-04 00:44:43 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-04 00:44:43 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-04 00:44:43 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-04 00:44:43 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-04 00:44:43 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-04 00:44:43 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 863 ms
2025-05-04 00:44:43 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-04 00:44:43 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@25ad25f5
2025-05-04 00:44:43 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-04 00:44:43 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-04 00:44:43 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-04 00:44:43 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-04 00:44:43 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-04 00:44:43 | WARN  | org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-05-04 00:44:44 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-04 00:44:44 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-04 00:44:44 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-04 00:44:44 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-04 00:44:45 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-04 00:44:45 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-04 00:44:45 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.524 seconds (process running for 4.205)
2025-05-04 00:45:09 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-04 00:45:09 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-04 00:45:09 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 3 ms
2025-05-04 00:45:09 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 00:45:09 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 00:45:09 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 00:45:09 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 00:45:09 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-04 00:45:43 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-04 00:45:43 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 00:45:43 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 00:45:43 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 00:45:43 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-04 00:45:46 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country)), args=Country(id=null, name=Germany, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cities=[], nations=null)
2025-05-04 00:45:46 | INFO  | org.example.service.CountryService - ✨ Created country: Germany (ID: 6)
2025-05-04 00:45:46 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-04 00:45:46 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-04 00:45:46 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-05-04 00:45:50 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-04 00:45:50 | INFO  | org.example.service.CountryService - 🔄 Fetched 1 countries from DB and cached
2025-05-04 00:45:50 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 00:45:50 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 00:45:50 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-05-04 00:46:01 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List)), args=6,[City(id=null, name=Minsk, population=2000000.0, areaSquareKm=409.5, country=null), City(id=null, name=Grodno, population=370000.0, areaSquareKm=142.1, country=null)]
2025-05-04 00:46:01 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 11) to country 'Germany' (ID: 6)
2025-05-04 00:46:01 | INFO  | org.example.service.CityService - Evicted cities cache for country 6
2025-05-04 00:46:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 6). Action: ADD
2025-05-04 00:46:01 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 12) to country 'Germany' (ID: 6)
2025-05-04 00:46:01 | INFO  | org.example.service.CityService - Evicted cities cache for country 6
2025-05-04 00:46:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 6). Action: ADD
2025-05-04 00:46:01 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-04 00:46:01 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-04 00:46:01 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-05-04 00:46:10 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=6
2025-05-04 00:46:10 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 00:46:10 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 00:46:10 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-05-04 00:46:11 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=6
2025-05-04 00:46:11 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 00:46:11 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 00:46:11 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 7
2025-05-04 00:46:15 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=6
2025-05-04 00:46:15 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 00:46:15 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 00:46:15 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 8
2025-05-04 00:46:56 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), args=6
2025-05-04 00:46:56 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 6
2025-05-04 00:46:56 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 6
2025-05-04 00:46:56 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-04 00:46:56 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-04 00:46:56 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 9
2025-05-04 00:46:59 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-04 00:46:59 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 00:46:59 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 00:46:59 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 00:46:59 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 10
2025-05-04 00:47:03 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=6
2025-05-04 00:47:03 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 00:47:03 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 00:47:03 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 11
2025-05-04 00:47:06 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 00:47:06 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 00:47:06 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 00:47:06 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 00:47:06 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 12
2025-05-04 00:47:21 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-04 00:47:21 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-04 00:47:21 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-04 00:47:21 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-04 00:47:22 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-04 00:47:22 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 39827 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-04 00:47:22 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-04 00:47:23 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-04 00:47:23 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 22 ms. Found 3 JPA repository interfaces.
2025-05-04 00:47:23 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-04 00:47:23 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-04 00:47:23 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-04 00:47:23 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-04 00:47:23 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-04 00:47:23 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 839 ms
2025-05-04 00:47:23 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-04 00:47:23 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@333398f
2025-05-04 00:47:23 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-04 00:47:24 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-04 00:47:24 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-04 00:47:24 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-04 00:47:24 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-04 00:47:24 | WARN  | org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-05-04 00:47:24 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-04 00:47:24 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-04 00:47:24 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-04 00:47:25 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-04 00:47:26 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-04 00:47:26 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-04 00:47:26 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.745 seconds (process running for 4.202)
2025-05-04 00:47:26 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-04 00:47:26 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-04 00:47:26 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-04 00:47:26 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 00:47:26 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 00:47:26 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 00:47:26 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 00:47:26 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-04 00:47:27 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 00:47:27 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 00:47:27 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 00:47:27 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 00:47:27 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-04 00:47:54 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=6
2025-05-04 00:47:54 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 00:47:54 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 00:47:54 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-05-04 00:47:58 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=1
2025-05-04 00:47:58 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 00:47:58 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), exception: Country not found
2025-05-04 00:47:58 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-04 00:47:58 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-05-04 00:48:06 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-04 00:48:06 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 00:48:06 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 00:48:06 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 00:48:06 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-05-04 00:48:11 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country)), args=Country(id=null, name=Germany, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cities=[], nations=null)
2025-05-04 00:48:11 | INFO  | org.example.service.CountryService - ✨ Created country: Germany (ID: 7)
2025-05-04 00:48:11 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-04 00:48:11 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-04 00:48:11 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-05-04 00:48:15 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-04 00:48:15 | INFO  | org.example.service.CountryService - 🔄 Fetched 1 countries from DB and cached
2025-05-04 00:48:15 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 00:48:15 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 00:48:15 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 7
2025-05-04 00:48:20 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=7
2025-05-04 00:48:20 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_7
2025-05-04 00:48:20 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-04 00:48:20 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-04 00:48:20 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 8
2025-05-04 00:48:24 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=7
2025-05-04 00:48:24 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_7
2025-05-04 00:48:24 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-04 00:48:24 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-04 00:48:24 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 9
2025-05-04 00:48:26 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=7
2025-05-04 00:48:26 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_7
2025-05-04 00:48:26 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-04 00:48:26 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-04 00:48:26 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 10
2025-05-04 00:48:27 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=7
2025-05-04 00:48:27 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_7
2025-05-04 00:48:27 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-04 00:48:27 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-04 00:48:27 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 11
2025-05-04 00:48:29 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=7
2025-05-04 00:48:29 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_7
2025-05-04 00:48:29 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-04 00:48:29 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-04 00:48:29 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 12
2025-05-04 00:48:47 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=7
2025-05-04 00:48:47 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_7
2025-05-04 00:48:47 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-04 00:48:47 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-04 00:48:47 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 13
2025-05-04 00:48:55 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), args=7
2025-05-04 00:48:55 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 7
2025-05-04 00:48:55 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 7
2025-05-04 00:48:55 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-04 00:48:55 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-04 00:48:55 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 14
2025-05-04 00:49:03 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=7
2025-05-04 00:49:03 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 7
2025-05-04 00:49:03 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), exception: Country not found
2025-05-04 00:49:03 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-04 00:49:03 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 15
2025-05-04 00:51:51 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-04 00:51:51 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-04 00:51:51 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-04 00:51:51 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-04 00:51:54 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-04 00:51:54 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 39933 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-04 00:51:54 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-04 00:51:54 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-04 00:51:54 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 28 ms. Found 3 JPA repository interfaces.
2025-05-04 00:51:55 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-04 00:51:55 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-04 00:51:55 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-04 00:51:55 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-04 00:51:55 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-04 00:51:55 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 903 ms
2025-05-04 00:51:55 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-04 00:51:55 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@5d14e99e
2025-05-04 00:51:55 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-04 00:51:55 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-04 00:51:55 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-04 00:51:55 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-04 00:51:55 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-04 00:51:55 | WARN  | org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-05-04 00:51:56 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-04 00:51:56 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-04 00:51:56 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-04 00:51:56 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-04 00:51:57 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-04 00:51:57 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-04 00:51:57 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.668 seconds (process running for 4.049)
2025-05-04 00:51:58 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-04 00:51:58 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-04 00:51:58 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-04 00:51:58 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=7
2025-05-04 00:51:58 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 7
2025-05-04 00:51:58 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), exception: Country not found
2025-05-04 00:51:58 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-04 00:51:58 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-04 00:51:58 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=7
2025-05-04 00:51:58 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 7
2025-05-04 00:51:58 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), exception: Country not found
2025-05-04 00:51:58 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-04 00:51:58 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-04 00:51:59 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=7
2025-05-04 00:51:59 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 7
2025-05-04 00:51:59 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), exception: Country not found
2025-05-04 00:51:59 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-04 00:51:59 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-05-04 00:51:59 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=7
2025-05-04 00:51:59 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 7
2025-05-04 00:51:59 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), exception: Country not found
2025-05-04 00:51:59 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-04 00:51:59 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-05-04 00:52:00 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=7
2025-05-04 00:52:00 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 7
2025-05-04 00:52:00 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), exception: Country not found
2025-05-04 00:52:00 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-04 00:52:00 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-05-04 00:52:00 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=7
2025-05-04 00:52:00 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 7
2025-05-04 00:52:00 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), exception: Country not found
2025-05-04 00:52:00 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-04 00:52:00 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-05-04 00:52:01 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=7
2025-05-04 00:52:01 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 7
2025-05-04 00:52:01 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), exception: Country not found
2025-05-04 00:52:01 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-04 00:52:01 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 7
2025-05-04 00:52:01 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=7
2025-05-04 00:52:01 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 7
2025-05-04 00:52:01 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), exception: Country not found
2025-05-04 00:52:01 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-04 00:52:01 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 8
2025-05-04 00:52:02 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=7
2025-05-04 00:52:02 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 7
2025-05-04 00:52:02 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), exception: Country not found
2025-05-04 00:52:02 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-04 00:52:02 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 9
2025-05-04 00:53:06 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-04 00:53:06 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-04 00:53:06 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-04 00:53:06 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-04 00:53:09 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-04 00:53:09 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 39965 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-04 00:53:09 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-04 00:53:09 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-04 00:53:09 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 22 ms. Found 3 JPA repository interfaces.
2025-05-04 00:53:09 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-04 00:53:09 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-04 00:53:09 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-04 00:53:09 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-04 00:53:09 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-04 00:53:09 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 794 ms
2025-05-04 00:53:09 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-04 00:53:09 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@40a1b6d4
2025-05-04 00:53:09 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-04 00:53:10 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-04 00:53:10 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-04 00:53:10 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-04 00:53:10 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-04 00:53:10 | WARN  | org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-05-04 00:53:10 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-04 00:53:10 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-04 00:53:10 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-04 00:53:10 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-04 00:53:12 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-04 00:53:12 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-04 00:53:12 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.292 seconds (process running for 3.684)
2025-05-04 00:53:22 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-04 00:53:22 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-04 00:53:22 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-04 00:53:22 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-04 00:53:22 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 00:53:22 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 00:53:22 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 00:53:22 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-04 00:53:26 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country)), args=Country(id=null, name=Germany, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cities=[], nations=null)
2025-05-04 00:53:26 | INFO  | org.example.service.CountryService - ✨ Created country: Germany (ID: 8)
2025-05-04 00:53:26 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-04 00:53:26 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-04 00:53:26 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-04 00:53:32 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.NationController.getNationsByCountryId(Long)), args=1
2025-05-04 00:53:32 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.NationController.getNationsByCountryId(Long)), exception: country, which id 1 doesn't exist, that's why you can't view nations from its
2025-05-04 00:53:32 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.NationController.getNationsByCountryId(Long))
2025-05-04 00:53:32 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-05-04 00:54:43 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-04 00:54:43 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-04 00:54:43 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-04 00:54:43 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-04 00:54:45 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-04 00:54:45 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 40010 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-04 00:54:45 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-04 00:54:45 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-04 00:54:45 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 22 ms. Found 3 JPA repository interfaces.
2025-05-04 00:54:46 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-04 00:54:46 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-04 00:54:46 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-04 00:54:46 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-04 00:54:46 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-04 00:54:46 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 852 ms
2025-05-04 00:54:46 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-04 00:54:46 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@66756662
2025-05-04 00:54:46 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-04 00:54:46 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-04 00:54:46 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-04 00:54:46 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-04 00:54:46 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-04 00:54:46 | WARN  | org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-05-04 00:54:47 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-04 00:54:47 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-04 00:54:47 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-04 00:54:47 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-04 00:54:48 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-04 00:54:48 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-04 00:54:48 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.562 seconds (process running for 3.946)
2025-05-04 00:54:49 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-04 00:54:49 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-04 00:54:49 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-04 00:54:49 | WARN  | o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Failure in @ExceptionHandler org.example.exception.ExceptionManager#objectNotFoundException(ObjectNotFoundException, WebRequest)
java.lang.IllegalStateException: Could not resolve parameter [0] in public org.springframework.http.ResponseEntity<org.example.exception.ErrorMessage> org.example.exception.ExceptionManager.objectNotFoundException(org.example.exception.ObjectNotFoundException,org.springframework.web.context.request.WebRequest): No suitable resolver
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:222)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:178)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:432)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:74)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:175)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:80)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1357)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1160)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-05-04 00:54:50 | WARN  | o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Failure in @ExceptionHandler org.example.exception.ExceptionManager#objectNotFoundException(ObjectNotFoundException, WebRequest)
java.lang.IllegalStateException: Could not resolve parameter [0] in public org.springframework.http.ResponseEntity<org.example.exception.ErrorMessage> org.example.exception.ExceptionManager.objectNotFoundException(org.example.exception.ObjectNotFoundException,org.springframework.web.context.request.WebRequest): No suitable resolver
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:222)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:178)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:432)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:74)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:175)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:80)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1357)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1160)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:1575)
2025-05-04 00:54:55 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.NationController.getNationsByCountryId(Long)), args=1
2025-05-04 00:54:55 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.NationController.getNationsByCountryId(Long)), exception: country, which id 1 doesn't exist, that's why you can't view nations from its
2025-05-04 00:54:55 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.NationController.getNationsByCountryId(Long))
2025-05-04 00:54:55 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-04 00:55:11 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-04 00:55:11 | INFO  | org.example.service.CountryService - 🔄 Fetched 1 countries from DB and cached
2025-05-04 00:55:11 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 00:55:11 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 00:55:11 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-04 00:55:24 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=8
2025-05-04 00:55:24 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_8
2025-05-04 00:55:24 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-04 00:55:24 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-04 00:55:24 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-05-04 00:55:48 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=8
2025-05-04 00:55:48 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_8
2025-05-04 00:55:48 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-04 00:55:48 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-04 00:55:48 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-05-04 00:56:03 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.updateCountry(Long,String,String,Double,Double,Double)), args=8,United States,Berlin,3.31002651E8,9833517.0,21.45
2025-05-04 00:56:03 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_8
2025-05-04 00:56:03 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 8
2025-05-04 00:56:03 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.updateCountry(Long,String,String,Double,Double,Double))
2025-05-04 00:56:03 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.updateCountry(Long,String,String,Double,Double,Double))
2025-05-04 00:56:03 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-05-04 00:56:09 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=8
2025-05-04 00:56:09 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_8
2025-05-04 00:56:09 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-04 00:56:09 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-04 00:56:09 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-05-04 00:56:22 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-04 00:56:22 | INFO  | org.example.service.CountryService - 🔄 Fetched 1 countries from DB and cached
2025-05-04 00:56:22 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 00:56:22 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 00:56:22 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 7
2025-05-04 01:32:35 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 01:32:35 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-05-04 01:32:35 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-05-04 01:32:35 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 01:32:35 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 01:32:35 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 01:32:35 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 01:32:35 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 01:32:35 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 01:32:35 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 01:32:35 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 01:32:35 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 01:32:35 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 01:32:35 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 01:32:35 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 01:32:35 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 01:32:35 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 01:32:35 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 01:32:35 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 01:32:35 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 01:32:35 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 01:32:35 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 01:32:35 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 01:32:35 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 01:32:35 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-05-04 01:32:35 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 01:32:35 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 01:32:35 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-05-04 01:32:35 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 01:32:35 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 01:32:35 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 01:32:35 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 01:32:35 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 01:32:35 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 01:32:35 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 01:32:35 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 01:32:35 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 01:32:35 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 01:32:35 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 01:32:35 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 01:32:35 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 01:32:35 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-05-04 01:32:35 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 01:32:35 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 01:32:35 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-05-04 01:32:35 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 01:32:35 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 01:32:35 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 01:32:35 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 01:32:35 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-05-04 01:32:35 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 01:32:35 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 01:32:35 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 01:32:35 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 01:33:04 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 01:33:04 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-05-04 01:33:04 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-05-04 01:33:04 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 01:33:04 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 01:33:04 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 01:33:04 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 01:33:04 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 01:33:04 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 01:33:04 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 01:33:04 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 01:33:04 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 01:33:04 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 01:33:04 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 01:33:04 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 01:33:04 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 01:33:04 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 01:33:04 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 01:33:04 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 01:33:04 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 01:33:04 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 01:33:04 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 01:33:04 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 01:33:04 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 01:33:04 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-05-04 01:33:04 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 01:33:04 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 01:33:04 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-05-04 01:33:04 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 01:33:04 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 01:33:04 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 01:33:04 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 01:33:04 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 01:33:04 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 01:33:04 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 01:33:04 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 01:33:04 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 01:33:04 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 01:33:04 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 01:33:04 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 01:33:04 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 01:33:04 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-05-04 01:33:04 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 01:33:04 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 01:33:04 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-05-04 01:33:04 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 01:33:04 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 01:33:04 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 01:33:04 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 01:33:04 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-05-04 01:33:04 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 01:33:04 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 01:33:04 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 01:33:04 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 01:34:35 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 01:34:35 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 01:34:35 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 01:34:35 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 01:34:47 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 01:34:47 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 01:34:47 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 01:34:47 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 01:34:57 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 01:34:57 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 01:34:57 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 01:34:57 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 01:35:05 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 01:35:05 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-05-04 01:35:05 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-05-04 01:35:05 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 01:35:05 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 01:35:05 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 01:35:05 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 01:35:05 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 01:35:05 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 01:35:05 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 01:35:05 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 01:35:05 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 01:35:05 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 01:35:05 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 01:35:05 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 01:35:05 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 01:35:05 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 01:35:05 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 01:35:05 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 01:35:05 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 01:35:05 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 01:35:05 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 01:35:05 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 01:35:05 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 01:35:05 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-05-04 01:35:05 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 01:35:05 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 01:35:05 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-05-04 01:35:05 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 01:35:05 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 01:35:05 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 01:35:05 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 01:35:05 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 01:35:05 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 01:35:05 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 01:35:05 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 01:35:05 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 01:35:05 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 01:35:05 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 01:35:05 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 01:35:05 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 01:35:05 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-05-04 01:35:05 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 01:35:05 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 01:35:05 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-05-04 01:35:05 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 01:35:05 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 01:35:05 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 01:35:05 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 01:35:05 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-05-04 01:35:05 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 01:35:05 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 01:35:05 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 01:35:05 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 01:45:29 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-04 01:45:29 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-04 01:45:29 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-04 01:45:29 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-04 01:45:32 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-04 01:45:32 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 41443 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-04 01:45:32 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-04 01:45:32 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-04 01:45:32 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 25 ms. Found 3 JPA repository interfaces.
2025-05-04 01:45:32 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-04 01:45:32 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-04 01:45:32 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-04 01:45:32 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-04 01:45:33 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-04 01:45:33 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 784 ms
2025-05-04 01:45:33 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-04 01:45:33 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@5d14e99e
2025-05-04 01:45:33 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-04 01:45:33 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-04 01:45:33 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-04 01:45:33 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-04 01:45:33 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-04 01:45:33 | WARN  | org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-05-04 01:45:33 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-04 01:45:33 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-04 01:45:33 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-04 01:45:34 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-04 01:45:35 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-04 01:45:35 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-04 01:45:35 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.234 seconds (process running for 3.604)
2025-05-04 01:45:53 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-04 01:45:53 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-04 01:45:53 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-04 01:45:53 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-04 01:45:54 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-04 01:45:54 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 41488 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-04 01:45:54 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-04 01:45:55 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-04 01:45:55 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 24 ms. Found 3 JPA repository interfaces.
2025-05-04 01:45:55 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-04 01:45:55 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-04 01:45:55 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-04 01:45:55 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-04 01:45:55 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-04 01:45:55 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 797 ms
2025-05-04 01:45:55 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-04 01:45:55 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@333398f
2025-05-04 01:45:55 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-04 01:45:55 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-04 01:45:55 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-04 01:45:55 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-04 01:45:56 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-04 01:45:56 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-04 01:45:56 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-04 01:45:56 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-04 01:45:56 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-04 01:45:58 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-04 01:45:58 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-04 01:45:58 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.451 seconds (process running for 3.842)
2025-05-04 01:46:38 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-04 01:46:38 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-04 01:46:38 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-04 01:46:38 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.deleteCity(Long)), args=1
2025-05-04 01:46:38 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.deleteCity(Long))
2025-05-04 01:46:38 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.deleteCity(Long))
2025-05-04 01:46:38 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-04 01:47:08 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.deleteCity(Long)), args=1
2025-05-04 01:47:08 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.deleteCity(Long))
2025-05-04 01:47:08 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.deleteCity(Long))
2025-05-04 01:47:08 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-04 01:47:10 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 01:47:10 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 01:47:10 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 01:47:10 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 01:47:10 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-05-04 01:47:20 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.deleteCity(Long)), args=3
2025-05-04 01:47:20 | INFO  | org.example.service.CityService - Deleted city ID: 3, previously belonged to country ID: null
2025-05-04 01:47:20 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.deleteCity(Long))
2025-05-04 01:47:20 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.deleteCity(Long))
2025-05-04 01:47:20 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-05-04 01:47:29 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 01:47:29 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 01:47:29 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 01:47:29 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 01:47:29 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-05-04 01:47:31 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 01:47:31 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 01:47:31 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 01:47:31 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 01:47:31 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-05-04 01:47:45 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-04 01:47:45 | INFO  | org.example.service.CountryService - 🔄 Fetched 1 countries from DB and cached
2025-05-04 01:47:45 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 01:47:45 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 01:47:45 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 7
2025-05-04 01:47:51 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 01:47:51 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 01:47:51 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 01:47:51 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 01:47:51 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 8
2025-05-04 01:48:13 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List)), args=8,[City(id=null, name=Minsk, population=2000000.0, areaSquareKm=409.5, country=null), City(id=null, name=Grodno, population=370000.0, areaSquareKm=142.1, country=null)]
2025-05-04 01:48:14 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 13) to country 'United States' (ID: 8)
2025-05-04 01:48:14 | INFO  | org.example.service.CityService - Evicted cities cache for country 8
2025-05-04 01:48:14 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'United States' (ID: 8). Action: ADD
2025-05-04 01:48:14 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 14) to country 'United States' (ID: 8)
2025-05-04 01:48:14 | INFO  | org.example.service.CityService - Evicted cities cache for country 8
2025-05-04 01:48:14 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'United States' (ID: 8). Action: ADD
2025-05-04 01:48:14 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-04 01:48:14 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-04 01:48:14 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 9
2025-05-04 01:48:17 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 01:48:17 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 01:48:17 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 01:48:17 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 01:48:17 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 10
2025-05-04 01:48:29 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.deleteCity(Long)), args=13
2025-05-04 01:48:29 | INFO  | org.example.service.CityService - Deleted city ID: 13, previously belonged to country ID: 8
2025-05-04 01:48:29 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.deleteCity(Long))
2025-05-04 01:48:29 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.deleteCity(Long))
2025-05-04 01:48:29 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 11
2025-05-04 01:48:43 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=8
2025-05-04 01:48:43 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 01:48:43 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 01:48:43 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 12
2025-05-04 01:48:46 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=8
2025-05-04 01:48:46 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 01:48:46 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 01:48:46 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 13
2025-05-04 01:48:50 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 01:48:50 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 01:48:50 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 01:48:50 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 01:48:50 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 14
2025-05-04 01:48:55 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 01:48:55 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 01:48:55 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 01:48:55 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 01:48:55 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 15
2025-05-04 01:49:24 | INFO  | o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 212 ms
2025-05-04 01:49:54 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 01:49:54 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 01:49:54 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 01:49:54 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 01:49:54 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 16
2025-05-04 01:50:09 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.updateCountry(Long,String,String,Double,Double,Double)), args=8,United State,Berlin,3.31002651E8,9833517.0,21.45
2025-05-04 01:50:09 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_8
2025-05-04 01:50:09 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 8
2025-05-04 01:50:09 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.updateCountry(Long,String,String,Double,Double,Double))
2025-05-04 01:50:09 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.updateCountry(Long,String,String,Double,Double,Double))
2025-05-04 01:50:09 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 17
2025-05-04 01:50:19 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=8
2025-05-04 01:50:19 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 01:50:19 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 01:50:19 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 18
2025-05-04 01:50:29 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-04 01:50:29 | INFO  | org.example.service.CountryService - 🔄 Fetched 1 countries from DB and cached
2025-05-04 01:50:29 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 01:50:29 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 01:50:29 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 19
2025-05-04 01:50:35 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=8
2025-05-04 01:50:35 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 01:50:35 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 01:50:35 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 20
2025-05-04 01:50:45 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 01:50:45 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 01:50:45 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 01:50:45 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 01:50:45 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 21
2025-05-04 02:03:34 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-04 02:03:34 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-04 02:03:34 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-04 02:03:34 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-04 02:07:28 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-04 02:07:28 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 42184 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-04 02:07:28 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-04 02:07:28 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-04 02:07:28 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 22 ms. Found 3 JPA repository interfaces.
2025-05-04 02:07:29 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-04 02:07:29 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-04 02:07:29 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-04 02:07:29 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-04 02:07:29 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-04 02:07:29 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 764 ms
2025-05-04 02:07:29 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-04 02:07:29 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@3e03046d
2025-05-04 02:07:29 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-04 02:07:29 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-04 02:07:29 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-04 02:07:29 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-04 02:07:29 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-04 02:07:29 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-04 02:07:30 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-04 02:07:30 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-04 02:07:30 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-04 02:07:31 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-04 02:07:31 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-04 02:07:31 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.295 seconds (process running for 3.697)
2025-05-04 02:07:39 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-04 02:07:39 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-04 02:07:39 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 0 ms
2025-05-04 02:07:39 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.updateCountry(Long,String,String,Double,Double,Double)), args=8,United Stat,Berlin,3.31002651E8,9833517.0,21.45
2025-05-04 02:07:39 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 8
2025-05-04 02:07:39 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 8
2025-05-04 02:07:39 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.updateCountry(Long,String,String,Double,Double,Double))
2025-05-04 02:07:39 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.updateCountry(Long,String,String,Double,Double,Double))
2025-05-04 02:07:39 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-04 02:07:43 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=8
2025-05-04 02:07:43 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 02:07:43 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 02:07:43 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-04 02:07:53 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=8
2025-05-04 02:07:53 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 02:07:53 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 02:07:53 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-05-04 02:07:58 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=8
2025-05-04 02:07:58 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 02:07:58 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 02:07:58 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-05-04 02:08:03 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 02:08:03 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:08:03 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 02:08:03 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 02:08:03 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-05-04 02:08:08 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 02:08:08 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:08:08 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 02:08:08 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 02:08:08 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-05-04 02:10:39 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-04 02:10:39 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-04 02:10:39 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-04 02:10:39 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-04 02:10:41 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-04 02:10:41 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 42270 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-04 02:10:41 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-04 02:10:41 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-04 02:10:41 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 18 ms. Found 3 JPA repository interfaces.
2025-05-04 02:10:42 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-04 02:10:42 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-04 02:10:42 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-04 02:10:42 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-04 02:10:42 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-04 02:10:42 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 711 ms
2025-05-04 02:10:42 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-04 02:10:42 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@25ad25f5
2025-05-04 02:10:42 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-04 02:10:42 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-04 02:10:42 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-04 02:10:42 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-04 02:10:42 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-04 02:10:43 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-04 02:10:43 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-04 02:10:43 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-04 02:10:43 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-04 02:10:44 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-04 02:10:44 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-04 02:10:44 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.093 seconds (process running for 3.45)
2025-05-04 02:10:46 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-04 02:10:46 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-04 02:10:46 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-04 02:10:46 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=8
2025-05-04 02:10:46 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:10:46 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 02:10:46 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 02:10:46 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-04 02:10:53 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=8
2025-05-04 02:10:53 | INFO  | org.example.service.CityService - Getting cities 8 from cache
2025-05-04 02:10:53 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 02:10:53 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 02:10:53 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-04 02:11:48 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-04 02:11:48 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-04 02:11:48 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-04 02:11:48 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-04 02:11:50 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-04 02:11:50 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 42309 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-04 02:11:50 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-04 02:11:50 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-04 02:11:50 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19 ms. Found 3 JPA repository interfaces.
2025-05-04 02:11:51 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-04 02:11:51 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-04 02:11:51 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-04 02:11:51 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-04 02:11:51 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-04 02:11:51 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 713 ms
2025-05-04 02:11:51 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-04 02:11:51 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@40d96578
2025-05-04 02:11:51 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-04 02:11:51 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-04 02:11:51 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-04 02:11:51 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-04 02:11:51 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-04 02:11:51 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-04 02:11:51 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-04 02:11:52 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-04 02:11:52 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-04 02:11:53 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-04 02:11:53 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-04 02:11:53 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.007 seconds (process running for 3.333)
2025-05-04 02:11:55 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-04 02:11:55 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-04 02:11:55 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-04 02:11:55 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=8
2025-05-04 02:11:55 | INFO  | org.example.service.CityService - Cities with countryId_8 loaded from database and cached
2025-05-04 02:11:55 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 02:11:55 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 02:11:55 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-04 02:11:58 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=8
2025-05-04 02:11:58 | INFO  | org.example.service.CityService - Getting cities with countryId_8 from cache
2025-05-04 02:11:58 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 02:11:58 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 02:11:58 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-04 02:12:36 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-04 02:12:36 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-04 02:12:36 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-04 02:12:36 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-04 02:12:38 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-04 02:12:38 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 42332 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-04 02:12:38 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-04 02:12:39 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-04 02:12:39 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 21 ms. Found 3 JPA repository interfaces.
2025-05-04 02:12:39 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-04 02:12:39 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-04 02:12:39 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-04 02:12:39 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-04 02:12:39 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-04 02:12:39 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 738 ms
2025-05-04 02:12:39 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-04 02:12:39 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@5c1b89ac
2025-05-04 02:12:39 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-04 02:12:39 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-04 02:12:39 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-04 02:12:39 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-04 02:12:39 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-04 02:12:40 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-04 02:12:40 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-04 02:12:40 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-04 02:12:40 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-04 02:12:41 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-04 02:12:41 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-04 02:12:41 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.211 seconds (process running for 3.573)
2025-05-04 02:12:42 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-04 02:12:42 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-04 02:12:42 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-04 02:12:42 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=8
2025-05-04 02:12:42 | INFO  | org.example.service.CityService - Cities with countryId_8 loaded from database and cached
2025-05-04 02:12:42 | INFO  | org.example.service.CityService - [CityDto(id=14, name=Grodno, population=370000.0, areaSquareKm=142.1, country=CountryDto(id=8, name=United Stat, capital=Berlin, population=3.31002651E8, areaSquareKm=9833517.0, gdp=21.45, cityIds=null))]
2025-05-04 02:12:42 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 02:12:42 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 02:12:42 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-04 02:13:21 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-04 02:13:21 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-04 02:13:21 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-04 02:13:21 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-04 02:13:23 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-04 02:13:23 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 42357 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-04 02:13:23 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-04 02:13:24 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-04 02:13:24 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 18 ms. Found 3 JPA repository interfaces.
2025-05-04 02:13:24 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-04 02:13:24 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-04 02:13:24 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-04 02:13:24 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-04 02:13:24 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-04 02:13:24 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 692 ms
2025-05-04 02:13:24 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-04 02:13:24 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@45d4421d
2025-05-04 02:13:24 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-04 02:13:24 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-04 02:13:24 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-04 02:13:24 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-04 02:13:24 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-04 02:13:25 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-04 02:13:25 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-04 02:13:25 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-04 02:13:25 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-04 02:13:26 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-04 02:13:26 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-04 02:13:26 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.061 seconds (process running for 3.385)
2025-05-04 02:13:27 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-04 02:13:27 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-04 02:13:27 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-04 02:13:27 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=8
2025-05-04 02:13:27 | INFO  | org.example.service.CityService - Cities with countryId_8 loaded from database and cached
2025-05-04 02:13:27 | INFO  | org.example.service.CityService - [CityDto(id=14, name=Grodno, population=370000.0, areaSquareKm=142.1, country=CountryDto(id=8, name=United Stat, capital=Berlin, population=3.31002651E8, areaSquareKm=9833517.0, gdp=21.45, cityIds=null))]
2025-05-04 02:13:27 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 02:13:27 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 02:13:27 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-04 02:13:30 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=8
2025-05-04 02:13:30 | INFO  | org.example.service.CityService - Getting cities with countryId_8 from cache
2025-05-04 02:13:30 | INFO  | org.example.service.CityService - [CityDto(id=14, name=Grodno, population=370000.0, areaSquareKm=142.1, country=CountryDto(id=8, name=United Stat, capital=Berlin, population=3.31002651E8, areaSquareKm=9833517.0, gdp=21.45, cityIds=null))]
2025-05-04 02:13:30 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 02:13:30 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 02:13:30 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-04 02:13:51 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.updateCountry(Long,String,String,Double,Double,Double)), args=8,United States,Berlin,3.31002651E8,9833517.0,21.45
2025-05-04 02:13:51 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 8
2025-05-04 02:13:51 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 8
2025-05-04 02:13:51 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.updateCountry(Long,String,String,Double,Double,Double))
2025-05-04 02:13:51 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.updateCountry(Long,String,String,Double,Double,Double))
2025-05-04 02:13:51 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-05-04 02:13:58 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=8
2025-05-04 02:13:58 | INFO  | org.example.service.CityService - Cities with countryId_8 loaded from database and cached
2025-05-04 02:13:58 | INFO  | org.example.service.CityService - [CityDto(id=14, name=Grodno, population=370000.0, areaSquareKm=142.1, country=CountryDto(id=8, name=United States, capital=Berlin, population=3.31002651E8, areaSquareKm=9833517.0, gdp=21.45, cityIds=null))]
2025-05-04 02:13:58 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 02:13:58 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 02:13:58 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-05-04 02:14:04 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=8
2025-05-04 02:14:04 | INFO  | org.example.service.CityService - Getting cities with countryId_8 from cache
2025-05-04 02:14:04 | INFO  | org.example.service.CityService - [CityDto(id=14, name=Grodno, population=370000.0, areaSquareKm=142.1, country=CountryDto(id=8, name=United States, capital=Berlin, population=3.31002651E8, areaSquareKm=9833517.0, gdp=21.45, cityIds=null))]
2025-05-04 02:14:04 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 02:14:04 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 02:14:04 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-05-04 02:14:26 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.deleteCity(Long)), args=14
2025-05-04 02:14:26 | INFO  | org.example.service.CityService - Deleted city ID: 14, previously belonged to country ID: 8
2025-05-04 02:14:26 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.deleteCity(Long))
2025-05-04 02:14:26 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.deleteCity(Long))
2025-05-04 02:14:26 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-05-04 02:14:32 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=8
2025-05-04 02:14:32 | INFO  | org.example.service.CityService - Cities with countryId_8 loaded from database and cached
2025-05-04 02:14:32 | INFO  | org.example.service.CityService - []
2025-05-04 02:14:32 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 02:14:32 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 02:14:32 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 7
2025-05-04 02:14:37 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=8
2025-05-04 02:14:37 | INFO  | org.example.service.CityService - Getting cities with countryId_8 from cache
2025-05-04 02:14:37 | INFO  | org.example.service.CityService - []
2025-05-04 02:14:37 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 02:14:37 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 02:14:37 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 8
2025-05-04 02:15:59 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:15:59 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-05-04 02:15:59 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-05-04 02:15:59 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 02:15:59 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 02:15:59 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 02:15:59 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 02:15:59 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 02:15:59 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 02:15:59 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:15:59 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 02:15:59 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 02:15:59 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 02:15:59 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 02:15:59 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:15:59 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 02:15:59 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 02:15:59 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 02:15:59 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 02:15:59 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 02:15:59 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 02:15:59 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:15:59 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:15:59 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:15:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:15:59 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-05-04 02:15:59 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:15:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:15:59 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 02:15:59 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:15:59 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 02:15:59 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 02:15:59 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:15:59 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 02:15:59 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 02:15:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:15:59 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 02:15:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:15:59 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:15:59 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:15:59 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:15:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:15:59 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-05-04 02:15:59 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:15:59 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 02:15:59 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:15:59 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:15:59 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:15:59 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:15:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:15:59 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 02:15:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:16:11 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:16:11 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-05-04 02:16:11 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-05-04 02:16:11 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 02:16:11 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 02:16:11 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 02:16:11 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 02:16:11 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 02:16:11 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 02:16:11 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:16:11 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 02:16:11 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 02:16:11 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 02:16:11 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 02:16:11 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:16:11 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 02:16:11 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 02:16:11 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 02:16:11 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 02:16:11 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 02:16:11 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 02:16:11 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:16:11 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:16:11 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:16:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:16:11 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-05-04 02:16:11 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:16:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:16:11 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 02:16:11 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:16:11 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 02:16:11 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 02:16:11 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:16:11 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 02:16:11 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 02:16:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:16:11 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 02:16:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:16:11 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:16:11 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:16:11 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:16:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:16:11 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-05-04 02:16:11 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:16:11 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 02:16:11 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:16:11 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:16:11 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:16:11 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:16:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:16:11 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 02:16:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:17:52 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:17:52 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-05-04 02:17:52 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-05-04 02:17:52 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 02:17:52 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 02:17:52 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 02:17:52 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 02:17:52 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 02:17:52 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 02:17:52 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:17:52 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 02:17:52 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 02:17:52 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 02:17:52 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 02:17:52 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:17:52 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 02:17:52 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 02:17:52 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 02:17:52 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 02:17:52 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 02:17:52 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 02:17:52 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:17:52 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:17:52 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:17:52 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:17:52 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-05-04 02:17:52 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:17:52 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:17:52 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 02:17:52 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:17:52 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 02:17:52 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 02:17:52 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:17:52 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 02:17:52 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 02:17:52 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:17:52 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 02:17:52 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:17:52 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:17:52 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:17:52 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:17:52 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:17:52 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-05-04 02:17:52 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:17:52 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 02:17:52 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:17:52 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:17:52 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:17:52 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:17:52 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:17:52 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 02:17:52 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:20:05 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-04 02:20:05 | INFO  | org.example.service.CountryService - 🔄 Fetched 1 countries from DB and cached
2025-05-04 02:20:05 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 02:20:05 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 02:20:05 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 9
2025-05-04 02:25:03 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:25:03 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:25:03 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:25:03 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:25:14 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:25:14 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:25:14 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:25:14 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:29:22 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:29:31 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:29:31 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 02:29:31 | INFO  | org.example.service.CountryService - ✨ Created country: Test (ID: null)
2025-05-04 02:29:31 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 02:29:31 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:29:31 | INFO  | org.example.service.CityService - ➕ Added city 'Test' (ID: null) to country 'null' (ID: 1)
2025-05-04 02:29:31 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:29:31 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:29:31 | INFO  | org.example.service.CityService - ✏️ Updated city 'Old' (ID: 1). New name: 'New', population: 1000.0, area: 50.0 km²
2025-05-04 02:29:31 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:29:31 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 02:29:31 | INFO  | org.example.service.CityService - []
2025-05-04 02:29:31 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:29:31 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:29:31 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'null' (ID: 1)
2025-05-04 02:29:31 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:29:31 | INFO  | org.example.service.CityService - ✅ City 'null' (ID: 1) deleted and cache invalidated
2025-05-04 02:31:57 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 02:31:57 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 02:31:57 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:31:57 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 02:31:57 | INFO  | org.example.service.CountryService - ✨ Created country: Test (ID: null)
2025-05-04 02:31:57 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 02:31:57 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:31:57 | INFO  | org.example.service.CityService - ➕ Added city 'Test' (ID: null) to country 'null' (ID: 1)
2025-05-04 02:31:57 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:31:57 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:31:57 | INFO  | org.example.service.CityService - ✏️ Updated city 'Old' (ID: 1). New name: 'New', population: 1000.0, area: 50.0 km²
2025-05-04 02:31:57 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:31:57 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 02:31:57 | INFO  | org.example.service.CityService - []
2025-05-04 02:31:57 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:31:57 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:31:57 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'null' (ID: 1)
2025-05-04 02:31:57 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:31:57 | INFO  | org.example.service.CityService - ✅ City 'null' (ID: 1) deleted and cache invalidated
2025-05-04 02:34:14 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 02:34:14 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 02:34:14 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:34:14 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 02:34:14 | INFO  | org.example.service.CountryService - ✨ Created country: Test (ID: 1)
2025-05-04 02:34:14 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 02:34:15 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:34:15 | INFO  | org.example.service.CityService - ➕ Added city 'Test' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:34:15 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:34:15 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:34:15 | INFO  | org.example.service.CityService - ✏️ Updated city 'Old' (ID: 1). New name: 'New', population: 1000.0, area: 50.0 km²
2025-05-04 02:34:15 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:34:15 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 02:34:15 | INFO  | org.example.service.CityService - []
2025-05-04 02:34:15 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:34:15 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:34:15 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'null' (ID: 1)
2025-05-04 02:34:15 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:34:15 | INFO  | org.example.service.CityService - ✅ City 'null' (ID: 1) deleted and cache invalidated
2025-05-04 02:34:55 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:34:55 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-05-04 02:34:55 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-05-04 02:34:55 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 02:34:55 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 02:34:55 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 02:34:55 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 02:34:55 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 02:34:55 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 02:34:55 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:34:55 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 02:34:55 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 02:34:55 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 02:34:55 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 02:34:56 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:34:56 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 02:34:56 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 02:34:56 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 02:34:56 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 02:34:56 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 02:34:56 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 02:34:56 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:34:56 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:34:56 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:34:56 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:34:56 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-05-04 02:34:56 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:34:56 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:34:56 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 02:34:56 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:34:56 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 02:34:56 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 02:34:56 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:34:56 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 02:34:56 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 02:34:56 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:34:56 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 02:34:56 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:34:56 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:34:56 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:34:56 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:34:56 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:34:56 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-05-04 02:34:56 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:34:56 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 02:34:56 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:34:56 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:34:56 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:34:56 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:34:56 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:34:56 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 02:34:56 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:35:03 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:35:03 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-05-04 02:35:03 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-05-04 02:35:03 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 02:35:03 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 02:35:03 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 02:35:03 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 02:35:03 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 02:35:03 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 02:35:03 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:35:03 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 02:35:03 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 02:35:03 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 02:35:03 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 02:35:03 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:35:03 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 02:35:03 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 02:35:03 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 02:35:03 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 02:35:03 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 02:35:03 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 02:35:03 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:35:03 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:35:03 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:35:03 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:35:03 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-05-04 02:35:03 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:35:03 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:35:03 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 02:35:03 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:35:03 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 02:35:03 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 02:35:03 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:35:03 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 02:35:03 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 02:35:03 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:35:03 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 02:35:03 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:35:03 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:35:03 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:35:03 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:35:03 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:35:03 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-05-04 02:35:03 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:35:03 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 02:35:03 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:35:03 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:35:03 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:35:03 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:35:03 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:35:03 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 02:35:03 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:35:50 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 02:35:50 | INFO  | org.example.service.CountryService - ✨ Created country: New Country (ID: 2)
2025-05-04 02:35:50 | INFO  | org.example.service.CityService - ➕ Added city 'New City' (ID: 2) to country 'Test Country' (ID: 1)
2025-05-04 02:35:50 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:35:50 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Test Country' (ID: 1). Action: ADD
2025-05-04 02:35:50 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:35:50 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:38:08 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:38:08 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-05-04 02:38:08 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-05-04 02:38:08 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 02:38:08 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 02:38:08 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 02:38:08 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 02:38:08 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 02:38:08 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 02:38:08 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:38:08 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 02:38:08 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 02:38:08 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 02:38:08 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 02:38:08 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:38:08 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 02:38:08 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 02:38:08 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 02:38:08 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 02:38:08 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 02:38:08 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 02:38:08 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:38:08 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:38:08 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:38:08 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:38:08 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-05-04 02:38:08 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:38:08 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:38:08 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 02:38:08 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:38:08 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 02:38:08 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 02:38:08 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:38:08 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 02:38:08 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 02:38:08 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:38:08 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 02:38:08 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:38:08 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:38:08 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:38:08 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:38:08 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:38:08 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-05-04 02:38:08 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:38:08 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 02:38:08 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:38:08 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:38:08 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:38:08 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:38:08 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:38:08 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 02:38:08 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:43:02 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:43:02 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-05-04 02:43:02 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-05-04 02:43:02 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 02:43:02 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 02:43:02 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 02:43:02 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 02:43:02 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 02:43:02 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 02:43:02 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:43:02 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 02:43:02 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 02:43:02 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 02:43:02 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 02:43:02 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:43:02 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 02:43:02 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 02:43:02 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 02:43:02 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 02:43:02 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 02:43:02 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 02:43:02 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:43:02 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:43:02 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:43:02 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:43:02 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-05-04 02:43:02 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:43:02 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:43:02 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 02:43:02 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:43:02 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 02:43:02 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 02:43:02 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:43:02 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 02:43:02 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 02:43:02 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:43:02 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 02:43:02 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:43:02 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:43:02 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:43:02 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:43:02 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:43:02 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-05-04 02:43:02 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:43:02 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 02:43:02 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:43:02 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:43:02 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:43:02 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:43:02 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:43:02 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 02:43:02 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:46:55 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:46:55 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 1)
2025-05-04 02:46:55 | INFO  | org.example.service.CountryService - ✨ Created country: null (ID: 2)
2025-05-04 02:46:55 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 02:46:55 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 02:46:55 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 02:46:55 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 02:46:55 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 02:46:55 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 02:46:55 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:46:55 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 02:46:55 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 02:46:55 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 02:46:55 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 02:46:55 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:46:55 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 02:46:55 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 02:46:55 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 02:46:55 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 02:46:55 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 02:46:55 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 02:46:55 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:46:55 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: null) to country 'null' (ID: 1)
2025-05-04 02:46:55 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:46:55 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:46:55 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:46:55 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:46:55 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:46:55 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-05-04 02:46:55 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:46:55 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:46:55 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 02:46:55 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:46:55 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 02:46:55 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'null', population: null, area: null km²
2025-05-04 02:46:55 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:46:55 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 02:46:55 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:46:55 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 02:46:55 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 02:46:55 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:46:55 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 02:46:55 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:46:55 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 02:46:55 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:46:55 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:46:55 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:46:55 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:46:55 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-05-04 02:46:55 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:46:55 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 02:46:55 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:46:55 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:46:55 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:46:55 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:46:55 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:46:55 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:46:55 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 02:46:55 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:48:50 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:48:50 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 02:48:50 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 02:48:50 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 02:48:50 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 02:48:50 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 02:48:50 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 02:48:50 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 02:48:50 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 02:48:50 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 02:48:50 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:48:50 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 02:48:50 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 02:48:50 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 02:48:50 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 02:48:50 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:48:50 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 02:48:50 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 02:48:50 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 02:48:50 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 02:48:50 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 02:48:50 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 02:48:50 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 02:48:50 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'null', population: null, area: null km²
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - []
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - []
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - []
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 02:48:50 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:49:09 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:49:09 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 02:49:09 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 02:49:09 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 02:49:09 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 02:49:09 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 02:49:09 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 02:49:09 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 02:49:09 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 02:49:09 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 02:49:09 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:49:09 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 02:49:09 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 02:49:09 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 02:49:09 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 02:49:09 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:49:09 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 02:49:09 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 02:49:09 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 02:49:09 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 02:49:09 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 02:49:09 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 02:49:09 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 02:49:09 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'null', population: null, area: null km²
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - []
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - []
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - []
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 02:49:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'null', population: null, area: null km²
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - []
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - []
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - []
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - [java.lang.Object@1823b9c4]
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'null', population: null, area: null km²
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - []
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - []
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - []
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - []
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 02:53:23 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:54:25 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:54:25 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 02:54:25 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 02:54:25 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 02:54:25 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 02:54:25 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 02:54:25 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 02:54:25 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 02:54:25 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 02:54:25 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 02:54:25 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:54:25 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 02:54:25 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 02:54:25 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 02:54:25 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 02:54:25 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:54:25 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 02:54:25 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 02:54:25 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 02:54:25 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 02:54:25 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 02:54:25 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 02:54:25 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 02:54:25 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - [java.lang.Object@73c3cd09]
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'null', population: null, area: null km²
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - []
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - []
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - []
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - []
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 02:54:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:59:01 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:59:01 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 02:59:01 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 02:59:01 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 02:59:01 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 02:59:01 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 02:59:01 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 02:59:01 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 02:59:01 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 02:59:01 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 02:59:01 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:59:01 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 02:59:01 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 02:59:01 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 02:59:01 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 02:59:01 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:59:01 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 02:59:01 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 02:59:01 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 02:59:01 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 02:59:01 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 02:59:01 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 02:59:01 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 02:59:01 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - [java.lang.Object@e784320]
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'null', population: null, area: null km²
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - ➕ Added city '' (ID: null) to country 'null' (ID: 1)
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - []
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - []
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - [CityDto(id=1, name=Minsk, population=1000000.0, areaSquareKm=500.0, country=null)]
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - []
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 1.7976931348623157E308 km²
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - []
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - []
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', population: 1000000.0, area: 500.0 km²
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:59:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:59:19 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:59:19 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 02:59:19 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 02:59:19 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 02:59:19 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 02:59:19 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 02:59:19 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 02:59:19 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 02:59:19 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 02:59:19 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 02:59:19 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:59:19 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 02:59:19 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 02:59:19 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 02:59:19 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 02:59:19 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 02:59:19 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 02:59:19 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 02:59:19 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 02:59:19 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 02:59:19 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 02:59:19 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 02:59:19 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 02:59:19 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - [java.lang.Object@9e54c59]
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'null', population: null, area: null km²
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - []
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - []
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - []
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - []
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 02:59:19 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:03:24 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:03:24 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 03:03:25 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:03:25 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 03:03:25 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 03:03:25 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:03:25 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:03:25 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:03:25 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:03:25 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:03:25 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:03:25 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 03:03:25 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 03:03:25 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 03:03:25 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:03:25 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:03:25 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 03:03:25 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 03:03:25 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:03:25 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 03:03:25 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:03:25 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:03:25 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 03:03:25 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - [java.lang.Object@2c63762b]
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'null', population: null, area: null km²
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - ➕ Added city '' (ID: null) to country 'null' (ID: 1)
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - []
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - []
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - [CityDto(id=1, name=Minsk, population=1000000.0, areaSquareKm=500.0, country=null)]
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - []
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 1.7976931348623157E308 km²
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - []
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - []
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', population: 1000000.0, area: 500.0 km²
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:03:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:04:09 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:04:09 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 03:04:09 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:04:09 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 03:04:09 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 03:04:09 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:04:09 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:04:09 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:04:09 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:04:09 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:04:09 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:04:09 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 03:04:09 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 03:04:09 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 03:04:09 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:04:09 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:04:09 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 03:04:09 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 03:04:09 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:04:09 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 03:04:09 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:04:09 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:04:09 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 03:04:09 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - [java.lang.Object@4a2e7bcb]
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'null', population: null, area: null km²
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - []
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - []
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - []
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - []
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 03:04:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:05:33 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:05:33 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 03:05:33 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:05:33 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 03:05:33 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 03:05:33 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:05:33 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:05:33 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:05:33 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:05:33 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:05:33 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:05:33 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 03:05:33 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 03:05:33 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 03:05:33 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:05:33 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:05:33 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 03:05:33 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 03:05:33 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:05:33 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 03:05:33 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:05:33 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:05:33 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 03:05:33 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - [java.lang.Object@5f631ca0]
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - ✏️ Updated city 'Test City' (ID: 1). New name: 'null', population: null, area: null km²
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Test Country' (ID: 1). Action: UPDATE
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - []
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Test City' (ID: 1)
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - ➕ Added city 'New City 1' (ID: 1) to country 'Test Country' (ID: 1)
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Test Country' (ID: 1). Action: ADD
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - ➕ Added city 'New City 2' (ID: 2) to country 'Test Country' (ID: 1)
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Test Country' (ID: 1). Action: ADD
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Test City' (ID: 1)
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Test City' (ID: 1)
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - ✏️ Updated city 'Test City' (ID: 1). New name: 'Updated City', population: 1000000.0, area: 500.0 km²
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Test Country' (ID: 1). Action: UPDATE
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - [CityDto(id=1, name=Test City, population=null, areaSquareKm=null, country=CountryDto(id=1, name=Test Country, capital=null, population=null, areaSquareKm=null, gdp=null, cityIds=null))]
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - []
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - ✏️ Updated city 'Test City' (ID: 1). New name: 'Updated City', population: -100.0, area: 0.0 km²
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Test Country' (ID: 1). Action: UPDATE
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - ➕ Added city 'New City' (ID: 2) to country 'Test Country' (ID: 1)
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Test Country' (ID: 1). Action: ADD
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - []
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - ➕ Added city 'New City' (ID: 2) to country 'Test Country' (ID: 1)
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Test Country' (ID: 1). Action: ADD
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - ✏️ Updated city 'Test City' (ID: 1). New name: 'Test City', population: 2000000.0, area: 600.0 km²
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Test Country' (ID: 1). Action: UPDATE
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - ✏️ Updated city 'Test City' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 03:05:33 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Test Country' (ID: 1). Action: UPDATE
2025-05-04 03:06:08 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:06:08 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 03:06:08 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:06:08 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 03:06:08 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 03:06:08 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:06:08 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:06:08 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:06:08 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:06:08 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:06:08 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:06:08 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 03:06:08 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 03:06:08 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 03:06:08 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:06:08 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:06:08 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 03:06:08 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 03:06:08 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:06:08 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 03:06:08 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:06:08 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:06:08 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 03:06:08 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - [java.lang.Object@7c1447b5]
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'null', population: null, area: null km²
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - []
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - []
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - []
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - []
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 03:06:08 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:07:33 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:07:33 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 03:07:33 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:07:33 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 03:07:33 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 03:07:33 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:07:33 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:07:33 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 03:07:33 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 03:07:33 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 03:07:33 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:07:33 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 03:07:33 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 03:07:33 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:07:33 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 03:07:33 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 03:07:33 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - [java.lang.Object@53a84ff4]
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'null', population: null, area: null km²
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - []
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - []
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - []
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - []
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 03:07:34 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:08:05 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:08:05 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 03:08:05 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:08:05 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 03:08:05 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 03:08:05 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:08:05 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:08:05 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:08:05 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:08:05 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 03:08:05 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 03:08:05 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 03:08:05 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:08:05 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:08:05 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 03:08:05 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 03:08:05 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:08:05 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 03:08:05 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:08:05 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:08:05 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 03:08:05 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - [java.lang.Object@5b9499fe]
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'null', population: null, area: null km²
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - []
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - []
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - []
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - []
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 03:08:05 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:09:40 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:09:40 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 03:09:40 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:09:40 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 03:09:40 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 03:09:41 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:09:41 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:09:41 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:09:41 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:09:41 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 03:09:41 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 03:09:41 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 03:09:41 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:09:41 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 03:09:41 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 03:09:41 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:09:41 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 03:09:41 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:09:41 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:09:41 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 03:09:41 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - [java.lang.Object@2ee83775]
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'null', population: null, area: null km²
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - []
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - []
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - []
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - []
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 03:09:41 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:09:58 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:09:58 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 03:09:58 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:09:58 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 03:09:58 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 03:09:58 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:09:58 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:09:58 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:09:58 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:09:58 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 03:09:58 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 03:09:58 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 03:09:58 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:09:58 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 03:09:58 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 03:09:58 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:09:58 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 03:09:58 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:09:58 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:09:58 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 03:09:58 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - [java.lang.Object@314b9e4b]
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'null', population: null, area: null km²
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - []
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - []
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - []
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - []
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 03:09:58 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:10:30 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:10:30 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 03:10:30 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:10:30 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 03:10:30 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 03:10:30 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:10:30 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:10:30 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:10:30 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:10:30 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 03:10:30 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 03:10:30 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 03:10:30 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:10:30 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 03:10:30 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 03:10:30 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:10:30 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 03:10:30 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:10:30 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:10:30 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 03:10:30 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - [java.lang.Object@949c598]
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'null', population: null, area: null km²
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - []
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - []
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - []
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - []
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 03:10:30 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:10:48 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:10:48 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 03:10:48 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:10:48 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 03:10:48 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 03:10:48 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:10:48 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:10:48 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:10:48 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:10:48 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 03:10:48 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 03:10:48 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 03:10:48 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:10:48 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 03:10:48 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 03:10:48 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:10:48 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 03:10:48 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:10:48 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:10:48 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 03:10:48 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - [java.lang.Object@58c1da09]
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'null', population: null, area: null km²
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - []
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - []
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - []
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - []
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 03:10:48 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:11:15 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:11:15 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 03:11:15 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:11:15 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 03:11:15 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 03:11:15 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:11:15 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:11:15 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:11:15 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:11:15 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 03:11:15 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 03:11:15 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 03:11:15 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:11:15 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 03:11:15 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 03:11:15 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:11:15 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 03:11:15 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:11:15 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:11:15 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 03:11:15 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - [java.lang.Object@3468ee6e]
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'null', population: null, area: null km²
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - []
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - []
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - []
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - []
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 03:11:16 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:12:26 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:12:26 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 03:12:26 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:12:26 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 03:12:26 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 03:12:26 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:12:26 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:12:26 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:12:26 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:12:26 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 03:12:26 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 03:12:26 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 03:12:26 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:12:26 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 03:12:26 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 03:12:26 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:12:26 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 03:12:26 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:12:26 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:12:26 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 03:12:26 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - [java.lang.Object@3468ee6e]
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'null', population: null, area: null km²
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - []
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - []
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - []
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - []
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 03:12:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:16:02 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:16:02 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 03:16:02 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:16:02 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 03:16:02 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 03:16:02 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:16:02 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:16:02 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:16:02 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:16:02 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 03:16:02 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 03:16:02 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 03:16:02 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:16:02 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 03:16:02 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 03:16:02 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:16:02 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 03:16:02 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:16:02 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:16:02 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 03:16:02 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - [java.lang.Object@5f5effb0]
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'null', population: null, area: null km²
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - []
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - []
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - []
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - []
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 03:16:02 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 03:17:20 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:17:20 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:17:20 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-05-04 03:17:20 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:17:20 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:17:20 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:17:20 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:17:20 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:17:20 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 03:17:20 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:17:20 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:17:20 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:17:20 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:17:20 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:17:20 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:17:20 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:17:20 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:17:20 | INFO  | org.example.service.CityService - [java.lang.Object@6ff6efdc]
2025-05-04 03:17:20 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:17:20 | INFO  | org.example.service.CityService - []
2025-05-04 03:17:20 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:17:20 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:17:20 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 03:17:20 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 03:17:20 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 03:17:20 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'null', population: null, area: null km²
2025-05-04 03:17:20 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 03:18:06 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:18:06 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:18:06 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-05-04 03:18:06 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:18:06 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:18:06 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:18:06 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:18:06 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:18:06 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 03:18:06 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:18:06 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:18:06 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:18:06 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:18:06 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:18:06 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:18:06 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:18:06 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:18:06 | INFO  | org.example.service.CityService - [java.lang.Object@43a0a32d]
2025-05-04 03:18:06 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:18:06 | INFO  | org.example.service.CityService - []
2025-05-04 03:18:06 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:18:06 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:18:06 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 03:18:06 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 03:18:06 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 03:18:06 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'null', population: null, area: null km²
2025-05-04 03:18:06 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 03:18:14 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:18:14 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:18:14 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-05-04 03:18:14 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:18:14 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:18:14 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:18:14 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:18:14 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:18:14 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 03:18:14 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:18:14 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:18:14 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:18:14 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:18:14 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:18:14 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:18:14 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:18:14 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:18:14 | INFO  | org.example.service.CityService - [java.lang.Object@43a0a32d]
2025-05-04 03:18:14 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:18:14 | INFO  | org.example.service.CityService - []
2025-05-04 03:18:14 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:18:14 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:18:14 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 03:18:14 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 03:18:14 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 03:18:14 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'null', population: null, area: null km²
2025-05-04 03:18:14 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 03:18:22 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:18:22 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 03:18:22 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:18:22 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 03:18:22 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 03:18:22 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:18:22 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:18:22 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:18:22 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:18:22 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 03:18:22 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 03:18:22 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 03:18:22 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:18:22 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 03:18:22 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 03:18:22 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:18:22 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 03:18:22 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:18:22 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:18:22 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 03:18:22 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - [java.lang.Object@101a461c]
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'null', population: null, area: null km²
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - []
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 500.0 km²
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - []
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - []
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - []
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 03:18:22 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: ADD
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: DELETE
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: DELETE
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - [java.lang.Object@44a6a68e]
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - []
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'null', population: null, area: null km²
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 500.0 km²
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 03:25:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'null' (ID: 1). Action: UPDATE
2025-05-04 03:27:27 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-04 03:27:27 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-04 03:27:27 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-04 03:27:27 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-04 03:27:28 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-04 03:27:28 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 44658 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-04 03:27:28 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-04 03:27:29 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-04 03:27:29 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 27 ms. Found 3 JPA repository interfaces.
2025-05-04 03:27:29 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-04 03:27:29 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-04 03:27:29 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-04 03:27:29 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-04 03:27:29 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-04 03:27:29 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 829 ms
2025-05-04 03:27:29 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-04 03:27:29 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@175581eb
2025-05-04 03:27:29 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-04 03:27:29 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-04 03:27:29 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-04 03:27:30 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-04 03:27:30 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-04 03:27:30 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-04 03:27:30 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-04 03:27:30 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-04 03:27:30 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-04 03:27:32 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-04 03:27:32 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-04 03:27:32 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.447 seconds (process running for 4.103)
2025-05-04 03:27:37 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-04 03:27:37 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-04 03:27:37 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-04 03:27:37 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-04 03:27:37 | INFO  | org.example.service.CountryService - 🔄 Fetched 1 countries from DB and cached
2025-05-04 03:27:37 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 03:27:37 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 03:27:37 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-04 03:27:41 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 03:27:41 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:27:41 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 03:27:41 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 03:27:41 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-04 03:27:48 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List)), args=8,[City(id=null, name=Minsk, population=2000000.0, areaSquareKm=409.5, country=null), City(id=null, name=Grodno, population=370000.0, areaSquareKm=142.1, country=null)]
2025-05-04 03:27:48 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 15) to country 'United States' (ID: 8)
2025-05-04 03:27:48 | INFO  | org.example.service.CityService - Evicted cities cache for country 8
2025-05-04 03:27:48 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'United States' (ID: 8). Action: ADD
2025-05-04 03:27:48 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 16) to country 'United States' (ID: 8)
2025-05-04 03:27:48 | INFO  | org.example.service.CityService - Evicted cities cache for country 8
2025-05-04 03:27:48 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'United States' (ID: 8). Action: ADD
2025-05-04 03:27:48 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-04 03:27:48 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-04 03:27:48 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-05-04 03:27:50 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 03:27:50 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:27:50 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 03:27:50 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 03:27:50 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-05-04 03:28:03 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.updateCountry(Long,String,String,Double,Double,Double)), args=8,United Stas,Berlin,3.31002651E8,9833517.0,21.45
2025-05-04 03:28:03 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 8
2025-05-04 03:28:03 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 8
2025-05-04 03:28:03 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.updateCountry(Long,String,String,Double,Double,Double))
2025-05-04 03:28:03 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.updateCountry(Long,String,String,Double,Double,Double))
2025-05-04 03:28:03 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-05-04 03:28:07 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=8
2025-05-04 03:28:07 | INFO  | org.example.service.CityService - Cities with countryId_8 loaded from database and cached
2025-05-04 03:28:07 | INFO  | org.example.service.CityService - [CityDto(id=16, name=Grodno, population=370000.0, areaSquareKm=142.1, country=CountryDto(id=8, name=United Stas, capital=Berlin, population=3.31002651E8, areaSquareKm=9833517.0, gdp=21.45, cityIds=null)), CityDto(id=15, name=Minsk, population=2000000.0, areaSquareKm=409.5, country=CountryDto(id=8, name=United Stas, capital=Berlin, population=3.31002651E8, areaSquareKm=9833517.0, gdp=21.45, cityIds=null))]
2025-05-04 03:28:07 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 03:28:07 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 03:28:07 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-05-04 03:28:10 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 03:28:10 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:28:10 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 03:28:10 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 03:28:10 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 7
2025-05-04 03:28:20 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), args=8
2025-05-04 03:28:20 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 8
2025-05-04 03:28:20 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 8
2025-05-04 03:28:20 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-04 03:28:20 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-04 03:28:20 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 8
2025-05-04 03:28:24 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 03:28:24 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:28:24 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 03:28:24 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 03:28:24 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 9
2025-05-04 03:28:29 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=8
2025-05-04 03:28:29 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 03:28:29 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 03:28:29 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 10
2025-05-04 03:30:11 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:30:11 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 03:30:11 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:30:11 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 03:30:11 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 03:30:11 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:30:11 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:30:11 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:30:11 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:30:11 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 03:30:11 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 03:30:11 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 03:30:11 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:30:11 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 03:30:11 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 03:30:11 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:30:11 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 03:30:11 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:30:11 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:30:11 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 03:30:11 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - [java.lang.Object@659feb22]
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'null', population: null, area: null km²
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'unknown' (ID: 1). Action: UPDATE
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - []
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'unknown' (ID: 1). Action: ADD
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'null' (ID: 1)
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'unknown' (ID: 1). Action: ADD
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'unknown' (ID: 1). Action: DELETE
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 500.0 km²
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'unknown' (ID: 1). Action: UPDATE
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'unknown' (ID: 1). Action: DELETE
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'unknown' (ID: 1). Action: UPDATE
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - []
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'unknown' (ID: 1). Action: UPDATE
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'unknown' (ID: 1). Action: ADD
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'null'
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - []
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - []
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - ✅ All cities deleted from country 'null'. Cache invalidated
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'null' (ID: 1)
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'unknown' (ID: 1). Action: ADD
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'unknown' (ID: 1). Action: UPDATE
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 03:30:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'unknown' (ID: 1). Action: UPDATE
2025-05-04 03:31:29 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 03:31:29 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:31:29 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'unknown' (ID: 1). Action: DELETE
2025-05-04 03:31:29 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:31:29 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:31:29 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:31:29 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'unknown' (ID: 1). Action: DELETE
2025-05-04 03:31:29 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:31:29 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:31:29 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:31:29 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:31:29 | INFO  | org.example.service.CityService - [java.lang.Object@1835d3ed]
2025-05-04 03:31:29 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:31:29 | INFO  | org.example.service.CityService - []
2025-05-04 03:31:29 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:31:29 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:31:29 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 03:31:29 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'unknown' (ID: 1). Action: UPDATE
2025-05-04 03:31:29 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 500.0 km²
2025-05-04 03:31:29 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'unknown' (ID: 1). Action: UPDATE
2025-05-04 03:33:10 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'null'
2025-05-04 03:33:10 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:33:10 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'unknown' (ID: 1). Action: DELETE
2025-05-04 03:33:10 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:33:10 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:33:10 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:33:10 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'unknown' (ID: 1). Action: DELETE
2025-05-04 03:33:10 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:33:10 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:33:10 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:33:10 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:33:10 | INFO  | org.example.service.CityService - [java.lang.Object@aa4d8cc]
2025-05-04 03:33:10 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:33:10 | INFO  | org.example.service.CityService - []
2025-05-04 03:33:10 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:33:10 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:33:10 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 03:33:10 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'unknown' (ID: 1). Action: UPDATE
2025-05-04 03:33:10 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 500.0 km²
2025-05-04 03:33:10 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:36:13 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'unknown'
2025-05-04 03:36:13 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:36:13 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'unknown' (ID: 1). Action: DELETE
2025-05-04 03:36:13 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:36:13 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:36:13 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'unknown' (ID: 1). Action: DELETE
2025-05-04 03:36:13 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:36:13 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:36:13 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 03:36:13 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:36:13 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 03:36:13 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:36:13 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:36:13 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:36:13 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:36:13 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:36:13 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 03:36:13 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'unknown' (ID: 1). Action: UPDATE
2025-05-04 03:36:13 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 500.0 km²
2025-05-04 03:36:13 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:37:59 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:37:59 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 03:37:59 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:37:59 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 03:37:59 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 03:37:59 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:37:59 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:37:59 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:37:59 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:37:59 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 03:37:59 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 03:37:59 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 03:37:59 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:37:59 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 03:37:59 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 03:37:59 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:37:59 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 03:37:59 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:37:59 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:37:59 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 03:37:59 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 03:37:59 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:37:59 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 100000.0, area: 500.0 km²
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:37:59 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'Belarus' (ID: 1)
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 500.0 km²
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:37:59 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'Belarus'
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - Converting cached list to set for countryId_1
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 03:37:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:38:33 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country)), args=Country(id=null, name=Germany, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cities=[], nations=null)
2025-05-04 03:38:33 | INFO  | org.example.service.CountryService - ✨ Created country: Germany (ID: 9)
2025-05-04 03:38:33 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-04 03:38:33 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-04 03:38:33 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 11
2025-05-04 03:38:36 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-04 03:38:36 | INFO  | org.example.service.CountryService - 🔄 Fetched 1 countries from DB and cached
2025-05-04 03:38:36 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 03:38:36 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 03:38:36 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 12
2025-05-04 03:38:48 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=9
2025-05-04 03:38:48 | INFO  | org.example.service.CityService - Cities with countryId_9 loaded from database and cached
2025-05-04 03:38:48 | INFO  | org.example.service.CityService - []
2025-05-04 03:38:48 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 03:38:48 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 03:38:48 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 13
2025-05-04 03:38:52 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List)), args=9,[City(id=null, name=Minsk, population=2000000.0, areaSquareKm=409.5, country=null), City(id=null, name=Grodno, population=370000.0, areaSquareKm=142.1, country=null)]
2025-05-04 03:38:52 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 17) to country 'Germany' (ID: 9)
2025-05-04 03:38:52 | INFO  | org.example.service.CityService - Evicted cities cache for country 9
2025-05-04 03:38:52 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 9). Action: ADD
2025-05-04 03:38:52 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 18) to country 'Germany' (ID: 9)
2025-05-04 03:38:52 | INFO  | org.example.service.CityService - Evicted cities cache for country 9
2025-05-04 03:38:52 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 9). Action: ADD
2025-05-04 03:38:52 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-04 03:38:52 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-04 03:38:52 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 14
2025-05-04 03:38:55 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=9
2025-05-04 03:38:55 | INFO  | org.example.service.CityService - Cities with countryId_9 loaded from database and cached
2025-05-04 03:38:55 | INFO  | org.example.service.CityService - [CityDto(id=18, name=Grodno, population=370000.0, areaSquareKm=142.1, country=CountryDto(id=9, name=Germany, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cityIds=null)), CityDto(id=17, name=Minsk, population=2000000.0, areaSquareKm=409.5, country=CountryDto(id=9, name=Germany, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cityIds=null))]
2025-05-04 03:38:55 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 03:38:55 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 03:38:55 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 15
2025-05-04 03:38:56 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=9
2025-05-04 03:38:56 | INFO  | org.example.service.CityService - Getting cities with countryId_9 from cache
2025-05-04 03:38:56 | INFO  | org.example.service.CityService - [CityDto(id=18, name=Grodno, population=370000.0, areaSquareKm=142.1, country=CountryDto(id=9, name=Germany, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cityIds=null)), CityDto(id=17, name=Minsk, population=2000000.0, areaSquareKm=409.5, country=CountryDto(id=9, name=Germany, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cityIds=null))]
2025-05-04 03:38:56 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 03:38:56 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 03:38:56 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 16
2025-05-04 03:38:59 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 03:38:59 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:38:59 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 03:38:59 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 03:38:59 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 17
2025-05-04 03:39:25 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 03:39:25 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:39:25 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 03:39:25 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 03:39:25 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 18
2025-05-04 03:40:16 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.deleteCity(Long)), args=18
2025-05-04 03:40:16 | INFO  | org.example.service.CityService - Deleted city ID: 18, previously belonged to country ID: 9
2025-05-04 03:40:16 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.deleteCity(Long))
2025-05-04 03:40:16 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.deleteCity(Long))
2025-05-04 03:40:16 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 19
2025-05-04 03:40:23 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=9
2025-05-04 03:40:23 | INFO  | org.example.service.CityService - Cities with countryId_9 loaded from database and cached
2025-05-04 03:40:23 | INFO  | org.example.service.CityService - [CityDto(id=17, name=Minsk, population=2000000.0, areaSquareKm=409.5, country=CountryDto(id=9, name=Germany, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cityIds=null))]
2025-05-04 03:40:23 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 03:40:23 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 03:40:23 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 20
2025-05-04 03:40:29 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=9
2025-05-04 03:40:29 | INFO  | org.example.service.CityService - Getting cities with countryId_9 from cache
2025-05-04 03:40:29 | INFO  | org.example.service.CityService - [CityDto(id=17, name=Minsk, population=2000000.0, areaSquareKm=409.5, country=CountryDto(id=9, name=Germany, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cityIds=null))]
2025-05-04 03:40:29 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 03:40:29 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 03:40:29 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 21
2025-05-04 03:40:33 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 03:40:33 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:40:33 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 03:40:33 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 03:40:33 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 22
2025-05-04 03:40:37 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 03:40:37 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:40:37 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 03:40:37 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 03:40:37 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 23
2025-05-04 03:40:47 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.updateCountry(Long,String,String,Double,Double,Double)), args=8,United Stas,Berlin,3.31002651E8,9833517.0,21.45
2025-05-04 03:40:47 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CountryController.updateCountry(Long,String,String,Double,Double,Double)), exception: Country not found
2025-05-04 03:40:47 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.updateCountry(Long,String,String,Double,Double,Double))
2025-05-04 03:40:47 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 24
2025-05-04 03:40:57 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.updateCountry(Long,String,String,Double,Double,Double)), args=9,United Stas,Berlin,3.31002651E8,9833517.0,21.45
2025-05-04 03:40:57 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 9
2025-05-04 03:40:57 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 9
2025-05-04 03:40:57 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.updateCountry(Long,String,String,Double,Double,Double))
2025-05-04 03:40:57 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.updateCountry(Long,String,String,Double,Double,Double))
2025-05-04 03:40:57 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 25
2025-05-04 03:41:02 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 03:41:02 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:41:02 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 03:41:02 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 03:41:02 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 26
2025-05-04 03:41:04 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 03:41:04 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:41:04 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 03:41:04 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 03:41:04 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 27
2025-05-04 03:41:09 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=9
2025-05-04 03:41:09 | INFO  | org.example.service.CityService - Cities with countryId_9 loaded from database and cached
2025-05-04 03:41:09 | INFO  | org.example.service.CityService - [CityDto(id=17, name=Minsk, population=2000000.0, areaSquareKm=409.5, country=CountryDto(id=9, name=United Stas, capital=Berlin, population=3.31002651E8, areaSquareKm=9833517.0, gdp=21.45, cityIds=null))]
2025-05-04 03:41:09 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 03:41:09 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 03:41:09 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 28
2025-05-04 03:41:12 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=9
2025-05-04 03:41:12 | INFO  | org.example.service.CityService - Getting cities with countryId_9 from cache
2025-05-04 03:41:12 | INFO  | org.example.service.CityService - [CityDto(id=17, name=Minsk, population=2000000.0, areaSquareKm=409.5, country=CountryDto(id=9, name=United Stas, capital=Berlin, population=3.31002651E8, areaSquareKm=9833517.0, gdp=21.45, cityIds=null))]
2025-05-04 03:41:12 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 03:41:12 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 03:41:12 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 29
2025-05-04 03:41:19 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), args=9
2025-05-04 03:41:19 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 9
2025-05-04 03:41:19 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 9
2025-05-04 03:41:19 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-04 03:41:19 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-04 03:41:19 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 30
2025-05-04 03:41:24 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=9
2025-05-04 03:41:24 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 03:41:24 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 03:41:24 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 31
2025-05-04 03:41:29 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 03:41:29 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:41:29 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 03:41:29 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 03:41:29 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 32
2025-05-04 03:41:31 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 03:41:31 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:41:31 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 03:41:31 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 03:41:31 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 33
2025-05-04 03:41:53 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:41:53 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 03:41:53 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:41:53 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 03:41:53 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 03:41:53 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:41:53 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:41:53 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:41:54 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:41:54 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 03:41:54 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 03:41:54 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 03:41:54 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:41:54 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 03:41:54 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 03:41:54 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:41:54 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 03:41:54 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:41:54 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:41:54 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 03:41:54 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 03:41:54 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:41:54 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 100000.0, area: 500.0 km²
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:41:54 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'Belarus' (ID: 1)
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 500.0 km²
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:41:54 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'Belarus'
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - Converting cached list to set for countryId_1
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 03:41:54 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:43:06 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 03:43:06 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:43:22 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:43:22 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 03:43:22 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:43:22 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:43:22 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:43:22 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:43:32 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:43:32 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 03:43:32 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:43:32 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 03:43:32 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 03:43:32 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:43:32 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:43:32 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:43:32 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:43:32 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 03:43:32 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 03:43:32 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 03:43:32 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:43:32 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 03:43:32 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 03:43:32 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:43:32 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 03:43:32 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:43:32 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:43:32 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 03:43:32 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 03:43:32 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:43:32 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 100000.0, area: 500.0 km²
2025-05-04 03:43:32 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'Belarus' (ID: 1)
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 500.0 km²
2025-05-04 03:43:32 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'Belarus'
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - Converting cached list to set for countryId_1
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:43:32 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 03:47:31 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:47:31 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 03:47:31 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:47:31 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 03:47:31 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 03:47:31 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:47:31 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:47:31 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:47:31 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:47:31 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 03:47:31 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 03:47:31 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 03:47:31 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:47:31 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 03:47:31 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 03:47:31 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:47:31 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 03:47:31 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:47:31 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:47:31 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 03:47:31 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 03:47:31 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 03:47:31 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:47:31 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:47:31 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:47:31 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:47:31 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 100000.0, area: 500.0 km²
2025-05-04 03:47:31 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 03:47:31 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:47:31 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:47:31 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: null
2025-05-04 03:47:31 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:47:31 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:47:31 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 03:47:31 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:47:31 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:47:31 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:47:31 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:47:31 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'Belarus' (ID: 1)
2025-05-04 03:47:31 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:47:31 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:47:31 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:47:31 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:47:31 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 500.0 km²
2025-05-04 03:47:31 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:47:31 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:47:31 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:47:31 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:47:31 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:47:31 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:47:31 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 03:47:31 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:47:32 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:47:32 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 03:47:32 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:47:32 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:47:32 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:47:32 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'Belarus'
2025-05-04 03:47:32 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:47:32 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:47:32 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:47:32 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 03:47:32 | INFO  | org.example.service.CityService - Converting cached list to set for countryId_1
2025-05-04 03:47:32 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 03:47:32 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:47:32 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:47:32 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:47:32 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:47:32 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:47:32 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:47:32 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 03:47:32 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:47:32 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 03:47:56 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:47:56 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 03:47:56 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:47:56 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 03:47:56 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 03:47:56 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:47:56 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:47:56 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:47:56 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:47:56 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 03:47:56 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 03:47:56 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 03:47:56 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:47:56 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 03:47:56 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 03:47:56 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:47:56 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 03:47:56 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:47:56 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:47:56 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 03:47:56 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 03:47:56 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:47:56 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 100000.0, area: 500.0 km²
2025-05-04 03:47:56 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'Belarus' (ID: 1)
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 500.0 km²
2025-05-04 03:47:56 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'Belarus'
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - Converting cached list to set for countryId_1
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:47:56 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 03:48:01 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:48:01 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 03:48:01 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:48:01 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 03:48:01 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 03:48:01 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:48:01 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:48:01 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:48:01 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:48:01 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 03:48:01 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 03:48:01 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 03:48:01 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:48:01 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 03:48:01 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 03:48:01 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:48:01 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 03:48:01 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:48:01 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:48:01 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 03:48:01 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 03:48:01 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:48:01 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 100000.0, area: 500.0 km²
2025-05-04 03:48:01 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'Belarus' (ID: 1)
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 500.0 km²
2025-05-04 03:48:01 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'Belarus'
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - Converting cached list to set for countryId_1
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:48:01 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 03:48:09 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:48:09 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 03:48:09 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:48:09 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 03:48:09 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 03:48:09 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:48:09 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:48:09 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:48:09 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:48:09 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 03:48:09 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 03:48:09 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 03:48:09 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:48:09 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 03:48:09 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 03:48:09 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:48:09 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 03:48:09 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:48:09 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:48:09 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 03:48:09 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 03:48:09 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:48:09 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 100000.0, area: 500.0 km²
2025-05-04 03:48:09 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: null
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'Belarus' (ID: 1)
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 500.0 km²
2025-05-04 03:48:09 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'Belarus'
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - Converting cached list to set for countryId_1
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:48:09 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 03:49:24 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 03:49:24 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:49:24 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 03:49:24 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 03:49:24 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 34
2025-05-04 03:49:27 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-04 03:49:27 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 03:49:27 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 03:49:27 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 03:49:27 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 35
2025-05-04 03:49:30 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country)), args=Country(id=null, name=Germany, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cities=[], nations=null)
2025-05-04 03:49:30 | INFO  | org.example.service.CountryService - ✨ Created country: Germany (ID: 10)
2025-05-04 03:49:30 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-04 03:49:30 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-04 03:49:30 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 36
2025-05-04 03:49:31 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country)), args=Country(id=null, name=Germany, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cities=[], nations=null)
2025-05-04 03:49:31 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Germany
2025-05-04 03:49:31 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country)), exception: Country exists
2025-05-04 03:49:31 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-04 03:49:31 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 37
2025-05-04 03:49:37 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-04 03:49:37 | INFO  | org.example.service.CountryService - 🔄 Fetched 1 countries from DB and cached
2025-05-04 03:49:37 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 03:49:37 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 03:49:37 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 38
2025-05-04 03:49:43 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=9
2025-05-04 03:49:43 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 9
2025-05-04 03:49:43 | ERROR | o.example.aspect.CountrySearchAspect - After throwing execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), exception: Country not found
2025-05-04 03:49:43 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-04 03:49:43 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 39
2025-05-04 03:50:02 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=10
2025-05-04 03:50:02 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_10
2025-05-04 03:50:02 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-04 03:50:02 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-04 03:50:02 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 40
2025-05-04 03:50:05 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long)), args=10
2025-05-04 03:50:05 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_10
2025-05-04 03:50:05 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-04 03:50:05 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountryById(Long))
2025-05-04 03:50:05 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 41
2025-05-04 03:50:21 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=10
2025-05-04 03:50:21 | INFO  | org.example.service.CityService - Cities with countryId_10 loaded from database and cached
2025-05-04 03:50:21 | INFO  | org.example.service.CityService - []
2025-05-04 03:50:21 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 03:50:21 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 03:50:21 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 42
2025-05-04 03:50:31 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List)), args=10,[City(id=null, name=Minsk, population=2000000.0, areaSquareKm=409.5, country=null), City(id=null, name=Grodno, population=370000.0, areaSquareKm=142.1, country=null)]
2025-05-04 03:50:31 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 19) to country 'Germany' (ID: 10)
2025-05-04 03:50:31 | INFO  | org.example.service.CityService - Evicted cities cache for country 10
2025-05-04 03:50:31 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 10). Action: ADD
2025-05-04 03:50:31 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 20) to country 'Germany' (ID: 10)
2025-05-04 03:50:31 | INFO  | org.example.service.CityService - Evicted cities cache for country 10
2025-05-04 03:50:31 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 10). Action: ADD
2025-05-04 03:50:31 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-04 03:50:31 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-04 03:50:31 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 43
2025-05-04 03:50:34 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=10
2025-05-04 03:50:34 | INFO  | org.example.service.CityService - Cities with countryId_10 loaded from database and cached
2025-05-04 03:50:34 | INFO  | org.example.service.CityService - [CityDto(id=20, name=Grodno, population=370000.0, areaSquareKm=142.1, country=CountryDto(id=10, name=Germany, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cityIds=null)), CityDto(id=19, name=Minsk, population=2000000.0, areaSquareKm=409.5, country=CountryDto(id=10, name=Germany, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cityIds=null))]
2025-05-04 03:50:34 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 03:50:34 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 03:50:34 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 44
2025-05-04 03:50:38 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=10
2025-05-04 03:50:38 | INFO  | org.example.service.CityService - Getting cities with countryId_10 from cache
2025-05-04 03:50:38 | INFO  | org.example.service.CityService - [CityDto(id=20, name=Grodno, population=370000.0, areaSquareKm=142.1, country=CountryDto(id=10, name=Germany, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cityIds=null)), CityDto(id=19, name=Minsk, population=2000000.0, areaSquareKm=409.5, country=CountryDto(id=10, name=Germany, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cityIds=null))]
2025-05-04 03:50:38 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 03:50:38 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 03:50:38 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 45
2025-05-04 03:50:57 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), args=10
2025-05-04 03:50:57 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 10
2025-05-04 03:50:57 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 10
2025-05-04 03:50:57 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-04 03:50:57 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-04 03:50:57 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 46
2025-05-04 03:51:02 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=10
2025-05-04 03:51:02 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 03:51:02 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 03:51:02 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 47
2025-05-04 03:51:05 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 03:51:05 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:51:05 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 03:51:05 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 03:51:05 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 48
2025-05-04 03:51:59 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:51:59 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 03:51:59 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:51:59 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 03:51:59 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 03:51:59 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:51:59 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:51:59 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:51:59 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:51:59 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 03:51:59 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 03:51:59 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 03:51:59 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:51:59 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 03:51:59 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 03:51:59 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:51:59 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 03:51:59 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:51:59 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:51:59 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 03:51:59 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 03:51:59 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:51:59 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 100000.0, area: 500.0 km²
2025-05-04 03:51:59 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: null
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'Belarus' (ID: 1)
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 500.0 km²
2025-05-04 03:51:59 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:51:59 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'Belarus'
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - Converting cached list to set for countryId_1
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:51:59 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 03:52:18 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:52:18 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 03:52:18 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:52:18 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 03:52:18 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 03:52:18 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:52:18 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:52:18 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:52:18 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:52:18 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 03:52:18 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 03:52:18 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 03:52:18 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:52:18 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 03:52:18 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 03:52:18 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:52:18 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 03:52:18 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:52:18 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:52:18 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 03:52:18 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 03:52:18 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:52:18 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 100000.0, area: 500.0 km²
2025-05-04 03:52:18 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: null
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'Belarus' (ID: 1)
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 500.0 km²
2025-05-04 03:52:18 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:52:18 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'Belarus'
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - Converting cached list to set for countryId_1
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:52:18 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 03:54:48 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:54:48 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 03:54:48 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:54:48 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 03:54:48 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 03:54:48 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:54:48 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:54:48 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:54:48 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:54:48 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 03:54:48 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 03:54:48 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 03:54:48 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:54:48 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 03:54:48 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 03:54:48 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:54:48 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 03:54:48 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:54:48 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:54:48 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 03:54:48 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 03:54:48 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:54:48 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 100000.0, area: 500.0 km²
2025-05-04 03:54:48 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: null
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'Belarus' (ID: 1)
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 500.0 km²
2025-05-04 03:54:48 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:54:48 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'Belarus'
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - Converting cached list to set for countryId_1
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:54:48 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 03:55:52 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-04 03:55:52 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-04 03:55:52 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-04 03:55:52 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-04 03:55:55 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:55:55 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 03:55:55 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:55:55 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 03:55:55 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 03:55:55 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:55:55 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:55:55 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:55:55 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:55:55 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 03:55:55 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 03:55:55 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 03:55:55 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:55:55 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 03:55:55 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 03:55:55 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:55:55 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 03:55:55 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:55:55 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:55:55 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 03:55:55 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 03:55:55 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:55:55 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 100000.0, area: 500.0 km²
2025-05-04 03:55:55 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: null
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'Belarus' (ID: 1)
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 500.0 km²
2025-05-04 03:55:55 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:55:55 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'Belarus'
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - Converting cached list to set for countryId_1
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:55:55 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 03:56:11 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:56:11 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 03:56:11 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:56:11 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 03:56:11 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 03:56:11 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:56:11 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:56:11 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:56:11 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:56:11 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 03:56:11 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 03:56:11 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 03:56:11 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:56:11 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 03:56:11 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 03:56:11 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:56:11 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 03:56:11 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:56:11 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:56:11 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 03:56:11 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 03:56:11 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:56:11 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 100000.0, area: 500.0 km²
2025-05-04 03:56:11 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: null
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'Belarus' (ID: 1)
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 500.0 km²
2025-05-04 03:56:11 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:56:11 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'Belarus'
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - Converting cached list to set for countryId_1
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:56:11 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 03:56:21 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:56:21 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 03:56:21 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:56:21 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 03:56:21 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 03:56:21 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:56:21 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:56:21 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:56:21 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:56:21 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 03:56:21 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 03:56:21 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 03:56:21 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:56:21 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 03:56:21 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 03:56:21 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:56:21 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 03:56:21 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:56:21 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:56:21 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 03:56:21 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 03:56:21 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:56:21 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 100000.0, area: 500.0 km²
2025-05-04 03:56:21 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: null
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'Belarus' (ID: 1)
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 500.0 km²
2025-05-04 03:56:21 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:56:21 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'Belarus'
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - Converting cached list to set for countryId_1
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:56:21 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 03:56:59 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:56:59 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 03:56:59 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:56:59 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 03:56:59 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 03:57:00 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:57:00 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:57:00 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:57:00 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:57:00 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 03:57:00 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 03:57:00 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 03:57:00 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:57:00 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 03:57:00 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 03:57:00 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:57:00 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 03:57:00 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:57:00 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:57:00 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 03:57:00 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 03:57:00 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:57:00 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 100000.0, area: 500.0 km²
2025-05-04 03:57:00 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: null
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'Belarus' (ID: 1)
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 500.0 km²
2025-05-04 03:57:00 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:57:00 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'Belarus'
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - Converting cached list to set for countryId_1
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:57:00 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 03:57:26 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:57:26 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 03:57:26 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:57:26 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 03:57:26 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 03:57:26 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:57:26 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:57:26 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:57:26 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:57:26 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 03:57:26 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 03:57:26 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 03:57:26 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:57:26 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 03:57:26 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 03:57:26 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:57:26 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 03:57:26 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:57:26 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:57:26 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 03:57:26 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 03:57:26 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:57:26 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 100000.0, area: 500.0 km²
2025-05-04 03:57:26 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: null
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'Belarus' (ID: 1)
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 500.0 km²
2025-05-04 03:57:26 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:57:26 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'Belarus'
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - Converting cached list to set for countryId_1
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:57:26 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 03:58:14 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:58:14 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 03:58:14 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:58:14 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 03:58:14 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 03:58:14 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:58:14 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:58:14 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:58:14 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:58:14 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 03:58:14 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 03:58:14 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 03:58:14 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:58:14 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 03:58:14 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 03:58:14 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:58:14 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 03:58:14 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:58:14 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:58:14 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 03:58:14 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 03:58:15 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:58:15 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 100000.0, area: 500.0 km²
2025-05-04 03:58:15 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: null
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'Belarus' (ID: 1)
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 500.0 km²
2025-05-04 03:58:15 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:58:15 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'Belarus'
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - Converting cached list to set for countryId_1
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:58:15 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 03:58:30 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:58:30 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 03:58:30 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:58:30 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 03:58:30 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 03:58:30 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:58:30 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:58:30 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:58:30 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 03:58:30 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 03:58:30 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 03:58:30 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 03:58:30 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 03:58:30 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 03:58:30 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 03:58:30 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 03:58:30 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 03:58:30 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 03:58:30 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 03:58:30 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 03:58:30 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 03:58:30 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:58:30 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 100000.0, area: 500.0 km²
2025-05-04 03:58:30 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: null
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'Belarus' (ID: 1)
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 500.0 km²
2025-05-04 03:58:30 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:58:30 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'Belarus'
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - Converting cached list to set for countryId_1
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 03:58:30 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 04:00:25 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 04:00:25 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 04:00:25 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 04:00:25 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 04:00:25 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 04:00:25 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 04:00:25 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 04:00:25 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 04:00:25 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 04:00:25 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 04:00:25 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 04:00:25 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 04:00:25 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 04:00:25 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 04:00:25 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 04:00:25 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 04:00:25 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 04:00:25 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 04:00:25 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 04:00:25 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 04:00:25 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 04:00:26 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 04:00:26 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 100000.0, area: 500.0 km²
2025-05-04 04:00:26 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: null
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'Belarus' (ID: 1)
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 500.0 km²
2025-05-04 04:00:26 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 04:00:26 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'Belarus'
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - Converting cached list to set for countryId_1
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 04:00:26 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 04:00:36 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 04:00:36 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 04:00:36 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 04:00:36 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 04:00:36 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 04:00:36 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 04:00:36 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 04:00:36 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 04:00:36 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 04:00:36 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 04:00:36 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 04:00:36 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 04:00:36 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 04:00:36 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 04:00:36 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 04:00:36 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 04:00:36 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 04:00:36 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 04:00:36 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 04:00:36 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 04:00:36 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 04:00:36 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 04:00:36 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 100000.0, area: 500.0 km²
2025-05-04 04:00:36 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: null
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'Belarus' (ID: 1)
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 500.0 km²
2025-05-04 04:00:36 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 04:00:36 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'Belarus'
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - Converting cached list to set for countryId_1
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 04:00:36 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 04:00:47 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 04:00:47 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 04:00:47 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 04:00:47 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 04:00:47 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 04:00:47 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 04:00:47 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 04:00:47 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 04:00:47 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 04:00:47 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 04:00:47 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 04:00:47 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 04:00:47 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 04:00:47 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 04:00:47 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 04:00:47 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 04:00:47 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 04:00:47 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 04:00:47 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 04:00:47 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 04:00:47 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 04:00:47 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 04:00:47 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 100000.0, area: 500.0 km²
2025-05-04 04:00:47 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: null
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'Belarus' (ID: 1)
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 500.0 km²
2025-05-04 04:00:47 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 04:00:47 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'Belarus'
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - Converting cached list to set for countryId_1
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 04:00:47 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 04:05:20 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-04 04:05:20 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 45982 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-04 04:05:20 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-04 04:05:21 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-04 04:05:21 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19 ms. Found 3 JPA repository interfaces.
2025-05-04 04:05:21 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-04 04:05:21 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-04 04:05:21 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-04 04:05:21 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-04 04:05:21 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-04 04:05:21 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 747 ms
2025-05-04 04:05:21 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-04 04:05:21 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@7d25913
2025-05-04 04:05:21 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-04 04:05:21 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-04 04:05:21 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-04 04:05:21 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-04 04:05:21 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-04 04:05:22 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-04 04:05:22 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-04 04:05:22 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-04 04:05:22 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-04 04:05:23 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-04 04:05:23 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-04 04:05:23 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.172 seconds (process running for 3.598)
2025-05-04 04:05:30 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-04 04:05:30 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-04 04:05:30 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-04 04:05:30 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country)), args=Country(id=null, name=Germany, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cities=[], nations=null)
2025-05-04 04:05:30 | INFO  | org.example.service.CountryService - ✨ Created country: Germany (ID: 11)
2025-05-04 04:05:30 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-04 04:05:30 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-04 04:05:30 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-04 04:05:34 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-04 04:05:34 | INFO  | org.example.service.CountryService - 🔄 Fetched 1 countries from DB and cached
2025-05-04 04:05:34 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 04:05:34 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 04:05:34 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-04 04:05:41 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List)), args=11,[City(id=null, name=Minsk, population=2000000.0, areaSquareKm=409.5, country=null), City(id=null, name=Grodno, population=370000.0, areaSquareKm=142.1, country=null)]
2025-05-04 04:05:41 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 11). Action: ADD
2025-05-04 04:05:41 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 21) to country 'Germany' (ID: 11)
2025-05-04 04:05:41 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 11). Action: ADD
2025-05-04 04:05:41 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 22) to country 'Germany' (ID: 11)
2025-05-04 04:05:41 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-04 04:05:41 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-04 04:05:41 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 3
2025-05-04 04:05:44 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-04 04:05:44 | INFO  | org.example.service.CountryService - ✅ Retrieved 1 countries from cache
2025-05-04 04:05:44 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 04:05:44 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 04:05:44 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 4
2025-05-04 04:05:45 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-04 04:05:45 | INFO  | org.example.service.CountryService - ✅ Retrieved 1 countries from cache
2025-05-04 04:05:45 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 04:05:45 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 04:05:45 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 5
2025-05-04 04:05:49 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 04:05:49 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 04:05:49 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 04:05:49 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 04:05:49 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 6
2025-05-04 04:05:53 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=10
2025-05-04 04:05:53 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 04:05:53 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 04:05:53 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 7
2025-05-04 04:05:57 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 04:05:57 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 04:05:57 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 04:05:57 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 04:05:57 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 8
2025-05-04 04:06:11 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.updateCountry(Long,String,String,Double,Double,Double)), args=11,United Stas,Berlin,3.31002651E8,9833517.0,21.45
2025-05-04 04:06:11 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 11
2025-05-04 04:06:11 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 11
2025-05-04 04:06:11 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.updateCountry(Long,String,String,Double,Double,Double))
2025-05-04 04:06:11 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.updateCountry(Long,String,String,Double,Double,Double))
2025-05-04 04:06:11 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 9
2025-05-04 04:06:14 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 04:06:14 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 04:06:14 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 04:06:14 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 04:06:14 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 10
2025-05-04 04:06:16 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 04:06:16 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 04:06:16 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 04:06:16 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 04:06:16 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 11
2025-05-04 04:06:27 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=11
2025-05-04 04:06:27 | INFO  | org.example.service.CityService - Cities with countryId_11 loaded from database and cached
2025-05-04 04:06:27 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 04:06:27 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 04:06:27 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 12
2025-05-04 04:06:30 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=11
2025-05-04 04:06:30 | INFO  | org.example.service.CityService - Getting cities with countryId_11 from cache
2025-05-04 04:06:30 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 04:06:30 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 04:06:30 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 13
2025-05-04 04:06:45 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long)), args=11
2025-05-04 04:06:45 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 11
2025-05-04 04:06:45 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 11
2025-05-04 04:06:45 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-04 04:06:45 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.deleteCountry(Long))
2025-05-04 04:06:45 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 14
2025-05-04 04:06:47 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=11
2025-05-04 04:06:47 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 04:06:47 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 04:06:47 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 15
2025-05-04 04:06:50 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 04:06:50 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 04:06:50 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 04:06:50 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 04:06:50 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 16
2025-05-04 04:31:42 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=23m44s688ms).
2025-05-04 05:52:50 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h21m7s669ms).
2025-05-04 07:25:12 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h32m21s585ms).
2025-05-04 08:44:04 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h18m52s331ms).
2025-05-04 10:11:07 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h27m3s306ms).
2025-05-04 11:13:47 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h2m39s245ms).
2025-05-04 12:48:34 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h34m47s571ms).
2025-05-04 13:31:46 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=43m11s637ms).
2025-05-04 13:32:16 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Retrograde clock change detected (housekeeper delta=29s842ms), soft-evicting connections from pool.
2025-05-04 13:48:11 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m54s923ms).
2025-05-04 13:51:26 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 13:51:26 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 13:51:26 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 13:51:26 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 13:51:26 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 17
2025-05-04 13:51:28 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCities()), args=
2025-05-04 13:51:28 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 13:51:28 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 13:51:28 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCities())
2025-05-04 13:51:28 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 18
2025-05-04 13:51:40 | WARN  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=2m59s903ms).
2025-05-04 13:51:58 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=11
2025-05-04 13:51:58 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 13:51:58 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 13:51:58 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 19
2025-05-04 13:52:04 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.getCountries()), args=
2025-05-04 13:52:04 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 13:52:04 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 13:52:04 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.getCountries())
2025-05-04 13:52:04 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 20
2025-05-04 13:52:06 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country)), args=Country(id=null, name=Germany, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cities=[], nations=null)
2025-05-04 13:52:06 | INFO  | org.example.service.CountryService - ✨ Created country: Germany (ID: 12)
2025-05-04 13:52:06 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-04 13:52:06 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CountryController.addNewCountry(Country))
2025-05-04 13:52:06 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 21
2025-05-04 13:52:15 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List)), args=12,[City(id=null, name=Minsk, population=2000000.0, areaSquareKm=409.5, country=null), City(id=null, name=Grodno, population=370000.0, areaSquareKm=142.1, country=null)]
2025-05-04 13:52:15 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 12). Action: ADD
2025-05-04 13:52:15 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 23) to country 'Germany' (ID: 12)
2025-05-04 13:52:15 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Germany' (ID: 12). Action: ADD
2025-05-04 13:52:15 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 24) to country 'Germany' (ID: 12)
2025-05-04 13:52:15 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-04 13:52:15 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.addNewCitiesByCountryId(Long,List))
2025-05-04 13:52:15 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 22
2025-05-04 13:52:29 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=12
2025-05-04 13:52:29 | INFO  | org.example.service.CityService - Cities with countryId_12 loaded from database and cached
2025-05-04 13:52:29 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 13:52:29 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 13:52:29 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 23
2025-05-04 13:52:34 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=12
2025-05-04 13:52:34 | INFO  | org.example.service.CityService - Getting cities with countryId_12 from cache
2025-05-04 13:52:34 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 13:52:34 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 13:52:34 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 24
2025-05-04 13:53:09 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 13:53:09 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 13:53:09 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 13:53:09 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 13:53:09 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 13:53:10 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 13:53:10 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 13:53:10 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 13:53:10 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 13:53:10 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 13:53:10 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 13:53:10 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 13:53:10 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 13:53:10 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 13:53:10 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 13:53:10 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 13:53:10 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 13:53:10 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 13:53:10 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 13:53:10 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 13:53:10 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 13:53:10 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 13:53:10 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 100000.0, area: 500.0 km²
2025-05-04 13:53:10 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: null
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'Belarus' (ID: 1)
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 500.0 km²
2025-05-04 13:53:10 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 13:53:10 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'Belarus'
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - Converting cached list to set for countryId_1
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:53:10 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 13:53:17 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 13:53:17 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 13:53:17 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 13:53:17 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 13:53:17 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 13:53:17 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 13:53:17 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 13:53:17 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 13:53:17 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 13:53:17 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 13:53:17 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 13:53:17 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 13:53:17 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 13:53:17 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 13:53:17 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 13:53:17 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 13:53:17 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 13:53:17 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 13:53:17 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 13:53:17 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 13:53:17 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 13:53:17 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - []
2025-05-04 13:53:17 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 100000.0, area: 500.0 km²
2025-05-04 13:53:17 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - []
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: null
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'Belarus' (ID: 1)
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 500.0 km²
2025-05-04 13:53:17 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - []
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 13:53:17 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'Belarus'
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - Converting cached list to set for countryId_1
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:53:17 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 13:54:00 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 13:54:00 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 13:54:00 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 13:54:00 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 13:54:00 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 13:54:00 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 13:54:00 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 13:54:00 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 13:54:00 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 13:54:00 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 13:54:00 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 13:54:00 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 13:54:00 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 13:54:00 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 13:54:00 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 13:54:00 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 13:54:00 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 13:54:00 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 13:54:00 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 13:54:00 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 13:54:00 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 13:54:00 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - []
2025-05-04 13:54:00 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 100000.0, area: 500.0 km²
2025-05-04 13:54:00 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - []
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: null
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'Belarus' (ID: 1)
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 500.0 km²
2025-05-04 13:54:00 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - []
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 13:54:00 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'Belarus'
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - []
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - Converting cached list to set for countryId_1
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:54:00 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 13:54:16 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-04 13:54:16 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-04 13:54:16 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-04 13:54:16 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-04 13:54:17 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-04 13:54:17 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 46547 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-04 13:54:17 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-04 13:54:18 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-04 13:54:18 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 21 ms. Found 3 JPA repository interfaces.
2025-05-04 13:54:18 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-04 13:54:18 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-04 13:54:18 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-04 13:54:18 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-04 13:54:18 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-04 13:54:18 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 753 ms
2025-05-04 13:54:18 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-04 13:54:18 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@40d96578
2025-05-04 13:54:18 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-04 13:54:18 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-04 13:54:18 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-04 13:54:18 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-04 13:54:18 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-04 13:54:19 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-04 13:54:19 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-04 13:54:19 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-04 13:54:19 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-04 13:54:20 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-04 13:54:20 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-04 13:54:20 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.176 seconds (process running for 3.544)
2025-05-04 13:54:22 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-04 13:54:22 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-04 13:54:22 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-04 13:54:22 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=12
2025-05-04 13:54:22 | INFO  | org.example.service.CityService - Cities with countryId_12 loaded from database and cached
2025-05-04 13:54:22 | INFO  | org.example.service.CityService - [CityDto(id=23, name=Minsk, population=2000000.0, areaSquareKm=409.5, country=CountryDto(id=12, name=Germany, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cityIds=null)), CityDto(id=24, name=Grodno, population=370000.0, areaSquareKm=142.1, country=CountryDto(id=12, name=Germany, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cityIds=null))]
2025-05-04 13:54:22 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 13:54:22 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 13:54:22 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-04 13:54:25 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=12
2025-05-04 13:54:25 | INFO  | org.example.service.CityService - Getting cities with countryId_12 from cache
2025-05-04 13:54:25 | INFO  | org.example.service.CityService - [CityDto(id=23, name=Minsk, population=2000000.0, areaSquareKm=409.5, country=CountryDto(id=12, name=Germany, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cityIds=null)), CityDto(id=24, name=Grodno, population=370000.0, areaSquareKm=142.1, country=CountryDto(id=12, name=Germany, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cityIds=null))]
2025-05-04 13:54:25 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 13:54:25 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 13:54:25 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
2025-05-04 13:55:01 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 13:55:01 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 13:55:01 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 13:55:01 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 13:55:01 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 13:55:01 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 13:55:01 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 13:55:01 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 13:55:01 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 13:55:01 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 13:55:01 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 13:55:01 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 13:55:01 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 13:55:01 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 13:55:01 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 13:55:01 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 13:55:01 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 13:55:01 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 13:55:01 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 13:55:01 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 13:55:01 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 13:55:01 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - []
2025-05-04 13:55:01 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 100000.0, area: 500.0 km²
2025-05-04 13:55:01 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - []
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: null
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'Belarus' (ID: 1)
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 500.0 km²
2025-05-04 13:55:01 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - []
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 13:55:01 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'Belarus'
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - []
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - Converting cached list to set for countryId_1
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:55:01 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 13:55:17 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 13:55:17 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 13:55:17 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 13:55:17 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 13:55:17 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 13:55:17 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 13:55:17 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 13:55:17 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 13:55:17 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 13:55:17 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 13:55:17 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 13:55:17 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 13:55:17 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 13:55:17 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 13:55:17 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 13:55:17 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 13:55:17 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 13:55:17 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 13:55:17 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 13:55:17 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 13:55:17 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 13:55:17 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - []
2025-05-04 13:55:17 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 100000.0, area: 500.0 km²
2025-05-04 13:55:17 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - []
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: null
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'Belarus' (ID: 1)
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 500.0 km²
2025-05-04 13:55:17 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - []
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 13:55:17 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'Belarus'
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - []
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - Converting cached list to set for countryId_1
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:55:17 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 13:57:38 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 13:57:38 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 13:57:38 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 13:57:38 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 13:57:38 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 13:57:38 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 13:57:38 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 13:57:38 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 13:57:38 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 13:57:38 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 13:57:38 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 13:57:38 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 13:57:38 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 13:57:38 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 13:57:38 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 13:57:38 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 13:57:38 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 13:57:38 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 13:57:38 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 13:57:38 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 13:57:38 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 13:57:39 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - []
2025-05-04 13:57:39 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 100000.0, area: 500.0 km²
2025-05-04 13:57:39 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - []
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: null
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'Belarus' (ID: 1)
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 500.0 km²
2025-05-04 13:57:39 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - []
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 13:57:39 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'Belarus'
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - []
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - Converting cached list to set for countryId_1
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:57:39 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 13:59:12 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 13:59:12 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 13:59:12 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 13:59:12 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 13:59:12 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 13:59:12 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 13:59:12 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 13:59:12 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 13:59:12 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 13:59:12 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 13:59:12 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 13:59:12 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 13:59:12 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 13:59:12 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 13:59:12 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 13:59:12 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 13:59:12 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 13:59:12 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 13:59:12 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 13:59:12 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 13:59:12 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 13:59:12 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - []
2025-05-04 13:59:12 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 100000.0, area: 500.0 km²
2025-05-04 13:59:12 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - []
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: null
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'Belarus' (ID: 1)
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 500.0 km²
2025-05-04 13:59:12 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - []
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 13:59:12 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'Belarus'
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - []
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - []
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - Converting cached list to set for countryId_1
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:59:12 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 13:59:22 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 13:59:22 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 13:59:22 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 13:59:22 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 13:59:22 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 13:59:22 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 13:59:22 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 13:59:22 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 13:59:22 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 13:59:22 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 13:59:22 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 13:59:22 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 13:59:22 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 13:59:22 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 13:59:22 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 13:59:22 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 13:59:22 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 13:59:22 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 13:59:22 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 13:59:22 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 13:59:22 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 13:59:22 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - []
2025-05-04 13:59:22 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 100000.0, area: 500.0 km²
2025-05-04 13:59:22 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - []
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: null
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'Belarus' (ID: 1)
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 500.0 km²
2025-05-04 13:59:22 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - []
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 13:59:22 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'Belarus'
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - []
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - Converting cached list to set for countryId_1
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:59:22 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 13:59:43 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 13:59:43 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 13:59:43 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 13:59:43 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 13:59:43 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 13:59:43 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 13:59:43 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 13:59:43 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 13:59:43 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 13:59:43 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 13:59:43 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 13:59:43 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 13:59:43 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 13:59:43 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 13:59:43 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 13:59:43 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 13:59:43 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 13:59:43 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 13:59:43 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 13:59:43 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 13:59:43 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 13:59:43 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - []
2025-05-04 13:59:43 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 100000.0, area: 500.0 km²
2025-05-04 13:59:43 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - []
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: null
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'Belarus' (ID: 1)
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 500.0 km²
2025-05-04 13:59:43 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - []
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 13:59:43 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'Belarus'
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - []
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - Converting cached list to set for countryId_1
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 13:59:43 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 14:00:19 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 14:00:19 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 14:00:19 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 14:00:19 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 14:00:19 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 14:00:19 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 14:00:19 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 14:00:19 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 14:00:19 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 14:00:19 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 14:00:19 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 14:00:19 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 14:00:19 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 14:00:19 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 14:00:19 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 14:00:19 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 14:00:19 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 14:00:19 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 14:00:19 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 14:00:19 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 14:00:19 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 14:00:19 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - []
2025-05-04 14:00:19 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 100000.0, area: 500.0 km²
2025-05-04 14:00:19 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - []
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: null
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'Belarus' (ID: 1)
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 500.0 km²
2025-05-04 14:00:19 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - []
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 14:00:19 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'Belarus'
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - []
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - Converting cached list to set for countryId_1
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 14:00:19 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 14:00:25 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 14:00:25 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 14:00:25 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 14:00:25 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 14:00:25 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 14:00:25 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 14:00:25 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 14:00:25 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 14:00:25 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 14:00:25 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 14:00:25 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 14:00:25 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 14:00:25 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 14:00:25 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 14:00:25 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 14:00:25 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 14:00:25 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 14:00:25 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 14:00:25 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 14:00:25 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 14:00:25 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 14:00:25 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - []
2025-05-04 14:00:25 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 100000.0, area: 500.0 km²
2025-05-04 14:00:25 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - []
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: null
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'Belarus' (ID: 1)
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 500.0 km²
2025-05-04 14:00:25 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - []
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 14:00:25 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'Belarus'
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - []
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - Converting cached list to set for countryId_1
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 14:00:25 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 14:01:04 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 14:01:04 | INFO  | org.example.service.CountryService - 🗑️ Deleted country ID: 1
2025-05-04 14:01:04 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 14:01:04 | INFO  | org.example.service.CountryService - ✨ Created country: Russia (ID: 2)
2025-05-04 14:01:04 | INFO  | org.example.service.CountryService - ✨ Added 2 countries
2025-05-04 14:01:04 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 14:01:04 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 14:01:04 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 14:01:04 | WARN  | org.example.service.CountryService - Attempting to delete country ID: 1
2025-05-04 14:01:04 | ERROR | org.example.service.CountryService - 🚫 Country not found with ID: 1
2025-05-04 14:01:04 | INFO  | org.example.service.CountryService - ✅ Country found in cache: country_1
2025-05-04 14:01:04 | INFO  | org.example.service.CountryService - 🔄 Fetched 0 countries from DB and cached
2025-05-04 14:01:04 | INFO  | org.example.service.CountryService - 🔄 Country loaded from DB and cached: country_1
2025-05-04 14:01:04 | ERROR | org.example.service.CountryService - 🚫 Country already exists: Belarus
2025-05-04 14:01:04 | ERROR | org.example.service.CountryService - 🚫 Country name conflict: Belarus
2025-05-04 14:01:04 | INFO  | org.example.service.CountryService - ✨ Created country: Belarus (ID: 1)
2025-05-04 14:01:04 | INFO  | org.example.service.CountryService - ✅ Retrieved 0 countries from cache
2025-05-04 14:01:04 | INFO  | org.example.service.CountryService - Invalidated cities cache for country ID: 1
2025-05-04 14:01:04 | INFO  | org.example.service.CountryService - 🔄 Updated country ID: 1
2025-05-04 14:01:04 | WARN  | org.example.service.CountryService - Attempting to delete all countries
2025-05-04 14:01:04 | INFO  | org.example.service.CountryService - 🗑️ Deleted all countries
2025-05-04 14:01:05 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - []
2025-05-04 14:01:05 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 100000.0, area: 500.0 km²
2025-05-04 14:01:05 | WARN  | org.example.service.CityService - Invalid cache entry for key: cities_country_1. Removing cache.
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - []
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: null
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - ➕ Added city 'Grodno' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 2) to country 'Belarus' (ID: 1)
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 500.0 km²
2025-05-04 14:01:05 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - 🗑️ Deleting city 'Minsk' (ID: 1)
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - ✅ City 'Minsk' (ID: 1) deleted and cache invalidated
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: 1000000.0, area: 5000.0 km²
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - Cities with countryId_1 loaded from database and cached
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - []
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Grodno', population: -100.0, area: 0.0 km²
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - ➕ Added city 'Minsk' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 14:01:05 | WARN  | org.example.service.CityService - Invalid or empty cache entry for key: allCities
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - 🗑️ Deleting 0 cities from country 'Belarus'
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - Getting cities with countryId_1 from cache
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - []
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - Deleted city ID: 1, previously belonged to country ID: 1
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - Converting cached list to set for countryId_1
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - 🗑️ Deleting 1 cities from country 'Belarus'
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: DELETE
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - Cities loaded from database and cached
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - Getting cities from cache
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - Evicted cities cache for country 1
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: ADD
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - ➕ Added city 'Brest' (ID: 1) to country 'Belarus' (ID: 1)
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: 'Minsk', population: 2000000.0, area: 600.0 km²
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - 🔄 Updating cache for country 'Belarus' (ID: 1). Action: UPDATE
2025-05-04 14:01:05 | INFO  | org.example.service.CityService - ✏️ Updated city 'Minsk' (ID: 1). New name: '', population: 1000000.0, area: 500.0 km²
2025-05-04 14:01:20 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is destroyed
2025-05-04 14:01:20 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-05-04 14:01:20 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-05-04 14:01:20 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-05-04 14:01:21 | INFO  | o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-05-04 14:01:21 | INFO  | o.example.CountrySearchApplication - Starting CountrySearchApplication using Java 23.0.2 with PID 46880 (/Users/snrteftelya/Desktop/CountrySearch/target/classes started by snrteftelya in /Users/snrteftelya/Desktop/CountrySearch)
2025-05-04 14:01:21 | INFO  | o.example.CountrySearchApplication - No active profile set, falling back to 1 default profile: "default"
2025-05-04 14:01:22 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-04 14:01:22 | INFO  | o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 21 ms. Found 3 JPA repository interfaces.
2025-05-04 14:01:22 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-05-04 14:01:22 | INFO  | o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-05-04 14:01:22 | INFO  | o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-05-04 14:01:22 | INFO  | o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.18]
2025-05-04 14:01:22 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-05-04 14:01:22 | INFO  | o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 726 ms
2025-05-04 14:01:22 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-05-04 14:01:22 | INFO  | com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@3e03046d
2025-05-04 14:01:22 | INFO  | com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-05-04 14:01:22 | INFO  | o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-04 14:01:22 | INFO  | org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-05-04 14:01:22 | INFO  | o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-05-04 14:01:22 | INFO  | o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-04 14:01:23 | INFO  | o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-05-04 14:01:23 | INFO  | o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-04 14:01:23 | INFO  | o.example.aspect.CountrySearchAspect - Aspect is initialized
2025-05-04 14:01:23 | INFO  | o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-05-04 14:01:24 | INFO  | o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-05-04 14:01:24 | INFO  | o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-05-04 14:01:24 | INFO  | o.example.CountrySearchApplication - Started CountrySearchApplication in 3.077 seconds (process running for 3.43)
2025-05-04 14:01:26 | INFO  | o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-04 14:01:26 | INFO  | o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-05-04 14:01:26 | INFO  | o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-05-04 14:01:26 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=12
2025-05-04 14:01:26 | INFO  | org.example.service.CityService - Cities with countryId_12 loaded from database and cached
2025-05-04 14:01:26 | INFO  | org.example.service.CityService - [CityDto(id=23, name=Minsk, population=2000000.0, areaSquareKm=409.5, country=CountryDto(id=12, name=Germany, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cityIds=null)), CityDto(id=24, name=Grodno, population=370000.0, areaSquareKm=142.1, country=CountryDto(id=12, name=Germany, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cityIds=null))]
2025-05-04 14:01:26 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 14:01:26 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 14:01:26 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 1
2025-05-04 14:01:28 | INFO  | o.example.aspect.CountrySearchAspect - Before execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long)), args=12
2025-05-04 14:01:28 | INFO  | org.example.service.CityService - Getting cities with countryId_12 from cache
2025-05-04 14:01:28 | INFO  | org.example.service.CityService - [CityDto(id=23, name=Minsk, population=2000000.0, areaSquareKm=409.5, country=CountryDto(id=12, name=Germany, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cityIds=null)), CityDto(id=24, name=Grodno, population=370000.0, areaSquareKm=142.1, country=CountryDto(id=12, name=Germany, capital=Berlin, population=4.5321033E7, areaSquareKm=4130431.0, gdp=60.23, cityIds=null))]
2025-05-04 14:01:28 | INFO  | o.example.aspect.CountrySearchAspect - After returning execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 14:01:28 | INFO  | o.example.aspect.CountrySearchAspect - After execution(ResponseEntity org.example.controller.CityController.getCitiesByCountryId(Long))
2025-05-04 14:01:28 | INFO  | o.example.aspect.CountrySearchAspect - Count of your accessing the service: 2
